/*!
 * jQuery JavaScript Library v2.1.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-05-01T17:11Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		return !jQuery.isArray( obj ) && obj - parseFloat( obj ) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android < 4.0, iOS < 6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v1.10.19
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-04-18
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== strundefined && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare,
		doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", function() {
				setDocument();
			}, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", function() {
				setDocument();
			});
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select msallowclip=''><option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowclip^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android < 4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Math.random();
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android < 4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



/*
	Implementation Summary

	1. Enforce API surface and semantic compatibility with 1.9.x branch
	2. Improve the module's maintainability by reducing the storage
		paths to a single mechanism.
	3. Use the same single mechanism to support "private" and "user" data.
	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	5. Avoid exposing implementation details on user objects (eg. expando properties)
	6. Provide a clear path for implementation upgrade to WeakMap in 2014
*/
var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// #11217 - WebKit loses check when the name is after the checked attribute
	// Support: Windows Web Apps (WWA)
	// `name` and `type` need .setAttribute for WWA
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE9-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome < 28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Create "bubbling" focus and blur events
// Support: Firefox, Chrome, Safari
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE 9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE 9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Support: IE >= 9
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Support: IE >= 9
		// Fix Cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit
					// jQuery.merge because push.apply(_, arraylike) throws
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit
					// jQuery.merge because push.apply(_, arraylike) throws
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Fixes #12346
					// Support: Webkit, IE
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') in IE9, see #12537
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {
				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {
				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifying setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS 5.1, Android 4.x, Android 2.3
	// Check the default checkbox/radio value ("" on old WebKit; "on" elsewhere)
	support.checkOn = input.value !== "";

	// Must access the parent to make an option select properly
	// Support: IE9, IE10
	support.optSelected = opt.selected;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Check if an input maintains its value after becoming a radio
	// Support: IE9, IE10
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

// Support: IE9+
// Selectedness for an option in an optgroup can be inaccurate
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
if ( window.ActiveXObject ) {
	jQuery( window ).on( "unload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// We assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));/* Modernizr 2.0.6 | MIT & BSD
 * Contains: All core tests, html5shiv, yepnope, respond.js. Get your own custom build at www.modernizr.com/download/
 */
;window.Modernizr=function(a,b,c){function I(){e.input=function(a){for(var b=0,c=a.length;b<c;b++)t[a[b]]=a[b]in l;return t}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),e.inputtypes=function(a){for(var d=0,e,f,h,i=a.length;d<i;d++)l.setAttribute("type",f=a[d]),e=l.type!=="text",e&&(l.value=m,l.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(f)&&l.style.WebkitAppearance!==c?(g.appendChild(l),h=b.defaultView,e=h.getComputedStyle&&h.getComputedStyle(l,null).WebkitAppearance!=="textfield"&&l.offsetHeight!==0,g.removeChild(l)):/^(search|tel)$/.test(f)||(/^(url|email)$/.test(f)?e=l.checkValidity&&l.checkValidity()===!1:/^color$/.test(f)?(g.appendChild(l),g.offsetWidth,e=l.value!=m,g.removeChild(l)):e=l.value!=m)),s[a[d]]=!!e;return s}("search tel url email datetime date month week time datetime-local number range color".split(" "))}function G(a,b){var c=a.charAt(0).toUpperCase()+a.substr(1),d=(a+" "+p.join(c+" ")+c).split(" ");return F(d,b)}function F(a,b){for(var d in a)if(k[a[d]]!==c)return b=="pfx"?a[d]:!0;return!1}function E(a,b){return!!~(""+a).indexOf(b)}function D(a,b){return typeof a===b}function C(a,b){return B(o.join(a+";")+(b||""))}function B(a){k.cssText=a}var d="2.0.6",e={},f=!0,g=b.documentElement,h=b.head||b.getElementsByTagName("head")[0],i="modernizr",j=b.createElement(i),k=j.style,l=b.createElement("input"),m=":)",n=Object.prototype.toString,o=" -webkit- -moz- -o- -ms- -khtml- ".split(" "),p="Webkit Moz O ms Khtml".split(" "),q={svg:"http://www.w3.org/2000/svg"},r={},s={},t={},u=[],v=function(a,c,d,e){var f,h,j,k=b.createElement("div");if(parseInt(d,10))while(d--)j=b.createElement("div"),j.id=e?e[d]:i+(d+1),k.appendChild(j);f=["&shy;","<style>",a,"</style>"].join(""),k.id=i,k.innerHTML+=f,g.appendChild(k),h=c(k,a),k.parentNode.removeChild(k);return!!h},w=function(b){if(a.matchMedia)return matchMedia(b).matches;var c;v("@media "+b+" { #"+i+" { position: absolute; } }",function(b){c=(a.getComputedStyle?getComputedStyle(b,null):b.currentStyle).position=="absolute"});return c},x=function(){function d(d,e){e=e||b.createElement(a[d]||"div"),d="on"+d;var f=d in e;f||(e.setAttribute||(e=b.createElement("div")),e.setAttribute&&e.removeAttribute&&(e.setAttribute(d,""),f=D(e[d],"function"),D(e[d],c)||(e[d]=c),e.removeAttribute(d))),e=null;return f}var a={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return d}(),y,z={}.hasOwnProperty,A;!D(z,c)&&!D(z.call,c)?A=function(a,b){return z.call(a,b)}:A=function(a,b){return b in a&&D(a.constructor.prototype[b],c)};var H=function(c,d){var f=c.join(""),g=d.length;v(f,function(c,d){var f=b.styleSheets[b.styleSheets.length-1],h=f.cssRules&&f.cssRules[0]?f.cssRules[0].cssText:f.cssText||"",i=c.childNodes,j={};while(g--)j[i[g].id]=i[g];e.touch="ontouchstart"in a||j.touch.offsetTop===9,e.csstransforms3d=j.csstransforms3d.offsetLeft===9,e.generatedcontent=j.generatedcontent.offsetHeight>=1,e.fontface=/src/i.test(h)&&h.indexOf(d.split(" ")[0])===0},g,d)}(['@font-face {font-family:"font";src:url("https://")}',["@media (",o.join("touch-enabled),("),i,")","{#touch{top:9px;position:absolute}}"].join(""),["@media (",o.join("transform-3d),("),i,")","{#csstransforms3d{left:9px;position:absolute}}"].join(""),['#generatedcontent:after{content:"',m,'";visibility:hidden}'].join("")],["fontface","touch","csstransforms3d","generatedcontent"]);r.flexbox=function(){function c(a,b,c,d){a.style.cssText=o.join(b+":"+c+";")+(d||"")}function a(a,b,c,d){b+=":",a.style.cssText=(b+o.join(c+";"+b)).slice(0,-b.length)+(d||"")}var d=b.createElement("div"),e=b.createElement("div");a(d,"display","box","width:42px;padding:0;"),c(e,"box-flex","1","width:10px;"),d.appendChild(e),g.appendChild(d);var f=e.offsetWidth===42;d.removeChild(e),g.removeChild(d);return f},r.canvas=function(){var a=b.createElement("canvas");return!!a.getContext&&!!a.getContext("2d")},r.canvastext=function(){return!!e.canvas&&!!D(b.createElement("canvas").getContext("2d").fillText,"function")},r.webgl=function(){return!!a.WebGLRenderingContext},r.touch=function(){return e.touch},r.geolocation=function(){return!!navigator.geolocation},r.postmessage=function(){return!!a.postMessage},r.websqldatabase=function(){var b=!!a.openDatabase;return b},r.indexedDB=function(){for(var b=-1,c=p.length;++b<c;)if(a[p[b].toLowerCase()+"IndexedDB"])return!0;return!!a.indexedDB},r.hashchange=function(){return x("hashchange",a)&&(b.documentMode===c||b.documentMode>7)},r.history=function(){return!!a.history&&!!history.pushState},r.draganddrop=function(){return x("dragstart")&&x("drop")},r.websockets=function(){for(var b=-1,c=p.length;++b<c;)if(a[p[b]+"WebSocket"])return!0;return"WebSocket"in a},r.rgba=function(){B("background-color:rgba(150,255,150,.5)");return E(k.backgroundColor,"rgba")},r.hsla=function(){B("background-color:hsla(120,40%,100%,.5)");return E(k.backgroundColor,"rgba")||E(k.backgroundColor,"hsla")},r.multiplebgs=function(){B("background:url(https://),url(https://),red url(https://)");return/(url\s*\(.*?){3}/.test(k.background)},r.backgroundsize=function(){return G("backgroundSize")},r.borderimage=function(){return G("borderImage")},r.borderradius=function(){return G("borderRadius")},r.boxshadow=function(){return G("boxShadow")},r.textshadow=function(){return b.createElement("div").style.textShadow===""},r.opacity=function(){C("opacity:.55");return/^0.55$/.test(k.opacity)},r.cssanimations=function(){return G("animationName")},r.csscolumns=function(){return G("columnCount")},r.cssgradients=function(){var a="background-image:",b="gradient(linear,left top,right bottom,from(#9f9),to(white));",c="linear-gradient(left top,#9f9, white);";B((a+o.join(b+a)+o.join(c+a)).slice(0,-a.length));return E(k.backgroundImage,"gradient")},r.cssreflections=function(){return G("boxReflect")},r.csstransforms=function(){return!!F(["transformProperty","WebkitTransform","MozTransform","OTransform","msTransform"])},r.csstransforms3d=function(){var a=!!F(["perspectiveProperty","WebkitPerspective","MozPerspective","OPerspective","msPerspective"]);a&&"webkitPerspective"in g.style&&(a=e.csstransforms3d);return a},r.csstransitions=function(){return G("transitionProperty")},r.fontface=function(){return e.fontface},r.generatedcontent=function(){return e.generatedcontent},r.video=function(){var a=b.createElement("video"),c=!1;try{if(c=!!a.canPlayType){c=new Boolean(c),c.ogg=a.canPlayType('video/ogg; codecs="theora"');var d='video/mp4; codecs="avc1.42E01E';c.h264=a.canPlayType(d+'"')||a.canPlayType(d+', mp4a.40.2"'),c.webm=a.canPlayType('video/webm; codecs="vp8, vorbis"')}}catch(e){}return c},r.audio=function(){var a=b.createElement("audio"),c=!1;try{if(c=!!a.canPlayType)c=new Boolean(c),c.ogg=a.canPlayType('audio/ogg; codecs="vorbis"'),c.mp3=a.canPlayType("audio/mpeg;"),c.wav=a.canPlayType('audio/wav; codecs="1"'),c.m4a=a.canPlayType("audio/x-m4a;")||a.canPlayType("audio/aac;")}catch(d){}return c},r.localstorage=function(){try{return!!localStorage.getItem}catch(a){return!1}},r.sessionstorage=function(){try{return!!sessionStorage.getItem}catch(a){return!1}},r.webworkers=function(){return!!a.Worker},r.applicationcache=function(){return!!a.applicationCache},r.svg=function(){return!!b.createElementNS&&!!b.createElementNS(q.svg,"svg").createSVGRect},r.inlinesvg=function(){var a=b.createElement("div");a.innerHTML="<svg/>";return(a.firstChild&&a.firstChild.namespaceURI)==q.svg},r.smil=function(){return!!b.createElementNS&&/SVG/.test(n.call(b.createElementNS(q.svg,"animate")))},r.svgclippaths=function(){return!!b.createElementNS&&/SVG/.test(n.call(b.createElementNS(q.svg,"clipPath")))};for(var J in r)A(r,J)&&(y=J.toLowerCase(),e[y]=r[J](),u.push((e[y]?"":"no-")+y));e.input||I(),e.addTest=function(a,b){if(typeof a=="object")for(var d in a)A(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return;b=typeof b=="boolean"?b:!!b(),g.className+=" "+(b?"":"no-")+a,e[a]=b}return e},B(""),j=l=null,a.attachEvent&&function(){var a=b.createElement("div");a.innerHTML="<elem></elem>";return a.childNodes.length!==1}()&&function(a,b){function s(a){var b=-1;while(++b<g)a.createElement(f[b])}a.iepp=a.iepp||{};var d=a.iepp,e=d.html5elements||"abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",f=e.split("|"),g=f.length,h=new RegExp("(^|\\s)("+e+")","gi"),i=new RegExp("<(/*)("+e+")","gi"),j=/^\s*[\{\}]\s*$/,k=new RegExp("(^|[^\\n]*?\\s)("+e+")([^\\n]*)({[\\n\\w\\W]*?})","gi"),l=b.createDocumentFragment(),m=b.documentElement,n=m.firstChild,o=b.createElement("body"),p=b.createElement("style"),q=/print|all/,r;d.getCSS=function(a,b){if(a+""===c)return"";var e=-1,f=a.length,g,h=[];while(++e<f){g=a[e];if(g.disabled)continue;b=g.media||b,q.test(b)&&h.push(d.getCSS(g.imports,b),g.cssText),b="all"}return h.join("")},d.parseCSS=function(a){var b=[],c;while((c=k.exec(a))!=null)b.push(((j.exec(c[1])?"\n":c[1])+c[2]+c[3]).replace(h,"$1.iepp_$2")+c[4]);return b.join("\n")},d.writeHTML=function(){var a=-1;r=r||b.body;while(++a<g){var c=b.getElementsByTagName(f[a]),d=c.length,e=-1;while(++e<d)c[e].className.indexOf("iepp_")<0&&(c[e].className+=" iepp_"+f[a])}l.appendChild(r),m.appendChild(o),o.className=r.className,o.id=r.id,o.innerHTML=r.innerHTML.replace(i,"<$1font")},d._beforePrint=function(){p.styleSheet.cssText=d.parseCSS(d.getCSS(b.styleSheets,"all")),d.writeHTML()},d.restoreHTML=function(){o.innerHTML="",m.removeChild(o),m.appendChild(r)},d._afterPrint=function(){d.restoreHTML(),p.styleSheet.cssText=""},s(b),s(l);d.disablePP||(n.insertBefore(p,n.firstChild),p.media="print",p.className="iepp-printshim",a.attachEvent("onbeforeprint",d._beforePrint),a.attachEvent("onafterprint",d._afterPrint))}(a,b),e._version=d,e._prefixes=o,e._domPrefixes=p,e.mq=w,e.hasEvent=x,e.testProp=function(a){return F([a])},e.testAllProps=G,e.testStyles=v,e.prefixed=function(a){return G(a,"pfx")},g.className=g.className.replace(/\bno-js\b/,"")+(f?" js "+u.join(" "):"");return e}(this,this.document),function(a,b){function u(){r(!0)}a.respond={},respond.update=function(){},respond.mediaQueriesSupported=b;if(!b){var c=a.document,d=c.documentElement,e=[],f=[],g=[],h={},i=30,j=c.getElementsByTagName("head")[0]||d,k=j.getElementsByTagName("link"),l=[],m=function(){var b=k,c=b.length,d=0,e,f,g,i;for(;d<c;d++)e=b[d],f=e.href,g=e.media,i=e.rel&&e.rel.toLowerCase()==="stylesheet",!!f&&i&&!h[f]&&(!/^([a-zA-Z]+?:(\/\/)?(www\.)?)/.test(f)||f.replace(RegExp.$1,"").split("/")[0]===a.location.host?l.push({href:f,media:g}):h[f]=!0);n()},n=function(){if(l.length){var a=l.shift();s(a.href,function(b){o(b,a.href,a.media),h[a.href]=!0,n()})}},o=function(a,b,c){var d=a.match(/@media[^\{]+\{([^\{\}]+\{[^\}\{]+\})+/gi),g=d&&d.length||0,b=b.substring(0,b.lastIndexOf("/")),h=function(a){return a.replace(/(url\()['"]?([^\/\)'"][^:\)'"]+)['"]?(\))/g,"$1"+b+"$2$3")},i=!g&&c,j=0,k,l,m,n,o;b.length&&(b+="/"),i&&(g=1);for(;j<g;j++){k=0,i?(l=c,f.push(h(a))):(l=d[j].match(/@media ([^\{]+)\{([\S\s]+?)$/)&&RegExp.$1,f.push(RegExp.$2&&h(RegExp.$2))),n=l.split(","),o=n.length;for(;k<o;k++)m=n[k],e.push({media:m.match(/(only\s+)?([a-zA-Z]+)(\sand)?/)&&RegExp.$2,rules:f.length-1,minw:m.match(/\(min\-width:[\s]*([\s]*[0-9]+)px[\s]*\)/)&&parseFloat(RegExp.$1),maxw:m.match(/\(max\-width:[\s]*([\s]*[0-9]+)px[\s]*\)/)&&parseFloat(RegExp.$1)})}r()},p,q,r=function(a){var b="clientWidth",h=d[b],l=c.compatMode==="CSS1Compat"&&h||c.body[b]||h,m={},n=c.createDocumentFragment(),o=k[k.length-1],s=(new Date).getTime();if(a&&p&&s-p<i)clearTimeout(q),q=setTimeout(r,i);else{p=s;for(var t in e){var u=e[t];if(!u.minw&&!u.maxw||(!u.minw||u.minw&&l>=u.minw)&&(!u.maxw||u.maxw&&l<=u.maxw))m[u.media]||(m[u.media]=[]),m[u.media].push(f[u.rules])}for(var t in g)g[t]&&g[t].parentNode===j&&j.removeChild(g[t]);for(var t in m){var v=c.createElement("style"),w=m[t].join("\n");v.type="text/css",v.media=t,v.styleSheet?v.styleSheet.cssText=w:v.appendChild(c.createTextNode(w)),n.appendChild(v),g.push(v)}j.insertBefore(n,o.nextSibling)}},s=function(a,b){var c=t();if(!!c){c.open("GET",a,!0),c.onreadystatechange=function(){c.readyState==4&&(c.status==200||c.status==304)&&b(c.responseText)};if(c.readyState==4)return;c.send()}},t=function(){var a=!1,b=[function(){return new ActiveXObject("Microsoft.XMLHTTP")},function(){return new XMLHttpRequest}],c=b.length;while(c--){try{a=b[c]()}catch(d){continue}break}return function(){return a}}();m(),respond.update=m,a.addEventListener?a.addEventListener("resize",u,!1):a.attachEvent&&a.attachEvent("onresize",u)}}(this,Modernizr.mq("only all")),function(a,b,c){function k(a){return!a||a=="loaded"||a=="complete"}function j(){var a=1,b=-1;while(p.length- ++b)if(p[b].s&&!(a=p[b].r))break;a&&g()}function i(a){var c=b.createElement("script"),d;c.src=a.s,c.onreadystatechange=c.onload=function(){!d&&k(c.readyState)&&(d=1,j(),c.onload=c.onreadystatechange=null)},m(function(){d||(d=1,j())},H.errorTimeout),a.e?c.onload():n.parentNode.insertBefore(c,n)}function h(a){var c=b.createElement("link"),d;c.href=a.s,c.rel="stylesheet",c.type="text/css";if(!a.e&&(w||r)){var e=function(a){m(function(){if(!d)try{a.sheet.cssRules.length?(d=1,j()):e(a)}catch(b){b.code==1e3||b.message=="security"||b.message=="denied"?(d=1,m(function(){j()},0)):e(a)}},0)};e(c)}else c.onload=function(){d||(d=1,m(function(){j()},0))},a.e&&c.onload();m(function(){d||(d=1,j())},H.errorTimeout),!a.e&&n.parentNode.insertBefore(c,n)}function g(){var a=p.shift();q=1,a?a.t?m(function(){a.t=="c"?h(a):i(a)},0):(a(),j()):q=0}function f(a,c,d,e,f,h){function i(){!o&&k(l.readyState)&&(r.r=o=1,!q&&j(),l.onload=l.onreadystatechange=null,m(function(){u.removeChild(l)},0))}var l=b.createElement(a),o=0,r={t:d,s:c,e:h};l.src=l.data=c,!s&&(l.style.display="none"),l.width=l.height="0",a!="object"&&(l.type=d),l.onload=l.onreadystatechange=i,a=="img"?l.onerror=i:a=="script"&&(l.onerror=function(){r.e=r.r=1,g()}),p.splice(e,0,r),u.insertBefore(l,s?null:n),m(function(){o||(u.removeChild(l),r.r=r.e=o=1,j())},H.errorTimeout)}function e(a,b,c){var d=b=="c"?z:y;q=0,b=b||"j",C(a)?f(d,a,b,this.i++,l,c):(p.splice(this.i++,0,a),p.length==1&&g());return this}function d(){var a=H;a.loader={load:e,i:0};return a}var l=b.documentElement,m=a.setTimeout,n=b.getElementsByTagName("script")[0],o={}.toString,p=[],q=0,r="MozAppearance"in l.style,s=r&&!!b.createRange().compareNode,t=r&&!s,u=s?l:n.parentNode,v=a.opera&&o.call(a.opera)=="[object Opera]",w="webkitAppearance"in l.style,x=w&&"async"in b.createElement("script"),y=r?"object":v||x?"img":"script",z=w?"img":y,A=Array.isArray||function(a){return o.call(a)=="[object Array]"},B=function(a){return Object(a)===a},C=function(a){return typeof a=="string"},D=function(a){return o.call(a)=="[object Function]"},E=[],F={},G,H;H=function(a){function f(a){var b=a.split("!"),c=E.length,d=b.pop(),e=b.length,f={url:d,origUrl:d,prefixes:b},g,h;for(h=0;h<e;h++)g=F[b[h]],g&&(f=g(f));for(h=0;h<c;h++)f=E[h](f);return f}function e(a,b,e,g,h){var i=f(a),j=i.autoCallback;if(!i.bypass){b&&(b=D(b)?b:b[a]||b[g]||b[a.split("/").pop().split("?")[0]]);if(i.instead)return i.instead(a,b,e,g,h);e.load(i.url,i.forceCSS||!i.forceJS&&/css$/.test(i.url)?"c":c,i.noexec),(D(b)||D(j))&&e.load(function(){d(),b&&b(i.origUrl,h,g),j&&j(i.origUrl,h,g)})}}function b(a,b){function c(a){if(C(a))e(a,h,b,0,d);else if(B(a))for(i in a)a.hasOwnProperty(i)&&e(a[i],h,b,i,d)}var d=!!a.test,f=d?a.yep:a.nope,g=a.load||a.both,h=a.callback,i;c(f),c(g),a.complete&&b.load(a.complete)}var g,h,i=this.yepnope.loader;if(C(a))e(a,0,i,0);else if(A(a))for(g=0;g<a.length;g++)h=a[g],C(h)?e(h,0,i,0):A(h)?H(h):B(h)&&b(h,i);else B(a)&&b(a,i)},H.addPrefix=function(a,b){F[a]=b},H.addFilter=function(a){E.push(a)},H.errorTimeout=1e4,b.readyState==null&&b.addEventListener&&(b.readyState="loading",b.addEventListener("DOMContentLoaded",G=function(){b.removeEventListener("DOMContentLoaded",G,0),b.readyState="complete"},0)),a.yepnope=d()}(this,this.document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))};//! moment.js
//! version : 2.9.0
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (undefined) {
    /************************************
        Constants
    ************************************/

    var moment,
        VERSION = '2.9.0',
        // the global-scope this is NOT the global object in Node.js
        globalScope = (typeof global !== 'undefined' && (typeof window === 'undefined' || window === global.window)) ? global : this,
        oldGlobalMoment,
        round = Math.round,
        hasOwnProperty = Object.prototype.hasOwnProperty,
        i,

        YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,

        // internal storage for locale config files
        locales = {},

        // extra moment internal properties (plugins register props here)
        momentProperties = [],

        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module && module.exports),

        // ASP.NET json date format regex
        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
        aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,

        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,

        // format tokens
        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,

        // parsing token regexes
        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
        parseTokenOneToFourDigits = /\d{1,4}/, // 0 - 9999
        parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
        parseTokenDigits = /\d+/, // nonzero number of digits
        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        parseTokenT = /T/i, // T (ISO separator)
        parseTokenOffsetMs = /[\+\-]?\d+/, // 1234567890123
        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123

        //strict parsing regexes
        parseTokenOneDigit = /\d/, // 0 - 9
        parseTokenTwoDigits = /\d\d/, // 00 - 99
        parseTokenThreeDigits = /\d{3}/, // 000 - 999
        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
        parseTokenSixDigits = /[+-]?\d{6}/, // -999,999 - 999,999
        parseTokenSignedNumber = /[+-]?\d+/, // -inf - inf

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,

        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
            ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
            ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d{2}/],
            ['YYYY-DDD', /\d{4}-\d{3}/]
        ],

        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
            ['HH:mm', /(T| )\d\d:\d\d/],
            ['HH', /(T| )\d\d/]
        ],

        // timezone chunker '+10:00' > ['10', '00'] or '-1530' > ['-', '15', '30']
        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

        // getter and setter names
        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
        unitMillisecondFactors = {
            'Milliseconds' : 1,
            'Seconds' : 1e3,
            'Minutes' : 6e4,
            'Hours' : 36e5,
            'Days' : 864e5,
            'Months' : 2592e6,
            'Years' : 31536e6
        },

        unitAliases = {
            ms : 'millisecond',
            s : 'second',
            m : 'minute',
            h : 'hour',
            d : 'day',
            D : 'date',
            w : 'week',
            W : 'isoWeek',
            M : 'month',
            Q : 'quarter',
            y : 'year',
            DDD : 'dayOfYear',
            e : 'weekday',
            E : 'isoWeekday',
            gg: 'weekYear',
            GG: 'isoWeekYear'
        },

        camelFunctions = {
            dayofyear : 'dayOfYear',
            isoweekday : 'isoWeekday',
            isoweek : 'isoWeek',
            weekyear : 'weekYear',
            isoweekyear : 'isoWeekYear'
        },

        // format function strings
        formatFunctions = {},

        // default relative time thresholds
        relativeTimeThresholds = {
            s: 45,  // seconds to minute
            m: 45,  // minutes to hour
            h: 22,  // hours to day
            d: 26,  // days to month
            M: 11   // months to year
        },

        // tokens to ordinalize and pad
        ordinalizeTokens = 'DDD w W M D d'.split(' '),
        paddedTokens = 'M D H h m s w W'.split(' '),

        formatTokenFunctions = {
            M    : function () {
                return this.month() + 1;
            },
            MMM  : function (format) {
                return this.localeData().monthsShort(this, format);
            },
            MMMM : function (format) {
                return this.localeData().months(this, format);
            },
            D    : function () {
                return this.date();
            },
            DDD  : function () {
                return this.dayOfYear();
            },
            d    : function () {
                return this.day();
            },
            dd   : function (format) {
                return this.localeData().weekdaysMin(this, format);
            },
            ddd  : function (format) {
                return this.localeData().weekdaysShort(this, format);
            },
            dddd : function (format) {
                return this.localeData().weekdays(this, format);
            },
            w    : function () {
                return this.week();
            },
            W    : function () {
                return this.isoWeek();
            },
            YY   : function () {
                return leftZeroFill(this.year() % 100, 2);
            },
            YYYY : function () {
                return leftZeroFill(this.year(), 4);
            },
            YYYYY : function () {
                return leftZeroFill(this.year(), 5);
            },
            YYYYYY : function () {
                var y = this.year(), sign = y >= 0 ? '+' : '-';
                return sign + leftZeroFill(Math.abs(y), 6);
            },
            gg   : function () {
                return leftZeroFill(this.weekYear() % 100, 2);
            },
            gggg : function () {
                return leftZeroFill(this.weekYear(), 4);
            },
            ggggg : function () {
                return leftZeroFill(this.weekYear(), 5);
            },
            GG   : function () {
                return leftZeroFill(this.isoWeekYear() % 100, 2);
            },
            GGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 4);
            },
            GGGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 5);
            },
            e : function () {
                return this.weekday();
            },
            E : function () {
                return this.isoWeekday();
            },
            a    : function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), true);
            },
            A    : function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), false);
            },
            H    : function () {
                return this.hours();
            },
            h    : function () {
                return this.hours() % 12 || 12;
            },
            m    : function () {
                return this.minutes();
            },
            s    : function () {
                return this.seconds();
            },
            S    : function () {
                return toInt(this.milliseconds() / 100);
            },
            SS   : function () {
                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
            },
            SSS  : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            SSSS : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            Z    : function () {
                var a = this.utcOffset(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);
            },
            ZZ   : function () {
                var a = this.utcOffset(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
            },
            z : function () {
                return this.zoneAbbr();
            },
            zz : function () {
                return this.zoneName();
            },
            x    : function () {
                return this.valueOf();
            },
            X    : function () {
                return this.unix();
            },
            Q : function () {
                return this.quarter();
            }
        },

        deprecations = {},

        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'],

        updateInProgress = false;

    // Pick the first defined of two or three arguments. dfl comes from
    // default.
    function dfl(a, b, c) {
        switch (arguments.length) {
            case 2: return a != null ? a : b;
            case 3: return a != null ? a : b != null ? b : c;
            default: throw new Error('Implement me');
        }
    }

    function hasOwnProp(a, b) {
        return hasOwnProperty.call(a, b);
    }

    function defaultParsingFlags() {
        // We need to deep clone this object, and es5 standard is not very
        // helpful.
        return {
            empty : false,
            unusedTokens : [],
            unusedInput : [],
            overflow : -2,
            charsLeftOver : 0,
            nullInput : false,
            invalidMonth : null,
            invalidFormat : false,
            userInvalidated : false,
            iso: false
        };
    }

    function printMsg(msg) {
        if (moment.suppressDeprecationWarnings === false &&
                typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
            if (firstTime) {
                printMsg(msg);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            printMsg(msg);
            deprecations[name] = true;
        }
    }

    function padToken(func, count) {
        return function (a) {
            return leftZeroFill(func.call(this, a), count);
        };
    }
    function ordinalizeToken(func, period) {
        return function (a) {
            return this.localeData().ordinal(func.call(this, a), period);
        };
    }

    function monthDiff(a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust);
    }

    while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
    }
    while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
    }
    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);


    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // thie is not supposed to happen
            return hour;
        }
    }

    /************************************
        Constructors
    ************************************/

    function Locale() {
    }

    // Moment prototype object
    function Moment(config, skipOverflow) {
        if (skipOverflow !== false) {
            checkOverflow(config);
        }
        copyConfig(this, config);
        this._d = new Date(+config._d);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            moment.updateOffset(this);
            updateInProgress = false;
        }
    }

    // Duration Constructor
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = moment.localeData();

        this._bubble();
    }

    /************************************
        Helpers
    ************************************/


    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = from._pf;
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    // left zero fill a number
    // see http://jsperf.com/left-zero-filling for performance comparison
    function leftZeroFill(number, targetLength, forceSign) {
        var output = '' + Math.abs(number),
            sign = number >= 0;

        while (output.length < targetLength) {
            output = '0' + output;
        }
        return (sign ? (forceSign ? '+' : '') : '-') + output;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = makeAs(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = moment.duration(val, period);
            addOrSubtractDurationFromMoment(this, dur, direction);
            return this;
        };
    }

    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
        }
        if (months) {
            rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            moment.updateOffset(mom, days || months);
        }
    }

    // check if is an array
    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return Object.prototype.toString.call(input) === '[object Date]' ||
            input instanceof Date;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function normalizeUnits(units) {
        if (units) {
            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
            units = unitAliases[units] || camelFunctions[lowered] || lowered;
        }
        return units;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeList(field) {
        var count, setter;

        if (field.indexOf('week') === 0) {
            count = 7;
            setter = 'day';
        }
        else if (field.indexOf('month') === 0) {
            count = 12;
            setter = 'month';
        }
        else {
            return;
        }

        moment[field] = function (format, index) {
            var i, getter,
                method = moment._locale[field],
                results = [];

            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            getter = function (i) {
                var m = moment().utc().set(setter, i);
                return method.call(moment._locale, m, format || '');
            };

            if (index != null) {
                return getter(index);
            }
            else {
                for (i = 0; i < count; i++) {
                    results.push(getter(i));
                }
                return results;
            }
        };
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            if (coercedNumber >= 0) {
                value = Math.floor(coercedNumber);
            } else {
                value = Math.ceil(coercedNumber);
            }
        }

        return value;
    }

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    function weeksInYear(year, dow, doy) {
        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function checkOverflow(m) {
        var overflow;
        if (m._a && m._pf.overflow === -2) {
            overflow =
                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :
                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :
                m._a[HOUR] < 0 || m._a[HOUR] > 24 ||
                    (m._a[HOUR] === 24 && (m._a[MINUTE] !== 0 ||
                                           m._a[SECOND] !== 0 ||
                                           m._a[MILLISECOND] !== 0)) ? HOUR :
                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :
                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :
                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            m._pf.overflow = overflow;
        }
    }

    function isValid(m) {
        if (m._isValid == null) {
            m._isValid = !isNaN(m._d.getTime()) &&
                m._pf.overflow < 0 &&
                !m._pf.empty &&
                !m._pf.invalidMonth &&
                !m._pf.nullInput &&
                !m._pf.invalidFormat &&
                !m._pf.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    m._pf.charsLeftOver === 0 &&
                    m._pf.unusedTokens.length === 0 &&
                    m._pf.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        if (!locales[name] && hasModule) {
            try {
                oldLocale = moment.locale();
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we want to undo that for lazy loaded locales
                moment.locale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // Return a moment from input, that is local/utc/utcOffset equivalent to
    // model.
    function makeAs(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (moment.isMoment(input) || isDate(input) ?
                    +input : +moment(input)) - (+res);
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(+res._d + diff);
            moment.updateOffset(res, false);
            return res;
        } else {
            return moment(input).local();
        }
    }

    /************************************
        Locale
    ************************************/


    extend(Locale.prototype, {

        set : function (config) {
            var prop, i;
            for (i in config) {
                prop = config[i];
                if (typeof prop === 'function') {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
            // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _ordinalParseLenient.
            this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source);
        },

        _months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        months : function (m) {
            return this._months[m.month()];
        },

        _monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        monthsShort : function (m) {
            return this._monthsShort[m.month()];
        },

        monthsParse : function (monthName, format, strict) {
            var i, mom, regex;

            if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
            }

            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = moment.utc([2000, i]);
                if (strict && !this._longMonthsParse[i]) {
                    this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                    this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
                }
                if (!strict && !this._monthsParse[i]) {
                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                    return i;
                } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                    return i;
                } else if (!strict && this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        },

        _weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdays : function (m) {
            return this._weekdays[m.day()];
        },

        _weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysShort : function (m) {
            return this._weekdaysShort[m.day()];
        },

        _weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        weekdaysMin : function (m) {
            return this._weekdaysMin[m.day()];
        },

        weekdaysParse : function (weekdayName) {
            var i, mom, regex;

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                if (!this._weekdaysParse[i]) {
                    mom = moment([2000, 1]).day(i);
                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        },

        _longDateFormat : {
            LTS : 'h:mm:ss A',
            LT : 'h:mm A',
            L : 'MM/DD/YYYY',
            LL : 'MMMM D, YYYY',
            LLL : 'MMMM D, YYYY LT',
            LLLL : 'dddd, MMMM D, YYYY LT'
        },
        longDateFormat : function (key) {
            var output = this._longDateFormat[key];
            if (!output && this._longDateFormat[key.toUpperCase()]) {
                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
                    return val.slice(1);
                });
                this._longDateFormat[key] = output;
            }
            return output;
        },

        isPM : function (input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return ((input + '').toLowerCase().charAt(0) === 'p');
        },

        _meridiemParse : /[ap]\.?m?\.?/i,
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        },


        _calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        calendar : function (key, mom, now) {
            var output = this._calendar[key];
            return typeof output === 'function' ? output.apply(mom, [now]) : output;
        },

        _relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },

        relativeTime : function (number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return (typeof output === 'function') ?
                output(number, withoutSuffix, string, isFuture) :
                output.replace(/%d/i, number);
        },

        pastFuture : function (diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
        },

        ordinal : function (number) {
            return this._ordinal.replace('%d', number);
        },
        _ordinal : '%d',
        _ordinalParse : /\d{1,2}/,

        preparse : function (string) {
            return string;
        },

        postformat : function (string) {
            return string;
        },

        week : function (mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        },

        _week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        },

        firstDayOfWeek : function () {
            return this._week.dow;
        },

        firstDayOfYear : function () {
            return this._week.doy;
        },

        _invalidDate: 'Invalid date',
        invalidDate: function () {
            return this._invalidDate;
        }
    });

    /************************************
        Formatting
    ************************************/


    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());

        if (!formatFunctions[format]) {
            formatFunctions[format] = makeFormatFunction(format);
        }

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }


    /************************************
        Parsing
    ************************************/


    // get the regex to find the next token
    function getParseRegexForToken(token, config) {
        var a, strict = config._strict;
        switch (token) {
        case 'Q':
            return parseTokenOneDigit;
        case 'DDDD':
            return parseTokenThreeDigits;
        case 'YYYY':
        case 'GGGG':
        case 'gggg':
            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
        case 'Y':
        case 'G':
        case 'g':
            return parseTokenSignedNumber;
        case 'YYYYYY':
        case 'YYYYY':
        case 'GGGGG':
        case 'ggggg':
            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
        case 'S':
            if (strict) {
                return parseTokenOneDigit;
            }
            /* falls through */
        case 'SS':
            if (strict) {
                return parseTokenTwoDigits;
            }
            /* falls through */
        case 'SSS':
            if (strict) {
                return parseTokenThreeDigits;
            }
            /* falls through */
        case 'DDD':
            return parseTokenOneToThreeDigits;
        case 'MMM':
        case 'MMMM':
        case 'dd':
        case 'ddd':
        case 'dddd':
            return parseTokenWord;
        case 'a':
        case 'A':
            return config._locale._meridiemParse;
        case 'x':
            return parseTokenOffsetMs;
        case 'X':
            return parseTokenTimestampMs;
        case 'Z':
        case 'ZZ':
            return parseTokenTimezone;
        case 'T':
            return parseTokenT;
        case 'SSSS':
            return parseTokenDigits;
        case 'MM':
        case 'DD':
        case 'YY':
        case 'GG':
        case 'gg':
        case 'HH':
        case 'hh':
        case 'mm':
        case 'ss':
        case 'ww':
        case 'WW':
            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
        case 'M':
        case 'D':
        case 'd':
        case 'H':
        case 'h':
        case 'm':
        case 's':
        case 'w':
        case 'W':
        case 'e':
        case 'E':
            return parseTokenOneOrTwoDigits;
        case 'Do':
            return strict ? config._locale._ordinalParse : config._locale._ordinalParseLenient;
        default :
            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), 'i'));
            return a;
        }
    }

    function utcOffsetFromString(string) {
        string = string || '';
        var possibleTzMatches = (string.match(parseTokenTimezone) || []),
            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],
            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],
            minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // function to convert string input to date
    function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a;

        switch (token) {
        // QUARTER
        case 'Q':
            if (input != null) {
                datePartArray[MONTH] = (toInt(input) - 1) * 3;
            }
            break;
        // MONTH
        case 'M' : // fall through to MM
        case 'MM' :
            if (input != null) {
                datePartArray[MONTH] = toInt(input) - 1;
            }
            break;
        case 'MMM' : // fall through to MMMM
        case 'MMMM' :
            a = config._locale.monthsParse(input, token, config._strict);
            // if we didn't find a month name, mark the date as invalid.
            if (a != null) {
                datePartArray[MONTH] = a;
            } else {
                config._pf.invalidMonth = input;
            }
            break;
        // DAY OF MONTH
        case 'D' : // fall through to DD
        case 'DD' :
            if (input != null) {
                datePartArray[DATE] = toInt(input);
            }
            break;
        case 'Do' :
            if (input != null) {
                datePartArray[DATE] = toInt(parseInt(
                            input.match(/\d{1,2}/)[0], 10));
            }
            break;
        // DAY OF YEAR
        case 'DDD' : // fall through to DDDD
        case 'DDDD' :
            if (input != null) {
                config._dayOfYear = toInt(input);
            }

            break;
        // YEAR
        case 'YY' :
            datePartArray[YEAR] = moment.parseTwoDigitYear(input);
            break;
        case 'YYYY' :
        case 'YYYYY' :
        case 'YYYYYY' :
            datePartArray[YEAR] = toInt(input);
            break;
        // AM / PM
        case 'a' : // fall through to A
        case 'A' :
            config._meridiem = input;
            // config._isPm = config._locale.isPM(input);
            break;
        // HOUR
        case 'h' : // fall through to hh
        case 'hh' :
            config._pf.bigHour = true;
            /* falls through */
        case 'H' : // fall through to HH
        case 'HH' :
            datePartArray[HOUR] = toInt(input);
            break;
        // MINUTE
        case 'm' : // fall through to mm
        case 'mm' :
            datePartArray[MINUTE] = toInt(input);
            break;
        // SECOND
        case 's' : // fall through to ss
        case 'ss' :
            datePartArray[SECOND] = toInt(input);
            break;
        // MILLISECOND
        case 'S' :
        case 'SS' :
        case 'SSS' :
        case 'SSSS' :
            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
            break;
        // UNIX OFFSET (MILLISECONDS)
        case 'x':
            config._d = new Date(toInt(input));
            break;
        // UNIX TIMESTAMP WITH MS
        case 'X':
            config._d = new Date(parseFloat(input) * 1000);
            break;
        // TIMEZONE
        case 'Z' : // fall through to ZZ
        case 'ZZ' :
            config._useUTC = true;
            config._tzm = utcOffsetFromString(input);
            break;
        // WEEKDAY - human
        case 'dd':
        case 'ddd':
        case 'dddd':
            a = config._locale.weekdaysParse(input);
            // if we didn't get a weekday name, mark the date as invalid
            if (a != null) {
                config._w = config._w || {};
                config._w['d'] = a;
            } else {
                config._pf.invalidWeekday = input;
            }
            break;
        // WEEK, WEEK DAY - numeric
        case 'w':
        case 'ww':
        case 'W':
        case 'WW':
        case 'd':
        case 'e':
        case 'E':
            token = token.substr(0, 1);
            /* falls through */
        case 'gggg':
        case 'GGGG':
        case 'GGGGG':
            token = token.substr(0, 2);
            if (input) {
                config._w = config._w || {};
                config._w[token] = toInt(input);
            }
            break;
        case 'gg':
        case 'GG':
            config._w = config._w || {};
            config._w[token] = moment.parseTwoDigitYear(input);
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
            week = dfl(w.W, 1);
            weekday = dfl(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
            week = dfl(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function dateFromConfig(config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                config._pf._overflowDayOfYear = true;
            }

            date = makeUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dateFromObject(config) {
        var normalizedInput;

        if (config._d) {
            return;
        }

        normalizedInput = normalizeObjectUnits(config._i);
        config._a = [
            normalizedInput.year,
            normalizedInput.month,
            normalizedInput.day || normalizedInput.date,
            normalizedInput.hour,
            normalizedInput.minute,
            normalizedInput.second,
            normalizedInput.millisecond
        ];

        dateFromConfig(config);
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate()
            ];
        } else {
            return [now.getFullYear(), now.getMonth(), now.getDate()];
        }
    }

    // date from string and format string
    function makeDateFromStringAndFormat(config) {
        if (config._f === moment.ISO_8601) {
            parseISO(config);
            return;
        }

        config._a = [];
        config._pf.empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    config._pf.unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    config._pf.empty = false;
                }
                else {
                    config._pf.unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                config._pf.unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            config._pf.unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._pf.bigHour === true && config._a[HOUR] <= 12) {
            config._pf.bigHour = undefined;
        }
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR],
                config._meridiem);
        dateFromConfig(config);
        checkOverflow(config);
    }

    function unescapeFormat(s) {
        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        });
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function regexpEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    // date from string and array of format strings
    function makeDateFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            config._pf.invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._pf = defaultParsingFlags();
            tempConfig._f = config._f[i];
            makeDateFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += tempConfig._pf.charsLeftOver;

            //or tokens
            currentScore += tempConfig._pf.unusedTokens.length * 10;

            tempConfig._pf.score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    // date from iso format
    function parseISO(config) {
        var i, l,
            string = config._i,
            match = isoRegex.exec(string);

        if (match) {
            config._pf.iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    // match[5] should be 'T' or undefined
                    config._f = isoDates[i][0] + (match[6] || ' ');
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    config._f += isoTimes[i][0];
                    break;
                }
            }
            if (string.match(parseTokenTimezone)) {
                config._f += 'Z';
            }
            makeDateFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function makeDateFromString(config) {
        parseISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            moment.createFromInputFallback(config);
        }
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function makeDateFromInput(config) {
        var input = config._i, matched;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {
            config._d = new Date(+matched[1]);
        } else if (typeof input === 'string') {
            makeDateFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            dateFromConfig(config);
        } else if (typeof(input) === 'object') {
            dateFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            moment.createFromInputFallback(config);
        }
    }

    function makeDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function makeUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    function parseWeekday(input, locale) {
        if (typeof input === 'string') {
            if (!isNaN(input)) {
                input = parseInt(input, 10);
            }
            else {
                input = locale.weekdaysParse(input);
                if (typeof input !== 'number') {
                    return null;
                }
            }
        }
        return input;
    }

    /************************************
        Relative Time
    ************************************/


    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime(posNegDuration, withoutSuffix, locale) {
        var duration = moment.duration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            years = round(duration.as('y')),

            args = seconds < relativeTimeThresholds.s && ['s', seconds] ||
                minutes === 1 && ['m'] ||
                minutes < relativeTimeThresholds.m && ['mm', minutes] ||
                hours === 1 && ['h'] ||
                hours < relativeTimeThresholds.h && ['hh', hours] ||
                days === 1 && ['d'] ||
                days < relativeTimeThresholds.d && ['dd', days] ||
                months === 1 && ['M'] ||
                months < relativeTimeThresholds.M && ['MM', months] ||
                years === 1 && ['y'] || ['yy', years];

        args[2] = withoutSuffix;
        args[3] = +posNegDuration > 0;
        args[4] = locale;
        return substituteTimeAgo.apply({}, args);
    }


    /************************************
        Week of Year
    ************************************/


    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;

        d = d === 0 ? 7 : d;
        weekday = weekday != null ? weekday : firstDayOfWeek;
        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    /************************************
        Top Level Functions
    ************************************/

    function makeMoment(config) {
        var input = config._i,
            format = config._f,
            res;

        config._locale = config._locale || moment.localeData(config._l);

        if (input === null || (format === undefined && input === '')) {
            return moment.invalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (moment.isMoment(input)) {
            return new Moment(input, true);
        } else if (format) {
            if (isArray(format)) {
                makeDateFromStringAndArray(config);
            } else {
                makeDateFromStringAndFormat(config);
            }
        } else {
            makeDateFromInput(config);
        }

        res = new Moment(config);
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    moment = function (input, format, locale, strict) {
        var c;

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._i = input;
        c._f = format;
        c._l = locale;
        c._strict = strict;
        c._isUTC = false;
        c._pf = defaultParsingFlags();

        return makeMoment(c);
    };

    moment.suppressDeprecationWarnings = false;

    moment.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return moment();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    moment.min = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    };

    moment.max = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    };

    // creating with utc
    moment.utc = function (input, format, locale, strict) {
        var c;

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._useUTC = true;
        c._isUTC = true;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        c._pf = defaultParsingFlags();

        return makeMoment(c).utc();
    };

    // creating with unix timestamp (in seconds)
    moment.unix = function (input) {
        return moment(input * 1000);
    };

    // duration
    moment.duration = function (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            parseIso,
            diffRes;

        if (moment.isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = isoDurationRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            parseIso = function (inp) {
                // We'd normally use ~~inp for this, but unfortunately it also
                // converts floats to ints.
                // inp may be undefined, so careful calling replace on it.
                var res = inp && parseFloat(inp.replace(',', '.'));
                // apply sign while we're at it
                return (isNaN(res) ? 0 : res) * sign;
            };
            duration = {
                y: parseIso(match[2]),
                M: parseIso(match[3]),
                d: parseIso(match[4]),
                h: parseIso(match[5]),
                m: parseIso(match[6]),
                s: parseIso(match[7]),
                w: parseIso(match[8])
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' &&
                ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(moment(duration.from), moment(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (moment.isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    };

    // version number
    moment.version = VERSION;

    // default format
    moment.defaultFormat = isoFormat;

    // constant that refers to the ISO standard
    moment.ISO_8601 = function () {};

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    moment.momentProperties = momentProperties;

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    moment.updateOffset = function () {};

    // This function allows you to set a threshold for relative time strings
    moment.relativeTimeThreshold = function (threshold, limit) {
        if (relativeTimeThresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return relativeTimeThresholds[threshold];
        }
        relativeTimeThresholds[threshold] = limit;
        return true;
    };

    moment.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        function (key, value) {
            return moment.locale(key, value);
        }
    );

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    moment.locale = function (key, values) {
        var data;
        if (key) {
            if (typeof(values) !== 'undefined') {
                data = moment.defineLocale(key, values);
            }
            else {
                data = moment.localeData(key);
            }

            if (data) {
                moment.duration._locale = moment._locale = data;
            }
        }

        return moment._locale._abbr;
    };

    moment.defineLocale = function (name, values) {
        if (values !== null) {
            values.abbr = name;
            if (!locales[name]) {
                locales[name] = new Locale();
            }
            locales[name].set(values);

            // backwards compat for now: also set the locale
            moment.locale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    };

    moment.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        function (key) {
            return moment.localeData(key);
        }
    );

    // returns locale data
    moment.localeData = function (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return moment._locale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    };

    // compare moment object
    moment.isMoment = function (obj) {
        return obj instanceof Moment ||
            (obj != null && hasOwnProp(obj, '_isAMomentObject'));
    };

    // for typechecking Duration objects
    moment.isDuration = function (obj) {
        return obj instanceof Duration;
    };

    for (i = lists.length - 1; i >= 0; --i) {
        makeList(lists[i]);
    }

    moment.normalizeUnits = function (units) {
        return normalizeUnits(units);
    };

    moment.invalid = function (flags) {
        var m = moment.utc(NaN);
        if (flags != null) {
            extend(m._pf, flags);
        }
        else {
            m._pf.userInvalidated = true;
        }

        return m;
    };

    moment.parseZone = function () {
        return moment.apply(null, arguments).parseZone();
    };

    moment.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    moment.isDate = isDate;

    /************************************
        Moment Prototype
    ************************************/


    extend(moment.fn = Moment.prototype, {

        clone : function () {
            return moment(this);
        },

        valueOf : function () {
            return +this._d - ((this._offset || 0) * 60000);
        },

        unix : function () {
            return Math.floor(+this / 1000);
        },

        toString : function () {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        },

        toDate : function () {
            return this._offset ? new Date(+this) : this._d;
        },

        toISOString : function () {
            var m = moment(this).utc();
            if (0 < m.year() && m.year() <= 9999) {
                if ('function' === typeof Date.prototype.toISOString) {
                    // native implementation is ~50x faster, use it when we can
                    return this.toDate().toISOString();
                } else {
                    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
                }
            } else {
                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        },

        toArray : function () {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hours(),
                m.minutes(),
                m.seconds(),
                m.milliseconds()
            ];
        },

        isValid : function () {
            return isValid(this);
        },

        isDSTShifted : function () {
            if (this._a) {
                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
            }

            return false;
        },

        parsingFlags : function () {
            return extend({}, this._pf);
        },

        invalidAt: function () {
            return this._pf.overflow;
        },

        utc : function (keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
        },

        local : function (keepLocalTime) {
            if (this._isUTC) {
                this.utcOffset(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                    this.subtract(this._dateUtcOffset(), 'm');
                }
            }
            return this;
        },

        format : function (inputString) {
            var output = formatMoment(this, inputString || moment.defaultFormat);
            return this.localeData().postformat(output);
        },

        add : createAdder(1, 'add'),

        subtract : createAdder(-1, 'subtract'),

        diff : function (input, units, asFloat) {
            var that = makeAs(input, this),
                zoneDiff = (that.utcOffset() - this.utcOffset()) * 6e4,
                anchor, diff, output, daysAdjust;

            units = normalizeUnits(units);

            if (units === 'year' || units === 'month' || units === 'quarter') {
                output = monthDiff(this, that);
                if (units === 'quarter') {
                    output = output / 3;
                } else if (units === 'year') {
                    output = output / 12;
                }
            } else {
                diff = this - that;
                output = units === 'second' ? diff / 1e3 : // 1000
                    units === 'minute' ? diff / 6e4 : // 1000 * 60
                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                    diff;
            }
            return asFloat ? output : absRound(output);
        },

        from : function (time, withoutSuffix) {
            return moment.duration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        },

        fromNow : function (withoutSuffix) {
            return this.from(moment(), withoutSuffix);
        },

        calendar : function (time) {
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're locat/utc/offset
            // or not.
            var now = time || moment(),
                sod = makeAs(now, this).startOf('day'),
                diff = this.diff(sod, 'days', true),
                format = diff < -6 ? 'sameElse' :
                    diff < -1 ? 'lastWeek' :
                    diff < 0 ? 'lastDay' :
                    diff < 1 ? 'sameDay' :
                    diff < 2 ? 'nextDay' :
                    diff < 7 ? 'nextWeek' : 'sameElse';
            return this.format(this.localeData().calendar(format, this, moment(now)));
        },

        isLeapYear : function () {
            return isLeapYear(this.year());
        },

        isDST : function () {
            return (this.utcOffset() > this.clone().month(0).utcOffset() ||
                this.utcOffset() > this.clone().month(5).utcOffset());
        },

        day : function (input) {
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        },

        month : makeAccessor('Month', true),

        startOf : function (units) {
            units = normalizeUnits(units);
            // the following switch intentionally omits break keywords
            // to utilize falling through the cases.
            switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
                /* falls through */
            }

            // weeks are a special case
            if (units === 'week') {
                this.weekday(0);
            } else if (units === 'isoWeek') {
                this.isoWeekday(1);
            }

            // quarters are also special
            if (units === 'quarter') {
                this.month(Math.floor(this.month() / 3) * 3);
            }

            return this;
        },

        endOf: function (units) {
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond') {
                return this;
            }
            return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
        },

        isAfter: function (input, units) {
            var inputMs;
            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
            if (units === 'millisecond') {
                input = moment.isMoment(input) ? input : moment(input);
                return +this > +input;
            } else {
                inputMs = moment.isMoment(input) ? +input : +moment(input);
                return inputMs < +this.clone().startOf(units);
            }
        },

        isBefore: function (input, units) {
            var inputMs;
            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
            if (units === 'millisecond') {
                input = moment.isMoment(input) ? input : moment(input);
                return +this < +input;
            } else {
                inputMs = moment.isMoment(input) ? +input : +moment(input);
                return +this.clone().endOf(units) < inputMs;
            }
        },

        isBetween: function (from, to, units) {
            return this.isAfter(from, units) && this.isBefore(to, units);
        },

        isSame: function (input, units) {
            var inputMs;
            units = normalizeUnits(units || 'millisecond');
            if (units === 'millisecond') {
                input = moment.isMoment(input) ? input : moment(input);
                return +this === +input;
            } else {
                inputMs = +moment(input);
                return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
            }
        },

        min: deprecate(
                 'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
                 function (other) {
                     other = moment.apply(null, arguments);
                     return other < this ? this : other;
                 }
         ),

        max: deprecate(
                'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
                function (other) {
                    other = moment.apply(null, arguments);
                    return other > this ? this : other;
                }
        ),

        zone : deprecate(
                'moment().zone is deprecated, use moment().utcOffset instead. ' +
                'https://github.com/moment/moment/issues/1779',
                function (input, keepLocalTime) {
                    if (input != null) {
                        if (typeof input !== 'string') {
                            input = -input;
                        }

                        this.utcOffset(input, keepLocalTime);

                        return this;
                    } else {
                        return -this.utcOffset();
                    }
                }
        ),

        // keepLocalTime = true means only change the timezone, without
        // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
        // +0200, so we adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        utcOffset : function (input, keepLocalTime) {
            var offset = this._offset || 0,
                localAdjust;
            if (input != null) {
                if (typeof input === 'string') {
                    input = utcOffsetFromString(input);
                }
                if (Math.abs(input) < 16) {
                    input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                    localAdjust = this._dateUtcOffset();
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                    this.add(localAdjust, 'm');
                }
                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addOrSubtractDurationFromMoment(this,
                                moment.duration(input - offset, 'm'), 1, false);
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        moment.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }

                return this;
            } else {
                return this._isUTC ? offset : this._dateUtcOffset();
            }
        },

        isLocal : function () {
            return !this._isUTC;
        },

        isUtcOffset : function () {
            return this._isUTC;
        },

        isUtc : function () {
            return this._isUTC && this._offset === 0;
        },

        zoneAbbr : function () {
            return this._isUTC ? 'UTC' : '';
        },

        zoneName : function () {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        },

        parseZone : function () {
            if (this._tzm) {
                this.utcOffset(this._tzm);
            } else if (typeof this._i === 'string') {
                this.utcOffset(utcOffsetFromString(this._i));
            }
            return this;
        },

        hasAlignedHourOffset : function (input) {
            if (!input) {
                input = 0;
            }
            else {
                input = moment(input).utcOffset();
            }

            return (this.utcOffset() - input) % 60 === 0;
        },

        daysInMonth : function () {
            return daysInMonth(this.year(), this.month());
        },

        dayOfYear : function (input) {
            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
        },

        quarter : function (input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        },

        weekYear : function (input) {
            var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        isoWeekYear : function (input) {
            var year = weekOfYear(this, 1, 4).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        week : function (input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        isoWeek : function (input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        weekday : function (input) {
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        },

        isoWeekday : function (input) {
            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.
            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
        },

        isoWeeksInYear : function () {
            return weeksInYear(this.year(), 1, 4);
        },

        weeksInYear : function () {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units]();
        },

        set : function (units, value) {
            var unit;
            if (typeof units === 'object') {
                for (unit in units) {
                    this.set(unit, units[unit]);
                }
            }
            else {
                units = normalizeUnits(units);
                if (typeof this[units] === 'function') {
                    this[units](value);
                }
            }
            return this;
        },

        // If passed a locale key, it will set the locale for this
        // instance.  Otherwise, it will return the locale configuration
        // variables for this instance.
        locale : function (key) {
            var newLocaleData;

            if (key === undefined) {
                return this._locale._abbr;
            } else {
                newLocaleData = moment.localeData(key);
                if (newLocaleData != null) {
                    this._locale = newLocaleData;
                }
                return this;
            }
        },

        lang : deprecate(
            'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
            function (key) {
                if (key === undefined) {
                    return this.localeData();
                } else {
                    return this.locale(key);
                }
            }
        ),

        localeData : function () {
            return this._locale;
        },

        _dateUtcOffset : function () {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(this._d.getTimezoneOffset() / 15) * 15;
        }

    });

    function rawMonthSetter(mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(),
                daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function rawGetter(mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function rawSetter(mom, unit, value) {
        if (unit === 'Month') {
            return rawMonthSetter(mom, value);
        } else {
            return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }

    function makeAccessor(unit, keepTime) {
        return function (value) {
            if (value != null) {
                rawSetter(this, unit, value);
                moment.updateOffset(this, keepTime);
                return this;
            } else {
                return rawGetter(this, unit);
            }
        };
    }

    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
    moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
    moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
    // moment.fn.month is defined separately
    moment.fn.date = makeAccessor('Date', true);
    moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));
    moment.fn.year = makeAccessor('FullYear', true);
    moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));

    // add plural methods
    moment.fn.days = moment.fn.day;
    moment.fn.months = moment.fn.month;
    moment.fn.weeks = moment.fn.week;
    moment.fn.isoWeeks = moment.fn.isoWeek;
    moment.fn.quarters = moment.fn.quarter;

    // add aliased format methods
    moment.fn.toJSON = moment.fn.toISOString;

    // alias isUtc for dev-friendliness
    moment.fn.isUTC = moment.fn.isUtc;

    /************************************
        Duration Prototype
    ************************************/


    function daysToYears (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        return days * 400 / 146097;
    }

    function yearsToDays (years) {
        // years * 365 + absRound(years / 4) -
        //     absRound(years / 100) + absRound(years / 400);
        return years * 146097 / 400;
    }

    extend(moment.duration.fn = Duration.prototype, {

        _bubble : function () {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds, minutes, hours, years = 0;

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absRound(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absRound(seconds / 60);
            data.minutes = minutes % 60;

            hours = absRound(minutes / 60);
            data.hours = hours % 24;

            days += absRound(hours / 24);

            // Accurately convert days to years, assume start from year 0.
            years = absRound(daysToYears(days));
            days -= absRound(yearsToDays(years));

            // 30 days to a month
            // TODO (iskren): Use anchor date (like 1st Jan) to compute this.
            months += absRound(days / 30);
            days %= 30;

            // 12 months -> 1 year
            years += absRound(months / 12);
            months %= 12;

            data.days = days;
            data.months = months;
            data.years = years;
        },

        abs : function () {
            this._milliseconds = Math.abs(this._milliseconds);
            this._days = Math.abs(this._days);
            this._months = Math.abs(this._months);

            this._data.milliseconds = Math.abs(this._data.milliseconds);
            this._data.seconds = Math.abs(this._data.seconds);
            this._data.minutes = Math.abs(this._data.minutes);
            this._data.hours = Math.abs(this._data.hours);
            this._data.months = Math.abs(this._data.months);
            this._data.years = Math.abs(this._data.years);

            return this;
        },

        weeks : function () {
            return absRound(this.days() / 7);
        },

        valueOf : function () {
            return this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6;
        },

        humanize : function (withSuffix) {
            var output = relativeTime(this, !withSuffix, this.localeData());

            if (withSuffix) {
                output = this.localeData().pastFuture(+this, output);
            }

            return this.localeData().postformat(output);
        },

        add : function (input, val) {
            // supports only 2.0-style add(1, 's') or add(moment)
            var dur = moment.duration(input, val);

            this._milliseconds += dur._milliseconds;
            this._days += dur._days;
            this._months += dur._months;

            this._bubble();

            return this;
        },

        subtract : function (input, val) {
            var dur = moment.duration(input, val);

            this._milliseconds -= dur._milliseconds;
            this._days -= dur._days;
            this._months -= dur._months;

            this._bubble();

            return this;
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units.toLowerCase() + 's']();
        },

        as : function (units) {
            var days, months;
            units = normalizeUnits(units);

            if (units === 'month' || units === 'year') {
                days = this._days + this._milliseconds / 864e5;
                months = this._months + daysToYears(days) * 12;
                return units === 'month' ? months : months / 12;
            } else {
                // handle milliseconds separately because of floating point math errors (issue #1867)
                days = this._days + Math.round(yearsToDays(this._months / 12));
                switch (units) {
                    case 'week': return days / 7 + this._milliseconds / 6048e5;
                    case 'day': return days + this._milliseconds / 864e5;
                    case 'hour': return days * 24 + this._milliseconds / 36e5;
                    case 'minute': return days * 24 * 60 + this._milliseconds / 6e4;
                    case 'second': return days * 24 * 60 * 60 + this._milliseconds / 1000;
                    // Math.floor prevents floating point math errors here
                    case 'millisecond': return Math.floor(days * 24 * 60 * 60 * 1000) + this._milliseconds;
                    default: throw new Error('Unknown unit ' + units);
                }
            }
        },

        lang : moment.fn.lang,
        locale : moment.fn.locale,

        toIsoString : deprecate(
            'toIsoString() is deprecated. Please use toISOString() instead ' +
            '(notice the capitals)',
            function () {
                return this.toISOString();
            }
        ),

        toISOString : function () {
            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            var years = Math.abs(this.years()),
                months = Math.abs(this.months()),
                days = Math.abs(this.days()),
                hours = Math.abs(this.hours()),
                minutes = Math.abs(this.minutes()),
                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);

            if (!this.asSeconds()) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            return (this.asSeconds() < 0 ? '-' : '') +
                'P' +
                (years ? years + 'Y' : '') +
                (months ? months + 'M' : '') +
                (days ? days + 'D' : '') +
                ((hours || minutes || seconds) ? 'T' : '') +
                (hours ? hours + 'H' : '') +
                (minutes ? minutes + 'M' : '') +
                (seconds ? seconds + 'S' : '');
        },

        localeData : function () {
            return this._locale;
        },

        toJSON : function () {
            return this.toISOString();
        }
    });

    moment.duration.fn.toString = moment.duration.fn.toISOString;

    function makeDurationGetter(name) {
        moment.duration.fn[name] = function () {
            return this._data[name];
        };
    }

    for (i in unitMillisecondFactors) {
        if (hasOwnProp(unitMillisecondFactors, i)) {
            makeDurationGetter(i.toLowerCase());
        }
    }

    moment.duration.fn.asMilliseconds = function () {
        return this.as('ms');
    };
    moment.duration.fn.asSeconds = function () {
        return this.as('s');
    };
    moment.duration.fn.asMinutes = function () {
        return this.as('m');
    };
    moment.duration.fn.asHours = function () {
        return this.as('h');
    };
    moment.duration.fn.asDays = function () {
        return this.as('d');
    };
    moment.duration.fn.asWeeks = function () {
        return this.as('weeks');
    };
    moment.duration.fn.asMonths = function () {
        return this.as('M');
    };
    moment.duration.fn.asYears = function () {
        return this.as('y');
    };

    /************************************
        Default Locale
    ************************************/


    // Set default locale, other locale will inherit from English.
    moment.locale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    /* EMBED_LOCALES */

    /************************************
        Exposing Moment
    ************************************/

    function makeGlobal(shouldDeprecate) {
        /*global ender:false */
        if (typeof ender !== 'undefined') {
            return;
        }
        oldGlobalMoment = globalScope.moment;
        if (shouldDeprecate) {
            globalScope.moment = deprecate(
                    'Accessing Moment through the global scope is ' +
                    'deprecated, and will be removed in an upcoming ' +
                    'release.',
                    moment);
        } else {
            globalScope.moment = moment;
        }
    }

    // CommonJS module is defined
    if (hasModule) {
        module.exports = moment;
    } else if (typeof define === 'function' && define.amd) {
        define(function (require, exports, module) {
            if (module.config && module.config() && module.config().noGlobal === true) {
                // release the global variable
                globalScope.moment = oldGlobalMoment;
            }

            return moment;
        });
        makeGlobal(true);
    } else {
        makeGlobal();
    }
}).call(this);// Peity jQuery plugin version 2.0.1
// (c) 2014 Ben Pickles
//
// http://benpickles.github.io/peity
//
// Released under MIT license.
(function($, document, Math) {
  var svgElement = function(tag, attrs) {
    var elem = document.createElementNS("http://www.w3.org/2000/svg", tag)

    $.each(attrs, function(name, value) {
      elem.setAttribute(name, value)
    })

    return elem
  }

  // https://gist.github.com/madrobby/3201472
  var svgSupported = "createElementNS" in document && svgElement("svg", {}).createSVGRect

  var peity = $.fn.peity = function(type, options) {
    if (svgSupported) {
      this.each(function() {
        var $this = $(this)
        var chart = $this.data("peity")

        if (chart) {
          if (type) chart.type = type
          $.extend(chart.opts, options)
        } else {
          var defaults = peity.defaults[type]
          var data = {}

          $.each($this.data(), function(name, value) {
            if (name in defaults) data[name] = value
          })

          var opts = $.extend({}, defaults, data, options)

          chart = new Peity($this, type, opts)

          $this
            .change(function() { chart.draw() })
            .data("peity", chart)
        }

        chart.draw()
      });
    }

    return this;
  };

  var Peity = function($el, type, opts) {
    this.$el = $el
    this.type = type
    this.opts = opts
  }

  var PeityPrototype = Peity.prototype

  PeityPrototype.draw = function() {
    peity.graphers[this.type].call(this, this.opts)
  }

  PeityPrototype.fill = function() {
    var fill = this.opts.fill
    var func = fill

    if (!$.isFunction(func)) {
      func = function(_, i) {
        return fill[i % fill.length]
      }
    }

    return func
  }

  PeityPrototype.prepare = function(width, height) {
    var $svg

    if (this.svg) {
      $svg = $(this.svg).empty()
    } else {
      this.svg = svgElement("svg", {
        "class": "peity"
      })

      this.$el.hide().after(this.svg)

      $svg = $(this.svg).data("peity", this)
    }

    this.svg.setAttribute("height", height)
    this.svg.setAttribute("width", width)

    return $svg
  }

  PeityPrototype.values = function() {
    return $.map(this.$el.text().split(this.opts.delimiter), function(value) {
      return parseFloat(value)
    })
  }

  peity.defaults = {}
  peity.graphers = {}

  peity.register = function(type, defaults, grapher) {
    this.defaults[type] = defaults
    this.graphers[type] = grapher
  }

  peity.register(
    'pie',
    {
      delimiter: null,
      diameter: 16,
      fill: ["#ff9900", "#fff4dd", "#ffc66e"]
    },
    function(opts) {
      if (!opts.delimiter) {
        var delimiter = this.$el.text().match(/[^0-9\.]/)
        opts.delimiter = delimiter ? delimiter[0] : ","
      }

      var values = this.values()

      if (opts.delimiter == "/") {
        var v1 = values[0]
        var v2 = values[1]
        values = [v1, Math.max(0, v2 - v1)]
      }

      var i = 0
      var length = values.length
      var sum = 0

      for (; i < length; i++) {
        sum += values[i]
      }

      var $svg = this.prepare(
        opts.width || opts.diameter,
        opts.height || opts.diameter
      )

      var width = $svg.width()
        , height = $svg.height()
        , cx = width / 2
        , cy = height / 2

      var radius = Math.min(cx, cy)
      var pi = Math.PI
      var fill = this.fill()
      var start = -pi / 2

      for (i = 0; i < length; i++) {
        var value = values[i]
          , portion = value / sum
          , node

        if (portion == 0) continue

        if (portion == 1) {
          node = svgElement("circle", {
            cx: cx,
            cy: cy,
            r: radius
          })
        } else {
          var slice = portion * pi * 2
            , end = start + slice
            , x1 = radius * Math.cos(start) + cx
            , y1 = radius * Math.sin(start) + cy
            , x2 = radius * Math.cos(end) + cx
            , y2 = radius * Math.sin(end) + cy

          var d = [
            "M", cx, cy,
            "L", x1, y1,
            "A", radius, radius, 0, slice > pi ? 1 : 0, 1, x2, y2,
            "Z"
          ]

          node = svgElement("path", {
            d: d.join(" ")
          })

          start = end
        }

        node.setAttribute("fill", fill.call(this, value, i, values))

        this.svg.appendChild(node)
      }
    }
  )

  peity.register(
    "line",
    {
      delimiter: ",",
      fill: "#c6d9fd",
      height: 16,
      max: null,
      min: 0,
      stroke: "#4d89f9",
      strokeWidth: 1,
      width: 32
    },
    function(opts) {
      var values = this.values()
      if (values.length == 1) values.push(values[0])
      var max = Math.max.apply(Math, values.concat([opts.max]));
      var min = Math.min.apply(Math, values.concat([opts.min]))

      var $svg = this.prepare(opts.width, opts.height)
        , width = $svg.width()
        , height = $svg.height() - opts.strokeWidth
        , xQuotient = width / (values.length - 1)
        , yQuotient = height / (max - min)
        , zero = height + (min * yQuotient)
        , coords = [0, zero]

      for (var i = 0; i < values.length; i++) {
        var x = i * xQuotient
        var y = height - (yQuotient * (values[i] - min)) + opts.strokeWidth / 2

        coords.push(x, y)
      }

      coords.push(width, zero)

      var polygon = svgElement("polygon", {
        fill: opts.fill,
        points: coords.join(" ")
      })

      this.svg.appendChild(polygon)

      if (opts.strokeWidth) {
        var polyline = svgElement("polyline", {
          fill: "transparent",
          points: coords.slice(2, coords.length - 2).join(" "),
          stroke: opts.stroke,
          "stroke-width": opts.strokeWidth,
          "stroke-linecap": "square"
        })

        this.svg.appendChild(polyline)
      }
    }
  );

  peity.register(
    'bar',
    {
      delimiter: ",",
      fill: ["#4D89F9"],
      gap: 1,
      height: 16,
      max: null,
      min: 0,
      width: 32
    },
    function(opts) {
      var values = this.values()
      var max = Math.max.apply(Math, values.concat([opts.max]));
      var min = Math.min.apply(Math, values.concat([opts.min]))

      var $svg = this.prepare(opts.width, opts.height)
        , width = $svg.width()
        , height = $svg.height()
        , diff = max - min
        , yQuotient = diff == 0 ? 0 : height / diff
        , gap = opts.gap
        , xQuotient = (width + gap) / values.length
        , fill = this.fill()

      console.log('peity dimensions', width, height);
        
      for (var i = 0; i < values.length; i++) {
        var value = values[i]
        var y = height - (yQuotient * (value - min))
        var h

        if (value == min) {
          var pixel = 1 / (window.devicePixelRatio || 1)
          if (min >= 0 || max > 0) y -= pixel
          h = pixel
        } else {
          h = yQuotient * value
        }

        if (h < 0) {
          y += h
          h = -h
        }

        var rect = svgElement("rect", {
          fill: fill.call(this, value, i, values),
          x: i * xQuotient,
          y: y,
          width: xQuotient - gap,
          height: h
        })

        this.svg.appendChild(rect)
      }
    }
  );
})(jQuery, document, Math);/*!
 * jQuery Cookie Plugin v1.4.0
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD
		define(['jquery'], factory);
	} else if (typeof exports === 'object') {
		// CommonJS
		factory(require('jquery'));
	} else {
		// Browser globals
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write

		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};

}));/*
	http://github.com/danpalmer/jquery.complexify.js

	This code is distributed under the WTFPL v2:
*/
(function ($) {

	$.fn.extend({
		complexify: function(options, callback) {

			var MIN_COMPLEXITY = 49; // 12 chars with Upper, Lower and Number
			var MAX_COMPLEXITY = 120; //  25 chars, all charsets
			var CHARSETS = [
				// Commonly Used
				////////////////////
				[0x0030, 0x0039], // Numbers
				[0x0041, 0x005A], // Uppercase
				[0x0061, 0x007A], // Lowercase
				[0x0021, 0x002F], // Punctuation
				[0x003A, 0x0040], // Punctuation
				[0x005B, 0x0060], // Punctuation
				[0x007B, 0x007E], // Punctuation
				// Everything Else
				////////////////////
				[0x0080, 0x00FF], // Latin-1 Supplement
				[0x0100, 0x017F], // Latin Extended-A
				[0x0180, 0x024F], // Latin Extended-B
				[0x0250, 0x02AF], // IPA Extensions
				[0x02B0, 0x02FF], // Spacing Modifier Letters
				[0x0300, 0x036F], // Combining Diacritical Marks
				[0x0370, 0x03FF], // Greek
				[0x0400, 0x04FF], // Cyrillic
				[0x0530, 0x058F], // Armenian
				[0x0590, 0x05FF], // Hebrew
				[0x0600, 0x06FF], // Arabic
				[0x0700, 0x074F], // Syriac
				[0x0780, 0x07BF], // Thaana
				[0x0900, 0x097F], // Devanagari
				[0x0980, 0x09FF], // Bengali
				[0x0A00, 0x0A7F], // Gurmukhi
				[0x0A80, 0x0AFF], // Gujarati
				[0x0B00, 0x0B7F], // Oriya
				[0x0B80, 0x0BFF], // Tamil
				[0x0C00, 0x0C7F], // Telugu
				[0x0C80, 0x0CFF], // Kannada
				[0x0D00, 0x0D7F], // Malayalam
				[0x0D80, 0x0DFF], // Sinhala
				[0x0E00, 0x0E7F], // Thai
				[0x0E80, 0x0EFF], // Lao
				[0x0F00, 0x0FFF], // Tibetan
				[0x1000, 0x109F], // Myanmar
				[0x10A0, 0x10FF], // Georgian
				[0x1100, 0x11FF], // Hangul Jamo
				[0x1200, 0x137F], // Ethiopic
				[0x13A0, 0x13FF], // Cherokee
				[0x1400, 0x167F], // Unified Canadian Aboriginal Syllabics
				[0x1680, 0x169F], // Ogham
				[0x16A0, 0x16FF], // Runic
				[0x1780, 0x17FF], // Khmer
				[0x1800, 0x18AF], // Mongolian
				[0x1E00, 0x1EFF], // Latin Extended Additional
				[0x1F00, 0x1FFF], // Greek Extended
				[0x2000, 0x206F], // General Punctuation
				[0x2070, 0x209F], // Superscripts and Subscripts
				[0x20A0, 0x20CF], // Currency Symbols
				[0x20D0, 0x20FF], // Combining Marks for Symbols
				[0x2100, 0x214F], // Letterlike Symbols
				[0x2150, 0x218F], // Number Forms
				[0x2190, 0x21FF], // Arrows
				[0x2200, 0x22FF], // Mathematical Operators
				[0x2300, 0x23FF], // Miscellaneous Technical
				[0x2400, 0x243F], // Control Pictures
				[0x2440, 0x245F], // Optical Character Recognition
				[0x2460, 0x24FF], // Enclosed Alphanumerics
				[0x2500, 0x257F], // Box Drawing
				[0x2580, 0x259F], // Block Elements
				[0x25A0, 0x25FF], // Geometric Shapes
				[0x2600, 0x26FF], // Miscellaneous Symbols
				[0x2700, 0x27BF], // Dingbats
				[0x2800, 0x28FF], // Braille Patterns
				[0x2E80, 0x2EFF], // CJK Radicals Supplement
				[0x2F00, 0x2FDF], // Kangxi Radicals
				[0x2FF0, 0x2FFF], // Ideographic Description Characters
				[0x3000, 0x303F], // CJK Symbols and Punctuation
				[0x3040, 0x309F], // Hiragana
				[0x30A0, 0x30FF], // Katakana
				[0x3100, 0x312F], // Bopomofo
				[0x3130, 0x318F], // Hangul Compatibility Jamo
				[0x3190, 0x319F], // Kanbun
				[0x31A0, 0x31BF], // Bopomofo Extended
				[0x3200, 0x32FF], // Enclosed CJK Letters and Months
				[0x3300, 0x33FF], // CJK Compatibility
				[0x3400, 0x4DB5], // CJK Unified Ideographs Extension A
				[0x4E00, 0x9FFF], // CJK Unified Ideographs
				[0xA000, 0xA48F], // Yi Syllables
				[0xA490, 0xA4CF], // Yi Radicals
				[0xAC00, 0xD7A3], // Hangul Syllables
				[0xD800, 0xDB7F], // High Surrogates
				[0xDB80, 0xDBFF], // High Private Use Surrogates
				[0xDC00, 0xDFFF], // Low Surrogates
				[0xE000, 0xF8FF], // Private Use
				[0xF900, 0xFAFF], // CJK Compatibility Ideographs
				[0xFB00, 0xFB4F], // Alphabetic Presentation Forms
				[0xFB50, 0xFDFF], // Arabic Presentation Forms-A
				[0xFE20, 0xFE2F], // Combining Half Marks
				[0xFE30, 0xFE4F], // CJK Compatibility Forms
				[0xFE50, 0xFE6F], // Small Form Variants
				[0xFE70, 0xFEFE], // Arabic Presentation Forms-B
				[0xFEFF, 0xFEFF], // Specials
				[0xFF00, 0xFFEF], // Halfwidth and Fullwidth Forms
				[0xFFF0, 0xFFFD]  // Specials
			];

			var defaults = {
				minimumChars: 8,
				strengthScaleFactor: 1,
        bannedPasswords: window.COMPLEXIFY_BANLIST || [],
				banmode: 'strict', // (strict|loose)
        evaluateOnInit: true
			};

			if($.isFunction(options) && !callback) {
				callback = options;
				options = {};
			}

			options = $.extend(defaults, options);

			function additionalComplexityForCharset(str, charset) {
				for (var i = str.length - 1; i >= 0; i--) {
					if (charset[0] <= str.charCodeAt(i) && str.charCodeAt(i) <= charset[1]) {
						return charset[1] - charset[0] + 1;
					}
				}
        return 0;
			}
			
			function inBanlist(str) {
				if (options.banmode === 'strict') {
					for (var i = 0; i < options.bannedPasswords.length; i++) {
            if (options.bannedPasswords[i].indexOf(str) !== -1) {
              return true;
            }
					}
					return false;
				} else {
					return $.inArray(str, options.bannedPasswords) > -1 ? true : false;
				}
			}

      function evaluateSecurity() {
        var password = $(this).val();
        var complexity = 0, valid = false;
        
        // Reset complexity to 0 when banned password is found
        if (!inBanlist(password)) {
        
          // Add character complexity
          for (var i = CHARSETS.length - 1; i >= 0; i--) {
            complexity += additionalComplexityForCharset(password, CHARSETS[i]);
          }
          
        } else {
          complexity = 1;
        }
        
        // Use natural log to produce linear scale
        complexity = Math.log(Math.pow(complexity, password.length)) * (1/options.strengthScaleFactor);

        valid = (complexity > MIN_COMPLEXITY && password.length >= options.minimumChars);

        // Scale to percentage, so it can be used for a progress bar
        complexity = (complexity / MAX_COMPLEXITY) * 100;
        complexity = (complexity > 100) ? 100 : complexity;
        
        callback.call(this, valid, complexity);
      }

      if( options.evaluateOnInit ) {
        this.each(function () {
          evaluateSecurity.apply(this);
        });
      }

			return this.each(function () {
        $(this).bind('keyup focus', evaluateSecurity);
			});
			
		}
	});

})(jQuery);/*!
 * Pikaday
 *
 * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/dbushell/Pikaday
 */

(function (root, factory)
{
    'use strict';

    var moment;
    if (typeof exports === 'object') {
        // CommonJS module
        // Load moment.js as an optional dependency
        try { moment = require('moment'); } catch (e) {}
        module.exports = factory(moment);
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(function (req)
        {
            // Load moment.js as an optional dependency
            var id = 'moment';
            try { moment = req(id); } catch (e) {}
            return factory(moment);
        });
    } else {
        root.Pikaday = factory(root.moment);
    }
}(this, function (moment)
{
    'use strict';

    /**
     * feature detection and helper functions
     */
    var hasMoment = typeof moment === 'function',

    hasEventListeners = !!window.addEventListener,

    document = window.document,

    sto = window.setTimeout,

    addEvent = function(el, e, callback, capture)
    {
        if (hasEventListeners) {
            el.addEventListener(e, callback, !!capture);
        } else {
            el.attachEvent('on' + e, callback);
        }
    },

    removeEvent = function(el, e, callback, capture)
    {
        if (hasEventListeners) {
            el.removeEventListener(e, callback, !!capture);
        } else {
            el.detachEvent('on' + e, callback);
        }
    },

    fireEvent = function(el, eventName, data)
    {
        var ev;

        if (document.createEvent) {
            ev = document.createEvent('HTMLEvents');
            ev.initEvent(eventName, true, false);
            ev = extend(ev, data);
            el.dispatchEvent(ev);
        } else if (document.createEventObject) {
            ev = document.createEventObject();
            ev = extend(ev, data);
            el.fireEvent('on' + eventName, ev);
        }
    },

    trim = function(str)
    {
        return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g,'');
    },

    hasClass = function(el, cn)
    {
        return (' ' + el.className + ' ').indexOf(' ' + cn + ' ') !== -1;
    },

    addClass = function(el, cn)
    {
        if (!hasClass(el, cn)) {
            el.className = (el.className === '') ? cn : el.className + ' ' + cn;
        }
    },

    removeClass = function(el, cn)
    {
        el.className = trim((' ' + el.className + ' ').replace(' ' + cn + ' ', ' '));
    },

    isArray = function(obj)
    {
        return (/Array/).test(Object.prototype.toString.call(obj));
    },

    isDate = function(obj)
    {
        return (/Date/).test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
    },

    isWeekend = function(date)
    {
        var day = date.getDay();
        return day === 0 || day === 6;
    },

    isLeapYear = function(year)
    {
        // solution by Matti Virkkunen: http://stackoverflow.com/a/4881951
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    },

    getDaysInMonth = function(year, month)
    {
        return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
    },

    setToStartOfDay = function(date)
    {
        if (isDate(date)) date.setHours(0,0,0,0);
    },

    compareDates = function(a,b)
    {
        // weak date comparison (use setToStartOfDay(date) to ensure correct result)
        return a.getTime() === b.getTime();
    },

    extend = function(to, from, overwrite)
    {
        var prop, hasProp;
        for (prop in from) {
            hasProp = to[prop] !== undefined;
            if (hasProp && typeof from[prop] === 'object' && from[prop] !== null && from[prop].nodeName === undefined) {
                if (isDate(from[prop])) {
                    if (overwrite) {
                        to[prop] = new Date(from[prop].getTime());
                    }
                }
                else if (isArray(from[prop])) {
                    if (overwrite) {
                        to[prop] = from[prop].slice(0);
                    }
                } else {
                    to[prop] = extend({}, from[prop], overwrite);
                }
            } else if (overwrite || !hasProp) {
                to[prop] = from[prop];
            }
        }
        return to;
    },

    adjustCalendar = function(calendar) {
        if (calendar.month < 0) {
            calendar.year -= Math.ceil(Math.abs(calendar.month)/12);
            calendar.month += 12;
        }
        if (calendar.month > 11) {
            calendar.year += Math.floor(Math.abs(calendar.month)/12);
            calendar.month -= 12;
        }
        return calendar;
    },

    /**
     * defaults and localisation
     */
    defaults = {

        // bind the picker to a form field
        field: null,

        // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
        bound: undefined,

        // position of the datepicker, relative to the field (default to bottom & left)
        // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
        position: 'bottom left',

        // automatically fit in the viewport even if it means repositioning from the position option
        reposition: true,

        // the default output format for `.toString()` and `field` value
        format: 'YYYY-MM-DD',

        // the initial date to view when first opened
        defaultDate: null,

        // make the `defaultDate` the initial selected value
        setDefaultDate: false,

        // first day of week (0: Sunday, 1: Monday etc)
        firstDay: 0,

        // the minimum/earliest date that can be selected
        minDate: null,
        // the maximum/latest date that can be selected
        maxDate: null,

        // number of years either side, or array of upper/lower range
        yearRange: 10,

        // show week numbers at head of row
        showWeekNumber: false,

        // used internally (don't config outside)
        minYear: 0,
        maxYear: 9999,
        minMonth: undefined,
        maxMonth: undefined,

        isRTL: false,

        // Additional text to append to the year in the calendar title
        yearSuffix: '',

        // Render the month after year in the calendar title
        showMonthAfterYear: false,

        // how many months are visible
        numberOfMonths: 1,

        // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
        // only used for the first display or when a selected date is not visible
        mainCalendar: 'left',

        // Specify a DOM element to render the calendar in
        container: undefined,

        // internationalization
        i18n: {
            previousMonth : 'Previous Month',
            nextMonth     : 'Next Month',
            months        : ['January','February','March','April','May','June','July','August','September','October','November','December'],
            weekdays      : ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
            weekdaysShort : ['Sun','Mon','Tue','Wed','Thu','Fri','Sat']
        },

        // Theme Classname
        theme: null,

        // callback function
        onSelect: null,
        onOpen: null,
        onClose: null,
        onDraw: null
    },


    /**
     * templating functions to abstract HTML rendering
     */
    renderDayName = function(opts, day, abbr)
    {
        day += opts.firstDay;
        while (day >= 7) {
            day -= 7;
        }
        return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
    },

    renderDay = function(d, m, y, isSelected, isToday, isDisabled, isEmpty)
    {
        if (isEmpty) {
            return '<td class="is-empty"></td>';
        }
        var arr = [];
        if (isDisabled) {
            arr.push('is-disabled');
        }
        if (isToday) {
            arr.push('is-today');
        }
        if (isSelected) {
            arr.push('is-selected');
        }
        return '<td data-day="' + d + '" class="' + arr.join(' ') + '">' +
                 '<button class="pika-button pika-day" type="button" ' +
                    'data-pika-year="' + y + '" data-pika-month="' + m + '" data-pika-day="' + d + '">' +
                        d +
                 '</button>' +
               '</td>';
    },

    renderWeek = function (d, m, y) {
        // Lifted from http://javascript.about.com/library/blweekyear.htm, lightly modified.
        var onejan = new Date(y, 0, 1),
            weekNum = Math.ceil((((new Date(y, m, d) - onejan) / 86400000) + onejan.getDay()+1)/7);
        return '<td class="pika-week">' + weekNum + '</td>';
    },

    renderRow = function(days, isRTL)
    {
        return '<tr>' + (isRTL ? days.reverse() : days).join('') + '</tr>';
    },

    renderBody = function(rows)
    {
        return '<tbody>' + rows.join('') + '</tbody>';
    },

    renderHead = function(opts)
    {
        var i, arr = [];
        if (opts.showWeekNumber) {
            arr.push('<th></th>');
        }
        for (i = 0; i < 7; i++) {
            arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + '</abbr></th>');
        }
        return '<thead>' + (opts.isRTL ? arr.reverse() : arr).join('') + '</thead>';
    },

    renderTitle = function(instance, c, year, month, refYear)
    {
        var i, j, arr,
            opts = instance._o,
            isMinYear = year === opts.minYear,
            isMaxYear = year === opts.maxYear,
            html = '<div class="pika-title">',
            monthHtml,
            yearHtml,
            prev = true,
            next = true;

        for (arr = [], i = 0; i < 12; i++) {
            arr.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' +
                (i === month ? ' selected': '') +
                ((isMinYear && i < opts.minMonth) || (isMaxYear && i > opts.maxMonth) ? 'disabled' : '') + '>' +
                opts.i18n.months[i] + '</option>');
        }
        monthHtml = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month">' + arr.join('') + '</select></div>';

        if (isArray(opts.yearRange)) {
            i = opts.yearRange[0];
            j = opts.yearRange[1] + 1;
        } else {
            i = year - opts.yearRange;
            j = 1 + year + opts.yearRange;
        }

        for (arr = []; i < j && i <= opts.maxYear; i++) {
            if (i >= opts.minYear) {
                arr.push('<option value="' + i + '"' + (i === year ? ' selected': '') + '>' + (i) + '</option>');
            }
        }
        yearHtml = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year">' + arr.join('') + '</select></div>';

        if (opts.showMonthAfterYear) {
            html += yearHtml + monthHtml;
        } else {
            html += monthHtml + yearHtml;
        }

        if (isMinYear && (month === 0 || opts.minMonth >= month)) {
            prev = false;
        }

        if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
            next = false;
        }

        if (c === 0) {
            html += '<button class="pika-prev' + (prev ? '' : ' is-disabled') + '" type="button">' + opts.i18n.previousMonth + '</button>';
        }
        if (c === (instance._o.numberOfMonths - 1) ) {
            html += '<button class="pika-next' + (next ? '' : ' is-disabled') + '" type="button">' + opts.i18n.nextMonth + '</button>';
        }

        return html += '</div>';
    },

    renderTable = function(opts, data)
    {
        return '<table cellpadding="0" cellspacing="0" class="pika-table">' + renderHead(opts) + renderBody(data) + '</table>';
    },


    /**
     * Pikaday constructor
     */
    Pikaday = function(options)
    {
        var self = this,
            opts = self.config(options);

        self._onMouseDown = function(e)
        {
            if (!self._v) {
                return;
            }
            e = e || window.event;
            var target = e.target || e.srcElement;
            if (!target) {
                return;
            }

            e.preventDefault();
            if (!hasClass(target, 'is-disabled')) {
                if (hasClass(target, 'pika-button') && !hasClass(target, 'is-empty')) {
                    self.setDate(new Date(target.getAttribute('data-pika-year'), target.getAttribute('data-pika-month'), target.getAttribute('data-pika-day')));
                    if (opts.bound) {
                        sto(function() {
                            self.hide();
                            if (opts.field) {
                                opts.field.blur();
                            }
                        }, 100);
                    }
                    return;
                }
                else if (hasClass(target, 'pika-prev')) {
                    self.prevMonth();
                }
                else if (hasClass(target, 'pika-next')) {
                    self.nextMonth();
                }
            }
            if (!hasClass(target, 'pika-select')) {
                if (e.preventDefault) {
                    e.preventDefault();
                } else {
                    e.returnValue = false;
                    return false;
                }
            } else {
                self._c = true;
            }
        };

        self._onChange = function(e)
        {
            e = e || window.event;
            var target = e.target || e.srcElement;
            if (!target) {
                return;
            }
            if (hasClass(target, 'pika-select-month')) {
                self.gotoMonth(target.value);
            }
            else if (hasClass(target, 'pika-select-year')) {
                self.gotoYear(target.value);
            }
        };

        self._onInputChange = function(e)
        {
            var date;

            if (e.firedBy === self) {
                return;
            }
            if (hasMoment) {
                date = moment(opts.field.value, opts.format);
                date = (date && date.isValid()) ? date.toDate() : null;
            }
            else {
                date = new Date(Date.parse(opts.field.value));
            }
            self.setDate(isDate(date) ? date : null);
            if (!self._v) {
                self.show();
            }
        };

        self._onInputFocus = function()
        {
            self.show();
        };

        self._onInputClick = function()
        {
            self.show();
        };

        self._onInputBlur = function()
        {
            // IE allows pika div to gain focus; catch blur the input field
            var pEl = document.activeElement;
            do {
                if (hasClass(pEl, 'pika-single')) {
                    return;
                }
            }
            while ((pEl = pEl.parentNode));

            if (!self._c) {
                self._b = sto(function() {
                    self.hide();
                }, 50);
            }
            self._c = false;
        };

        self._onClick = function(e)
        {
            e = e || window.event;
            var target = e.target || e.srcElement,
                pEl = target;
            if (!target) {
                return;
            }
            if (!hasEventListeners && hasClass(target, 'pika-select')) {
                if (!target.onchange) {
                    target.setAttribute('onchange', 'return;');
                    addEvent(target, 'change', self._onChange);
                }
            }
            do {
                if (hasClass(pEl, 'pika-single') || pEl === opts.trigger) {
                    return;
                }
            }
            while ((pEl = pEl.parentNode));
            if (self._v && target !== opts.trigger && pEl !== opts.trigger) {
                self.hide();
            }
        };

        self.el = document.createElement('div');
        self.el.className = 'pika-single' + (opts.isRTL ? ' is-rtl' : '') + (opts.theme ? ' ' + opts.theme : '');

        addEvent(self.el, 'ontouchend' in document ? 'ontouchend' : 'mousedown', self._onMouseDown, true);
        addEvent(self.el, 'change', self._onChange);

        if (opts.field) {
            if (opts.container) {
              opts.container.appendChild(self.el);
            } else if (opts.bound) {
                document.body.appendChild(self.el);
            } else {
                opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
            }
            addEvent(opts.field, 'change', self._onInputChange);

            if (!opts.defaultDate) {
                if (hasMoment && opts.field.value) {
                    opts.defaultDate = moment(opts.field.value, opts.format).toDate();
                } else {
                    opts.defaultDate = new Date(Date.parse(opts.field.value));
                }
                opts.setDefaultDate = true;
            }
        }

        var defDate = opts.defaultDate;

        if (isDate(defDate)) {
            if (opts.setDefaultDate) {
                self.setDate(defDate, true);
            } else {
                self.gotoDate(defDate);
            }
        } else {
            self.gotoDate(new Date());
        }

        if (opts.bound) {
            this.hide();
            self.el.className += ' is-bound';
            addEvent(opts.trigger, 'click', self._onInputClick);
            addEvent(opts.trigger, 'focus', self._onInputFocus);
            addEvent(opts.trigger, 'blur', self._onInputBlur);
        } else {
            this.show();
        }
    };


    /**
     * public Pikaday API
     */
    Pikaday.prototype = {


        /**
         * configure functionality
         */
        config: function(options)
        {
            if (!this._o) {
                this._o = extend({}, defaults, true);
            }

            var opts = extend(this._o, options, true);

            opts.isRTL = !!opts.isRTL;

            opts.field = (opts.field && opts.field.nodeName) ? opts.field : null;

            opts.theme = (typeof opts.theme) == 'string' && opts.theme ? opts.theme : null;

            opts.bound = !!(opts.bound !== undefined ? opts.field && opts.bound : opts.field);

            opts.trigger = (opts.trigger && opts.trigger.nodeName) ? opts.trigger : opts.field;

            opts.disableWeekends = !!opts.disableWeekends;

            opts.disableDayFn = (typeof opts.disableDayFn) == "function" ? opts.disableDayFn : null;

            var nom = parseInt(opts.numberOfMonths, 10) || 1;
            opts.numberOfMonths = nom > 4 ? 4 : nom;

            if (!isDate(opts.minDate)) {
                opts.minDate = false;
            }
            if (!isDate(opts.maxDate)) {
                opts.maxDate = false;
            }
            if ((opts.minDate && opts.maxDate) && opts.maxDate < opts.minDate) {
                opts.maxDate = opts.minDate = false;
            }
            if (opts.minDate) {
                this.setMinDate(opts.minDate)
            }
            if (opts.maxDate) {
                setToStartOfDay(opts.maxDate);
                opts.maxYear  = opts.maxDate.getFullYear();
                opts.maxMonth = opts.maxDate.getMonth();
            }

            if (isArray(opts.yearRange)) {
                var fallback = new Date().getFullYear() - 10;
                opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
                opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
            } else {
                opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange;
                if (opts.yearRange > 100) {
                    opts.yearRange = 100;
                }
            }

            return opts;
        },

        /**
         * return a formatted string of the current selection (using Moment.js if available)
         */
        toString: function(format)
        {
            return !isDate(this._d) ? '' : hasMoment ? moment(this._d).format(format || this._o.format) : this._d.toDateString();
        },

        /**
         * return a Moment.js object of the current selection (if available)
         */
        getMoment: function()
        {
            return hasMoment ? moment(this._d) : null;
        },

        /**
         * set the current selection from a Moment.js object (if available)
         */
        setMoment: function(date, preventOnSelect)
        {
            if (hasMoment && moment.isMoment(date)) {
                this.setDate(date.toDate(), preventOnSelect);
            }
        },

        /**
         * return a Date object of the current selection
         */
        getDate: function()
        {
            return isDate(this._d) ? new Date(this._d.getTime()) : null;
        },

        /**
         * set the current selection
         */
        setDate: function(date, preventOnSelect)
        {
            if (!date) {
                this._d = null;

                if (this._o.field) {
                    this._o.field.value = '';
                    fireEvent(this._o.field, 'change', { firedBy: this });
                }

                return this.draw();
            }
            if (typeof date === 'string') {
                date = new Date(Date.parse(date));
            }
            if (!isDate(date)) {
                return;
            }

            var min = this._o.minDate,
                max = this._o.maxDate;

            if (isDate(min) && date < min) {
                date = min;
            } else if (isDate(max) && date > max) {
                date = max;
            }

            this._d = new Date(date.getTime());
            setToStartOfDay(this._d);
            this.gotoDate(this._d);

            if (this._o.field) {
                this._o.field.value = this.toString();
                fireEvent(this._o.field, 'change', { firedBy: this });
            }
            if (!preventOnSelect && typeof this._o.onSelect === 'function') {
                this._o.onSelect.call(this, this.getDate());
            }
        },

        /**
         * change view to a specific date
         */
        gotoDate: function(date)
        {
            var newCalendar = true;

            if (!isDate(date)) {
                return;
            }

            if (this.calendars) {
                var firstVisibleDate = new Date(this.calendars[0].year, this.calendars[0].month, 1),
                    lastVisibleDate = new Date(this.calendars[this.calendars.length-1].year, this.calendars[this.calendars.length-1].month, 1),
                    visibleDate = date.getTime();
                // get the end of the month
                lastVisibleDate.setMonth(lastVisibleDate.getMonth()+1);
                lastVisibleDate.setDate(lastVisibleDate.getDate()-1);
                newCalendar = (visibleDate < firstVisibleDate.getTime() || lastVisibleDate.getTime() < visibleDate);
            }

            if (newCalendar) {
                this.calendars = [{
                    month: date.getMonth(),
                    year: date.getFullYear()
                }];
                if (this._o.mainCalendar === 'right') {
                    this.calendars[0].month += 1 - this._o.numberOfMonths;
                }
            }

            this.adjustCalendars();
        },

        adjustCalendars: function() {
            this.calendars[0] = adjustCalendar(this.calendars[0]);
            for (var c = 1; c < this._o.numberOfMonths; c++) {
                this.calendars[c] = adjustCalendar({
                    month: this.calendars[0].month + c,
                    year: this.calendars[0].year
                });
            }
            this.draw();
        },

        gotoToday: function()
        {
            this.gotoDate(new Date());
        },

        /**
         * change view to a specific month (zero-index, e.g. 0: January)
         */
        gotoMonth: function(month)
        {
            if (!isNaN(month)) {
                this.calendars[0].month = parseInt(month, 10);
                this.adjustCalendars();
            }
        },

        nextMonth: function()
        {
            this.calendars[0].month++;
            this.adjustCalendars();
        },

        prevMonth: function()
        {
            this.calendars[0].month--;
            this.adjustCalendars();
        },

        /**
         * change view to a specific full year (e.g. "2012")
         */
        gotoYear: function(year)
        {
            if (!isNaN(year)) {
                this.calendars[0].year = parseInt(year, 10);
                this.adjustCalendars();
            }
        },

        /**
         * change the minDate
         */
        setMinDate: function(value)
        {
            setToStartOfDay(value);
            this._o.minDate = value;
            this._o.minYear  = value.getFullYear();
            this._o.minMonth = value.getMonth();
        },

        /**
         * change the maxDate
         */
        setMaxDate: function(value)
        {
            this._o.maxDate = value;
        },

        /**
         * refresh the HTML
         */
        draw: function(force)
        {
            if (!this._v && !force) {
                return;
            }
            var opts = this._o,
                minYear = opts.minYear,
                maxYear = opts.maxYear,
                minMonth = opts.minMonth,
                maxMonth = opts.maxMonth,
                html = '';

            if (this._y <= minYear) {
                this._y = minYear;
                if (!isNaN(minMonth) && this._m < minMonth) {
                    this._m = minMonth;
                }
            }
            if (this._y >= maxYear) {
                this._y = maxYear;
                if (!isNaN(maxMonth) && this._m > maxMonth) {
                    this._m = maxMonth;
                }
            }

            for (var c = 0; c < opts.numberOfMonths; c++) {
                html += '<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year) + this.render(this.calendars[c].year, this.calendars[c].month) + '</div>';
            }

            this.el.innerHTML = html;

            if (opts.bound) {
                if(opts.field.type !== 'hidden') {
                    sto(function() {
                        opts.trigger.focus();
                    }, 1);
                }
            }

            if (typeof this._o.onDraw === 'function') {
                var self = this;
                sto(function() {
                    self._o.onDraw.call(self);
                }, 0);
            }
        },

        adjustPosition: function()
        {
            if (this._o.container) return;
            var field = this._o.trigger, pEl = field,
            width = this.el.offsetWidth, height = this.el.offsetHeight,
            viewportWidth = window.innerWidth || document.documentElement.clientWidth,
            viewportHeight = window.innerHeight || document.documentElement.clientHeight,
            scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop,
            left, top, clientRect;

            if (typeof field.getBoundingClientRect === 'function') {
                clientRect = field.getBoundingClientRect();
                left = clientRect.left + window.pageXOffset;
                top = clientRect.bottom + window.pageYOffset;
            } else {
                left = pEl.offsetLeft;
                top  = pEl.offsetTop + pEl.offsetHeight;
                while((pEl = pEl.offsetParent)) {
                    left += pEl.offsetLeft;
                    top  += pEl.offsetTop;
                }
            }

            // default position is bottom & left
            if ((this._o.reposition && left + width > viewportWidth) ||
                (
                    this._o.position.indexOf('right') > -1 &&
                    left - width + field.offsetWidth > 0
                )
            ) {
                left = left - width + field.offsetWidth;
            }
            if ((this._o.reposition && top + height > viewportHeight + scrollTop) ||
                (
                    this._o.position.indexOf('top') > -1 &&
                    top - height - field.offsetHeight > 0
                )
            ) {
                top = top - height - field.offsetHeight;
            }

            this.el.style.cssText = [
                'position: absolute',
                'left: ' + left + 'px',
                'top: ' + top + 'px'
            ].join(';');
        },

        /**
         * render HTML for a particular month
         */
        render: function(year, month)
        {
            var opts   = this._o,
                now    = new Date(),
                days   = getDaysInMonth(year, month),
                before = new Date(year, month, 1).getDay(),
                data   = [],
                row    = [];
            setToStartOfDay(now);
            if (opts.firstDay > 0) {
                before -= opts.firstDay;
                if (before < 0) {
                    before += 7;
                }
            }
            var cells = days + before,
                after = cells;
            while(after > 7) {
                after -= 7;
            }
            cells += 7 - after;
            for (var i = 0, r = 0; i < cells; i++)
            {
                var day = new Date(year, month, 1 + (i - before)),
                    isSelected = isDate(this._d) ? compareDates(day, this._d) : false,
                    isToday = compareDates(day, now),
                    isEmpty = i < before || i >= (days + before),
                    isDisabled = (opts.minDate && day < opts.minDate) ||
                                 (opts.maxDate && day > opts.maxDate) ||
                                 (opts.disableWeekends && isWeekend(day)) ||
                                 (opts.disableDayFn && opts.disableDayFn(day));

                row.push(renderDay(1 + (i - before), month, year, isSelected, isToday, isDisabled, isEmpty));

                if (++r === 7) {
                    if (opts.showWeekNumber) {
                        row.unshift(renderWeek(i - before, month, year));
                    }
                    data.push(renderRow(row, opts.isRTL));
                    row = [];
                    r = 0;
                }
            }
            return renderTable(opts, data);
        },

        isVisible: function()
        {
            return this._v;
        },

        show: function()
        {
            if (!this._v) {
                removeClass(this.el, 'is-hidden');
                this._v = true;
                this.draw();
                if (this._o.bound) {
                    addEvent(document, 'click', this._onClick);
                    this.adjustPosition();
                }
                if (typeof this._o.onOpen === 'function') {
                    this._o.onOpen.call(this);
                }
            }
        },

        hide: function()
        {
            var v = this._v;
            if (v !== false) {
                if (this._o.bound) {
                    removeEvent(document, 'click', this._onClick);
                }
                this.el.style.cssText = '';
                addClass(this.el, 'is-hidden');
                this._v = false;
                if (v !== undefined && typeof this._o.onClose === 'function') {
                    this._o.onClose.call(this);
                }
            }
        },

        /**
         * GAME OVER
         */
        destroy: function()
        {
            this.hide();
            removeEvent(this.el, 'mousedown', this._onMouseDown, true);
            removeEvent(this.el, 'change', this._onChange);
            if (this._o.field) {
                removeEvent(this._o.field, 'change', this._onInputChange);
                if (this._o.bound) {
                    removeEvent(this._o.trigger, 'click', this._onInputClick);
                    removeEvent(this._o.trigger, 'focus', this._onInputFocus);
                    removeEvent(this._o.trigger, 'blur', this._onInputBlur);
                }
            }
            if (this.el.parentNode) {
                this.el.parentNode.removeChild(this.el);
            }
        }

    };

    return Pikaday;

}));// TinyColor v0.10.0
// https://github.com/bgrins/TinyColor
// 2013-08-10, Brian Grinstead, MIT License

(function() {

var trimLeft = /^[\s,#]+/,
    trimRight = /\s+$/,
    tinyCounter = 0,
    math = Math,
    mathRound = math.round,
    mathMin = math.min,
    mathMax = math.max,
    mathRandom = math.random;

var tinycolor = function tinycolor (color, opts) {

    color = (color) ? color : '';
    opts = opts || { };

    // If input is already a tinycolor, return itself
    if (color instanceof tinycolor) {
       return color;
    }
    // If we are called as a function, call using new instead
    if (!(this instanceof tinycolor)) {
        return new tinycolor(color, opts);
    }

    var rgb = inputToRGB(color);
    this._r = rgb.r,
    this._g = rgb.g,
    this._b = rgb.b,
    this._a = rgb.a,
    this._roundA = mathRound(100*this._a) / 100,
    this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType;

    // Don't let the range of [0,255] come back in [0,1].
    // Potentially lose a little bit of precision here, but will fix issues where
    // .5 gets interpreted as half of the total, instead of half of 1
    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
    if (this._r < 1) { this._r = mathRound(this._r); }
    if (this._g < 1) { this._g = mathRound(this._g); }
    if (this._b < 1) { this._b = mathRound(this._b); }

    this._ok = rgb.ok;
    this._tc_id = tinyCounter++;
};

tinycolor.prototype = {
    isValid: function() {
        return this._ok;
    },
    getAlpha: function() {
        return this._a;
    },
    setAlpha: function(value) {
        this._a = boundAlpha(value);
        this._roundA = mathRound(100*this._a) / 100;
    },
    toHsv: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
    },
    toHsvString: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
        return (this._a == 1) ?
          "hsv("  + h + ", " + s + "%, " + v + "%)" :
          "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";
    },
    toHsl: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
    },
    toHslString: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
        return (this._a == 1) ?
          "hsl("  + h + ", " + s + "%, " + l + "%)" :
          "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";
    },
    toHex: function(allow3Char) {
        return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function(allow3Char) {
        return '#' + this.toHex(allow3Char);
    },
    toHex8: function() {
        return rgbaToHex(this._r, this._g, this._b, this._a);
    },
    toHex8String: function() {
        return '#' + this.toHex8();
    },
    toRgb: function() {
        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
    },
    toRgbString: function() {
        return (this._a == 1) ?
          "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
          "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function() {
        return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
    },
    toPercentageRgbString: function() {
        return (this._a == 1) ?
          "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
          "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function() {
        if (this._a === 0) {
            return "transparent";
        }

        if (this._a < 1) {
            return false;
        }

        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function(secondColor) {
        var hex8String = '#' + rgbaToHex(this._r, this._g, this._b, this._a);
        var secondHex8String = hex8String;
        var gradientType = this._gradientType ? "GradientType = 1, " : "";

        if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = s.toHex8String();
        }

        return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
    },
    toString: function(format) {
        var formatSet = !!format;
        format = format || this._format;

        var formattedString = false;
        var hasAlphaAndFormatNotSet = !formatSet && this._a < 1 && this._a > 0;
        var formatWithAlpha = hasAlphaAndFormatNotSet && (format === "hex" || format === "hex6" || format === "hex3" || format === "name");

        if (formatWithAlpha) {
            return this.toRgbString();
        }
        if (format === "rgb") {
            formattedString = this.toRgbString();
        }
        if (format === "prgb") {
            formattedString = this.toPercentageRgbString();
        }
        if (format === "hex" || format === "hex6") {
            formattedString = this.toHexString();
        }
        if (format === "hex3") {
            formattedString = this.toHexString(true);
        }
        if (format === "hex8") {
            formattedString = this.toHex8String();
        }
        if (format === "name") {
            formattedString = this.toName();
        }
        if (format === "hsl") {
            formattedString = this.toHslString();
        }
        if (format === "hsv") {
            formattedString = this.toHsvString();
        }

        return formattedString || this.toHexString();
    }
};

// If input is an object, force 1 into "1.0" to handle ratios properly
// String input requires "1.0" as input, so 1 will be treated as 1
tinycolor.fromRatio = function(color, opts) {
    if (typeof color == "object") {
        var newColor = {};
        for (var i in color) {
            if (color.hasOwnProperty(i)) {
                if (i === "a") {
                    newColor[i] = color[i];
                }
                else {
                    newColor[i] = convertToPercentage(color[i]);
                }
            }
        }
        color = newColor;
    }

    return tinycolor(color, opts);
};

// Given a string or object, convert that input to RGB
// Possible string inputs:
//
//     "red"
//     "#f00" or "f00"
//     "#ff0000" or "ff0000"
//     "#ff000000" or "ff000000"
//     "rgb 255 0 0" or "rgb (255, 0, 0)"
//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
//
function inputToRGB(color) {

    var rgb = { r: 0, g: 0, b: 0 };
    var a = 1;
    var ok = false;
    var format = false;

    if (typeof color == "string") {
        color = stringInputToObject(color);
    }

    if (typeof color == "object") {
        if (color.hasOwnProperty("r") && color.hasOwnProperty("g") && color.hasOwnProperty("b")) {
            rgb = rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
        }
        else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("v")) {
            color.s = convertToPercentage(color.s);
            color.v = convertToPercentage(color.v);
            rgb = hsvToRgb(color.h, color.s, color.v);
            ok = true;
            format = "hsv";
        }
        else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("l")) {
            color.s = convertToPercentage(color.s);
            color.l = convertToPercentage(color.l);
            rgb = hslToRgb(color.h, color.s, color.l);
            ok = true;
            format = "hsl";
        }

        if (color.hasOwnProperty("a")) {
            a = color.a;
        }
    }

    a = boundAlpha(a);

    return {
        ok: ok,
        format: color.format || format,
        r: mathMin(255, mathMax(rgb.r, 0)),
        g: mathMin(255, mathMax(rgb.g, 0)),
        b: mathMin(255, mathMax(rgb.b, 0)),
        a: a
    };
}


// Conversion Functions
// --------------------

// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

// `rgbToRgb`
// Handle bounds / percentage checking to conform to CSS color spec
// <http://www.w3.org/TR/css3-color/>
// *Assumes:* r, g, b in [0, 255] or [0, 1]
// *Returns:* { r, g, b } in [0, 255]
function rgbToRgb(r, g, b){
    return {
        r: bound01(r, 255) * 255,
        g: bound01(g, 255) * 255,
        b: bound01(b, 255) * 255
    };
}

// `rgbToHsl`
// Converts an RGB color value to HSL.
// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
// *Returns:* { h, s, l } in [0,1]
function rgbToHsl(r, g, b) {

    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);

    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, l = (max + min) / 2;

    if(max == min) {
        h = s = 0; // achromatic
    }
    else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }

        h /= 6;
    }

    return { h: h, s: s, l: l };
}

// `hslToRgb`
// Converts an HSL color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
function hslToRgb(h, s, l) {
    var r, g, b;

    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);

    function hue2rgb(p, q, t) {
        if(t < 0) t += 1;
        if(t > 1) t -= 1;
        if(t < 1/6) return p + (q - p) * 6 * t;
        if(t < 1/2) return q;
        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
        return p;
    }

    if(s === 0) {
        r = g = b = l; // achromatic
    }
    else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1/3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1/3);
    }

    return { r: r * 255, g: g * 255, b: b * 255 };
}

// `rgbToHsv`
// Converts an RGB color value to HSV
// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
// *Returns:* { h, s, v } in [0,1]
function rgbToHsv(r, g, b) {

    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);

    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, v = max;

    var d = max - min;
    s = max === 0 ? 0 : d / max;

    if(max == min) {
        h = 0; // achromatic
    }
    else {
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }
    return { h: h, s: s, v: v };
}

// `hsvToRgb`
// Converts an HSV color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
 function hsvToRgb(h, s, v) {

    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);

    var i = math.floor(h),
        f = h - i,
        p = v * (1 - s),
        q = v * (1 - f * s),
        t = v * (1 - (1 - f) * s),
        mod = i % 6,
        r = [v, q, p, p, t, v][mod],
        g = [t, v, v, q, p, p][mod],
        b = [p, p, t, v, v, q][mod];

    return { r: r * 255, g: g * 255, b: b * 255 };
}

// `rgbToHex`
// Converts an RGB color to hex
// Assumes r, g, and b are contained in the set [0, 255]
// Returns a 3 or 6 character hex
function rgbToHex(r, g, b, allow3Char) {

    var hex = [
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16))
    ];

    // Return a 3 character hex if possible
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }

    return hex.join("");
}
    // `rgbaToHex`
    // Converts an RGBA color plus alpha transparency to hex
    // Assumes r, g, b and a are contained in the set [0, 255]
    // Returns an 8 character hex
    function rgbaToHex(r, g, b, a) {

        var hex = [
            pad2(convertDecimalToHex(a)),
            pad2(mathRound(r).toString(16)),
            pad2(mathRound(g).toString(16)),
            pad2(mathRound(b).toString(16))
        ];

        return hex.join("");
    }

// `equals`
// Can be called with any tinycolor input
tinycolor.equals = function (color1, color2) {
    if (!color1 || !color2) { return false; }
    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
};
tinycolor.random = function() {
    return tinycolor.fromRatio({
        r: mathRandom(),
        g: mathRandom(),
        b: mathRandom()
    });
};


// Modification Functions
// ----------------------
// Thanks to less.js for some of the basics here
// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

tinycolor.desaturate = function (color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
};
tinycolor.saturate = function (color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
};
tinycolor.greyscale = function(color) {
    return tinycolor.desaturate(color, 100);
};
tinycolor.lighten = function(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
};
tinycolor.darken = function (color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
};
tinycolor.complement = function(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
};


// Combination Functions
// ---------------------
// Thanks to jQuery xColor for some of the ideas behind these
// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

tinycolor.triad = function(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
    ];
};
tinycolor.tetrad = function(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
    ];
};
tinycolor.splitcomplement = function(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
    ];
};
tinycolor.analogous = function(color, results, slices) {
    results = results || 6;
    slices = slices || 30;

    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];

    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(tinycolor(hsl));
    }
    return ret;
};
tinycolor.monochromatic = function(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h, s = hsv.s, v = hsv.v;
    var ret = [];
    var modification = 1 / results;

    while (results--) {
        ret.push(tinycolor({ h: h, s: s, v: v}));
        v = (v + modification) % 1;
    }

    return ret;
};


// Readability Functions
// ---------------------
// <http://www.w3.org/TR/AERT#color-contrast>

// `readability`
// Analyze the 2 colors and returns an object with the following properties:
//    `brightness`: difference in brightness between the two colors
//    `color`: difference in color/hue between the two colors
tinycolor.readability = function(color1, color2) {
    var a = tinycolor(color1).toRgb();
    var b = tinycolor(color2).toRgb();
    var brightnessA = (a.r * 299 + a.g * 587 + a.b * 114) / 1000;
    var brightnessB = (b.r * 299 + b.g * 587 + b.b * 114) / 1000;
    var colorDiff = (
        Math.max(a.r, b.r) - Math.min(a.r, b.r) +
        Math.max(a.g, b.g) - Math.min(a.g, b.g) +
        Math.max(a.b, b.b) - Math.min(a.b, b.b)
    );

    return {
        brightness: Math.abs(brightnessA - brightnessB),
        color: colorDiff
    };
};

// `readable`
// http://www.w3.org/TR/AERT#color-contrast
// Ensure that foreground and background color combinations provide sufficient contrast.
// *Example*
//    tinycolor.readable("#000", "#111") => false
tinycolor.readable = function(color1, color2) {
    var readability = tinycolor.readability(color1, color2);
    return readability.brightness > 125 && readability.color > 500;
};

// `mostReadable`
// Given a base color and a list of possible foreground or background
// colors for that base, returns the most readable color.
// *Example*
//    tinycolor.mostReadable("#123", ["#fff", "#000"]) => "#000"
tinycolor.mostReadable = function(baseColor, colorList) {
    var bestColor = null;
    var bestScore = 0;
    var bestIsReadable = false;
    for (var i=0; i < colorList.length; i++) {

        // We normalize both around the "acceptable" breaking point,
        // but rank brightness constrast higher than hue.

        var readability = tinycolor.readability(baseColor, colorList[i]);
        var readable = readability.brightness > 125 && readability.color > 500;
        var score = 3 * (readability.brightness / 125) + (readability.color / 500);

        if ((readable && ! bestIsReadable) ||
            (readable && bestIsReadable && score > bestScore) ||
            ((! readable) && (! bestIsReadable) && score > bestScore)) {
            bestIsReadable = readable;
            bestScore = score;
            bestColor = tinycolor(colorList[i]);
        }
    }
    return bestColor;
};


// Big List of Colors
// ------------------
// <http://www.w3.org/TR/css3-color/#svg-color>
var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
};

// Make it easy to access colors via `hexNames[hex]`
var hexNames = tinycolor.hexNames = flip(names);


// Utilities
// ---------

// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
function flip(o) {
    var flipped = { };
    for (var i in o) {
        if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
        }
    }
    return flipped;
}

// Return a valid alpha value [0,1] with all invalid values being set to 1
function boundAlpha(a) {
    a = parseFloat(a);

    if (isNaN(a) || a < 0 || a > 1) {
        a = 1;
    }

    return a;
}

// Take input from [0, n] and return it as [0, 1]
function bound01(n, max) {
    if (isOnePointZero(n)) { n = "100%"; }

    var processPercent = isPercentage(n);
    n = mathMin(max, mathMax(0, parseFloat(n)));

    // Automatically convert percentage into number
    if (processPercent) {
        n = parseInt(n * max, 10) / 100;
    }

    // Handle floating point rounding errors
    if ((math.abs(n - max) < 0.000001)) {
        return 1;
    }

    // Convert into [0, 1] range if it isn't already
    return (n % max) / parseFloat(max);
}

// Force a number between 0 and 1
function clamp01(val) {
    return mathMin(1, mathMax(0, val));
}

// Parse a base-16 hex value into a base-10 integer
function parseIntFromHex(val) {
    return parseInt(val, 16);
}

// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
}

// Check to see if string passed in is a percentage
function isPercentage(n) {
    return typeof n === "string" && n.indexOf('%') != -1;
}

// Force a hex value to have 2 characters
function pad2(c) {
    return c.length == 1 ? '0' + c : '' + c;
}

// Replace a decimal with it's percentage value
function convertToPercentage(n) {
    if (n <= 1) {
        n = (n * 100) + "%";
    }

    return n;
}

// Converts a decimal to a hex value
function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
}
// Converts a hex value to a decimal
function convertHexToDecimal(h) {
    return (parseIntFromHex(h) / 255);
}

var matchers = (function() {

    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = "[-\\+]?\\d+%?";

    // <http://www.w3.org/TR/css3-values/#number-value>
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

    // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

    return {
        rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
        rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
        hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
        hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
        hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
        hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
        hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
})();

// `stringInputToObject`
// Permissive string parsing.  Take in a number of formats, and output an object
// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
function stringInputToObject(color) {

    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();
    var named = false;
    if (names[color]) {
        color = names[color];
        named = true;
    }
    else if (color == 'transparent') {
        return { r: 0, g: 0, b: 0, a: 0, format: "name" };
    }

    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    var match;
    if ((match = matchers.rgb.exec(color))) {
        return { r: match[1], g: match[2], b: match[3] };
    }
    if ((match = matchers.rgba.exec(color))) {
        return { r: match[1], g: match[2], b: match[3], a: match[4] };
    }
    if ((match = matchers.hsl.exec(color))) {
        return { h: match[1], s: match[2], l: match[3] };
    }
    if ((match = matchers.hsla.exec(color))) {
        return { h: match[1], s: match[2], l: match[3], a: match[4] };
    }
    if ((match = matchers.hsv.exec(color))) {
        return { h: match[1], s: match[2], v: match[3] };
    }
    if ((match = matchers.hex8.exec(color))) {
        return {
            a: convertHexToDecimal(match[1]),
            r: parseIntFromHex(match[2]),
            g: parseIntFromHex(match[3]),
            b: parseIntFromHex(match[4]),
            format: named ? "name" : "hex8"
        };
    }
    if ((match = matchers.hex6.exec(color))) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
        };
    }
    if ((match = matchers.hex3.exec(color))) {
        return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            format: named ? "name" : "hex"
        };
    }

    return false;
}

// Node: Export function
if (typeof module !== "undefined" && module.exports) {
    module.exports = tinycolor;
}
// AMD/requirejs: Define the module
else if (typeof define === 'function' && define.amd) {
    define(function () {return tinycolor;});
}
// Browser: Expose to window
else {
    window.tinycolor = tinycolor;
}

})();//     Underscore.js 1.6.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.6.0';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return obj;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, length = obj.length; i < length; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
      }
    }
    return obj;
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var result;
    any(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
    each(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, function(value, index, list) {
      return !predicate.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);
    each(obj, function(value, index, list) {
      if (!(result = result && predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
    each(obj, function(value, index, list) {
      if (result || (result = predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    var result = -Infinity, lastComputed = -Infinity;
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed > lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    var result = Infinity, lastComputed = Infinity;
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed < lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };

  // Shuffle an array, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisherâ€“Yates_shuffle).
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return value;
    return _.property(value);
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, iterator, context) {
    iterator = lookupIterator(iterator);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iterator, context) {
      var result = {};
      iterator = lookupIterator(iterator);
      each(obj, function(value, index) {
        var key = iterator.call(context, value, index, obj);
        behavior(result, key, value);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, key, value) {
    _.has(result, key) ? result[key].push(value) : result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, key, value) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, key) {
    _.has(result, key) ? result[key]++ : result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[0];
    if (n < 0) return [];
    return slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    each(input, function(value) {
      if (_.isArray(value) || _.isArguments(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Split an array into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(array, predicate) {
    var pass = [], fail = [];
    each(array, function(elem) {
      (predicate(elem) ? pass : fail).push(elem);
    });
    return [pass, fail];
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(_.flatten(arguments, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.contains(other, item);
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var length = _.max(_.pluck(arguments, 'length').concat(0));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, '' + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(length);

    while(idx < length) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    return function() {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _) args[i] = arguments[position++];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) throw new Error('bindAll must be passed function names');
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    options || (options = {});
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;
      if (last < wait) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = new Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = new Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                             _.isFunction(bCtor) && (bCtor instanceof bCtor))
                        && ('constructor' in a && 'constructor' in b)) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  _.constant = function(value) {
    return function () {
      return value;
    };
  };

  _.property = function(key) {
    return function(obj) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
  _.matches = function(attrs) {
    return function(obj) {
      if (obj === attrs) return true; //avoid comparing an object to itself.
      for (var key in attrs) {
        if (attrs[key] !== obj[key])
          return false;
      }
      return true;
    }
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(Math.max(0, n));
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() { return new Date().getTime(); };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}).call(this);//  Underscore.string
//  (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>
//  Underscore.string is freely distributable under the terms of the MIT license.
//  Documentation: https://github.com/epeli/underscore.string
//  Some code is borrowed from MooTools and Alexandru Marasteanu.
//  Version '2.3.2'

!function(root, String){
  'use strict';

  // Defining helper functions.

  var nativeTrim = String.prototype.trim;
  var nativeTrimRight = String.prototype.trimRight;
  var nativeTrimLeft = String.prototype.trimLeft;

  var parseNumber = function(source) { return source * 1 || 0; };

  var strRepeat = function(str, qty){
    if (qty < 1) return '';
    var result = '';
    while (qty > 0) {
      if (qty & 1) result += str;
      qty >>= 1, str += str;
    }
    return result;
  };

  var slice = [].slice;

  var defaultToWhiteSpace = function(characters) {
    if (characters == null)
      return '\\s';
    else if (characters.source)
      return characters.source;
    else
      return '[' + _s.escapeRegExp(characters) + ']';
  };

  // Helper for toBoolean
  function boolMatch(s, matchers) {
    var i, matcher, down = s.toLowerCase();
    matchers = [].concat(matchers);
    for (i = 0; i < matchers.length; i += 1) {
      matcher = matchers[i];
      if (!matcher) continue;
      if (matcher.test && matcher.test(s)) return true;
      if (matcher.toLowerCase() === down) return true;
    }
  }

  var escapeChars = {
    lt: '<',
    gt: '>',
    quot: '"',
    amp: '&',
    apos: "'"
  };

  var reversedEscapeChars = {};
  for(var key in escapeChars) reversedEscapeChars[escapeChars[key]] = key;
  reversedEscapeChars["'"] = '#39';

  // sprintf() for JavaScript 0.7-beta1
  // http://www.diveintojavascript.com/projects/javascript-sprintf
  //
  // Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>
  // All rights reserved.

  var sprintf = (function() {
    function get_type(variable) {
      return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
    }

    var str_repeat = strRepeat;

    var str_format = function() {
      if (!str_format.cache.hasOwnProperty(arguments[0])) {
        str_format.cache[arguments[0]] = str_format.parse(arguments[0]);
      }
      return str_format.format.call(null, str_format.cache[arguments[0]], arguments);
    };

    str_format.format = function(parse_tree, argv) {
      var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;
      for (i = 0; i < tree_length; i++) {
        node_type = get_type(parse_tree[i]);
        if (node_type === 'string') {
          output.push(parse_tree[i]);
        }
        else if (node_type === 'array') {
          match = parse_tree[i]; // convenience purposes only
          if (match[2]) { // keyword argument
            arg = argv[cursor];
            for (k = 0; k < match[2].length; k++) {
              if (!arg.hasOwnProperty(match[2][k])) {
                throw new Error(sprintf('[_.sprintf] property "%s" does not exist', match[2][k]));
              }
              arg = arg[match[2][k]];
            }
          } else if (match[1]) { // positional argument (explicit)
            arg = argv[match[1]];
          }
          else { // positional argument (implicit)
            arg = argv[cursor++];
          }

          if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {
            throw new Error(sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));
          }
          switch (match[8]) {
            case 'b': arg = arg.toString(2); break;
            case 'c': arg = String.fromCharCode(arg); break;
            case 'd': arg = parseInt(arg, 10); break;
            case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;
            case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;
            case 'o': arg = arg.toString(8); break;
            case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;
            case 'u': arg = Math.abs(arg); break;
            case 'x': arg = arg.toString(16); break;
            case 'X': arg = arg.toString(16).toUpperCase(); break;
          }
          arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);
          pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';
          pad_length = match[6] - String(arg).length;
          pad = match[6] ? str_repeat(pad_character, pad_length) : '';
          output.push(match[5] ? arg + pad : pad + arg);
        }
      }
      return output.join('');
    };

    str_format.cache = {};

    str_format.parse = function(fmt) {
      var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
      while (_fmt) {
        if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
          parse_tree.push(match[0]);
        }
        else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
          parse_tree.push('%');
        }
        else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {
          if (match[2]) {
            arg_names |= 1;
            var field_list = [], replacement_field = match[2], field_match = [];
            if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
              field_list.push(field_match[1]);
              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else {
                  throw new Error('[_.sprintf] huh?');
                }
              }
            }
            else {
              throw new Error('[_.sprintf] huh?');
            }
            match[2] = field_list;
          }
          else {
            arg_names |= 2;
          }
          if (arg_names === 3) {
            throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');
          }
          parse_tree.push(match);
        }
        else {
          throw new Error('[_.sprintf] huh?');
        }
        _fmt = _fmt.substring(match[0].length);
      }
      return parse_tree;
    };

    return str_format;
  })();



  // Defining underscore.string

  var _s = {

    VERSION: '2.3.0',

    isBlank: function(str){
      if (str == null) str = '';
      return (/^\s*$/).test(str);
    },

    stripTags: function(str){
      if (str == null) return '';
      return String(str).replace(/<\/?[^>]+>/g, '');
    },

    capitalize : function(str){
      str = str == null ? '' : String(str);
      return str.charAt(0).toUpperCase() + str.slice(1);
    },

    chop: function(str, step){
      if (str == null) return [];
      str = String(str);
      step = ~~step;
      return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];
    },

    clean: function(str){
      return _s.strip(str).replace(/\s+/g, ' ');
    },

    count: function(str, substr){
      if (str == null || substr == null) return 0;

      str = String(str);
      substr = String(substr);

      var count = 0,
        pos = 0,
        length = substr.length;

      while (true) {
        pos = str.indexOf(substr, pos);
        if (pos === -1) break;
        count++;
        pos += length;
      }

      return count;
    },

    chars: function(str) {
      if (str == null) return [];
      return String(str).split('');
    },

    swapCase: function(str) {
      if (str == null) return '';
      return String(str).replace(/\S/g, function(c){
        return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();
      });
    },

    escapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/[&<>"']/g, function(m){ return '&' + reversedEscapeChars[m] + ';'; });
    },

    unescapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/\&([^;]+);/g, function(entity, entityCode){
        var match;

        if (entityCode in escapeChars) {
          return escapeChars[entityCode];
        } else if (match = entityCode.match(/^#x([\da-fA-F]+)$/)) {
          return String.fromCharCode(parseInt(match[1], 16));
        } else if (match = entityCode.match(/^#(\d+)$/)) {
          return String.fromCharCode(~~match[1]);
        } else {
          return entity;
        }
      });
    },

    escapeRegExp: function(str){
      if (str == null) return '';
      return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    },

    splice: function(str, i, howmany, substr){
      var arr = _s.chars(str);
      arr.splice(~~i, ~~howmany, substr);
      return arr.join('');
    },

    insert: function(str, i, substr){
      return _s.splice(str, i, 0, substr);
    },

    include: function(str, needle){
      if (needle === '') return true;
      if (str == null) return false;
      return String(str).indexOf(needle) !== -1;
    },

    join: function() {
      var args = slice.call(arguments),
        separator = args.shift();

      if (separator == null) separator = '';

      return args.join(separator);
    },

    lines: function(str) {
      if (str == null) return [];
      return String(str).split("\n");
    },

    reverse: function(str){
      return _s.chars(str).reverse().join('');
    },

    startsWith: function(str, starts){
      if (starts === '') return true;
      if (str == null || starts == null) return false;
      str = String(str); starts = String(starts);
      return str.length >= starts.length && str.slice(0, starts.length) === starts;
    },

    endsWith: function(str, ends){
      if (ends === '') return true;
      if (str == null || ends == null) return false;
      str = String(str); ends = String(ends);
      return str.length >= ends.length && str.slice(str.length - ends.length) === ends;
    },

    succ: function(str){
      if (str == null) return '';
      str = String(str);
      return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length-1) + 1);
    },

    titleize: function(str){
      if (str == null) return '';
      str  = String(str).toLowerCase();
      return str.replace(/(?:^|\s|-)\S/g, function(c){ return c.toUpperCase(); });
    },

    camelize: function(str){
      return _s.trim(str).replace(/[-_\s]+(.)?/g, function(match, c){ return c ? c.toUpperCase() : ""; });
    },

    underscored: function(str){
      return _s.trim(str).replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/[-\s]+/g, '_').toLowerCase();
    },

    dasherize: function(str){
      return _s.trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\s]+/g, '-').toLowerCase();
    },

    classify: function(str){
      return _s.titleize(String(str).replace(/[\W_]/g, ' ')).replace(/\s/g, '');
    },

    humanize: function(str){
      return _s.capitalize(_s.underscored(str).replace(/_id$/,'').replace(/_/g, ' '));
    },

    trim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrim) return nativeTrim.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('\^' + characters + '+|' + characters + '+$', 'g'), '');
    },

    ltrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('^' + characters + '+'), '');
    },

    rtrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimRight) return nativeTrimRight.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp(characters + '+$'), '');
    },

    truncate: function(str, length, truncateStr){
      if (str == null) return '';
      str = String(str); truncateStr = truncateStr || '...';
      length = ~~length;
      return str.length > length ? str.slice(0, length) + truncateStr : str;
    },

    /**
     * _s.prune: a more elegant version of truncate
     * prune extra chars, never leaving a half-chopped word.
     * @author github.com/rwz
     */
    prune: function(str, length, pruneStr){
      if (str == null) return '';

      str = String(str); length = ~~length;
      pruneStr = pruneStr != null ? String(pruneStr) : '...';

      if (str.length <= length) return str;

      var tmpl = function(c){ return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' '; },
        template = str.slice(0, length+1).replace(/.(?=\W*\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'

      if (template.slice(template.length-2).match(/\w\w/))
        template = template.replace(/\s*\S+$/, '');
      else
        template = _s.rtrim(template.slice(0, template.length-1));

      return (template+pruneStr).length > str.length ? str : str.slice(0, template.length)+pruneStr;
    },

    words: function(str, delimiter) {
      if (_s.isBlank(str)) return [];
      return _s.trim(str, delimiter).split(delimiter || /\s+/);
    },

    pad: function(str, length, padStr, type) {
      str = str == null ? '' : String(str);
      length = ~~length;

      var padlen  = 0;

      if (!padStr)
        padStr = ' ';
      else if (padStr.length > 1)
        padStr = padStr.charAt(0);

      switch(type) {
        case 'right':
          padlen = length - str.length;
          return str + strRepeat(padStr, padlen);
        case 'both':
          padlen = length - str.length;
          return strRepeat(padStr, Math.ceil(padlen/2)) + str
                  + strRepeat(padStr, Math.floor(padlen/2));
        default: // 'left'
          padlen = length - str.length;
          return strRepeat(padStr, padlen) + str;
        }
    },

    lpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr);
    },

    rpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'right');
    },

    lrpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'both');
    },

    sprintf: sprintf,

    vsprintf: function(fmt, argv){
      argv.unshift(fmt);
      return sprintf.apply(null, argv);
    },

    toNumber: function(str, decimals) {
      if (!str) return 0;
      str = _s.trim(str);
      if (!str.match(/^-?\d+(?:\.\d+)?$/)) return NaN;
      return parseNumber(parseNumber(str).toFixed(~~decimals));
    },

    numberFormat : function(number, dec, dsep, tsep) {
      if (isNaN(number) || number == null) return '';

      number = number.toFixed(~~dec);
      tsep = typeof tsep == 'string' ? tsep : ',';

      var parts = number.split('.'), fnums = parts[0],
        decimals = parts[1] ? (dsep || '.') + parts[1] : '';

      return fnums.replace(/(\d)(?=(?:\d{3})+$)/g, '$1' + tsep) + decimals;
    },

    strRight: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strRightBack: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.lastIndexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strLeft: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    strLeftBack: function(str, sep){
      if (str == null) return '';
      str += ''; sep = sep != null ? ''+sep : sep;
      var pos = str.lastIndexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    toSentence: function(array, separator, lastSeparator, serial) {
      separator = separator || ', ';
      lastSeparator = lastSeparator || ' and ';
      var a = array.slice(), lastMember = a.pop();

      if (array.length > 2 && serial) lastSeparator = _s.rtrim(separator) + lastSeparator;

      return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;
    },

    toSentenceSerial: function() {
      var args = slice.call(arguments);
      args[3] = true;
      return _s.toSentence.apply(_s, args);
    },

    slugify: function(str) {
      if (str == null) return '';

      var from  = "ąàáäâãåæăćęèéëêìíïîłńòóöôõøśșțùúüûñçżź",
          to    = "aaaaaaaaaceeeeeiiiilnoooooosstuuuunczz",
          regex = new RegExp(defaultToWhiteSpace(from), 'g');

      str = String(str).toLowerCase().replace(regex, function(c){
        var index = from.indexOf(c);
        return to.charAt(index) || '-';
      });

      return _s.dasherize(str.replace(/[^\w\s-]/g, ''));
    },

    surround: function(str, wrapper) {
      return [wrapper, str, wrapper].join('');
    },

    quote: function(str, quoteChar) {
      return _s.surround(str, quoteChar || '"');
    },

    unquote: function(str, quoteChar) {
      quoteChar = quoteChar || '"';
      if (str[0] === quoteChar && str[str.length-1] === quoteChar)
        return str.slice(1,str.length-1);
      else return str;
    },

    exports: function() {
      var result = {};

      for (var prop in this) {
        if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse)$/)) continue;
        result[prop] = this[prop];
      }

      return result;
    },

    repeat: function(str, qty, separator){
      if (str == null) return '';

      qty = ~~qty;

      // using faster implementation if separator is not needed;
      if (separator == null) return strRepeat(String(str), qty);

      // this one is about 300x slower in Google Chrome
      for (var repeat = []; qty > 0; repeat[--qty] = str) {}
      return repeat.join(separator);
    },

    naturalCmp: function(str1, str2){
      if (str1 == str2) return 0;
      if (!str1) return -1;
      if (!str2) return 1;

      var cmpRegex = /(\.\d+)|(\d+)|(\D+)/g,
        tokens1 = String(str1).toLowerCase().match(cmpRegex),
        tokens2 = String(str2).toLowerCase().match(cmpRegex),
        count = Math.min(tokens1.length, tokens2.length);

      for(var i = 0; i < count; i++) {
        var a = tokens1[i], b = tokens2[i];

        if (a !== b){
          var num1 = parseInt(a, 10);
          if (!isNaN(num1)){
            var num2 = parseInt(b, 10);
            if (!isNaN(num2) && num1 - num2)
              return num1 - num2;
          }
          return a < b ? -1 : 1;
        }
      }

      if (tokens1.length === tokens2.length)
        return tokens1.length - tokens2.length;

      return str1 < str2 ? -1 : 1;
    },

    levenshtein: function(str1, str2) {
      if (str1 == null && str2 == null) return 0;
      if (str1 == null) return String(str2).length;
      if (str2 == null) return String(str1).length;

      str1 = String(str1); str2 = String(str2);

      var current = [], prev, value;

      for (var i = 0; i <= str2.length; i++)
        for (var j = 0; j <= str1.length; j++) {
          if (i && j)
            if (str1.charAt(j - 1) === str2.charAt(i - 1))
              value = prev;
            else
              value = Math.min(current[j], current[j - 1], prev) + 1;
          else
            value = i + j;

          prev = current[j];
          current[j] = value;
        }

      return current.pop();
    },

    toBoolean: function(str, trueValues, falseValues) {
      if (typeof str === "number") str = "" + str;
      if (typeof str !== "string") return !!str;
      str = _s.trim(str);
      if (boolMatch(str, trueValues || ["true", "1"])) return true;
      if (boolMatch(str, falseValues || ["false", "0"])) return false;
    }
  };

  // Aliases

  _s.strip    = _s.trim;
  _s.lstrip   = _s.ltrim;
  _s.rstrip   = _s.rtrim;
  _s.center   = _s.lrpad;
  _s.rjust    = _s.lpad;
  _s.ljust    = _s.rpad;
  _s.contains = _s.include;
  _s.q        = _s.quote;
  _s.toBool   = _s.toBoolean;

  // Exporting

  // CommonJS module is defined
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports)
      module.exports = _s;

    exports._s = _s;
  }

  // Register as a named module with AMD.
  if (typeof define === 'function' && define.amd)
    define('underscore.string', [], function(){ return _s; });


  // Integrate with Underscore.js if defined
  // or create our own underscore object.
  root._ = root._ || {};
  root._.string = root._.str = _s;
}(this, String);//     Backbone.js 1.1.2

//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(root, factory) {

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (typeof define === 'function' && define.amd) {
    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    });

  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if (typeof exports !== 'undefined') {
    var _ = require('underscore');
    factory(root, exports, _);

  // Finally, as a browser global.
  } else {
    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(this, function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create local references to array methods we'll want to use later.
  var array = [];
  var slice = array.slice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.1.2';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function(name, callback, context) {
      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({callback: callback, context: context, ctx: context || this});
      return this;
    },

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function(name, callback, context) {
      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
      var self = this;
      var once = _.once(function() {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function(name, callback, context) {
      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;

      // Remove all callbacks for all events.
      if (!name && !callback && !context) {
        this._events = void 0;
        return this;
      }

      var names = name ? [name] : _.keys(this._events);
      for (var i = 0, length = names.length; i < length; i++) {
        name = names[i];

        // Bail out if there are no events stored.
        var events = this._events[name];
        if (!events) continue;

        // Remove all callbacks for this event.
        if (!callback && !context) {
          delete this._events[name];
          continue;
        }

        // Find any remaining events.
        var remaining = [];
        for (var j = 0, k = events.length; j < k; j++) {
          var event = events[j];
          if (
            callback && callback !== event.callback &&
            callback !== event.callback._callback ||
            context && context !== event.context
          ) {
            remaining.push(event);
          }
        }

        // Replace events if there are any remaining.  Otherwise, clean up.
        if (remaining.length) {
          this._events[name] = remaining;
        } else {
          delete this._events[name];
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(name) {
      if (!this._events) return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args)) return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, arguments);
      return this;
    },

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function(obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo) return this;
      var remove = !name && !callback;
      if (!callback && typeof name === 'object') callback = this;
      if (obj) (listeningTo = {})[obj._listenId] = obj;
      for (var id in listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, this);
        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
      }
      return this;
    }

  };

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function(obj, action, name, rest) {
    if (!name) return true;

    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      return false;
    }

    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, length = names.length; i < length; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }

    return true;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};

  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function(implementation, method) {
    Events[method] = function(obj, name, callback) {
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
      listeningTo[id] = obj;
      if (!callback && typeof name === 'object') callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId('c');
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      unset           = options.unset;
      silent          = options.silent;
      changes         = [];
      changing        = this._changing;
      this._changing  = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0, length = changes.length; i < length; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], (val = diff[attr]))) continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        if (!model.set(model.parse(resp, options), options)) return false;
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      var attrs, method, xhr, attributes = this.attributes;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true}, options);

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !options.wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // Set temporary attributes if `{wait: true}`.
      if (attrs && options.wait) {
        this.attributes = _.extend({}, attributes, attrs);
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = model.parse(resp, options);
        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
          return false;
        }
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch') options.attrs = attrs;
      xhr = this.sync(method, this, options);

      // Restore attributes.
      if (attrs && options.wait) this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;

      var destroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (options.wait || model.isNew()) destroy();
        if (success) success(model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      if (this.isNew()) {
        options.success();
        return false;
      }
      wrapError(this, options);

      var xhr = this.sync('delete', this, options);
      if (!options.wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      return base.replace(/([^\/])$/, '$1/') + encodeURIComponent(this.id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.extend(options || {}, { validate: true }));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  _.each(modelMethods, function(method) {
    if (!_[method]) return;
    Model.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.attributes);
      return _[method].apply(_, args);
    };
  });

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analogous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model){ return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      options || (options = {});
      for (var i = 0, length = models.length; i < length; i++) {
        var model = models[i] = this.get(models[i]);
        if (!model) continue;
        delete this._byId[model.id];
        delete this._byId[model.cid];
        var index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model, options);
      }
      return singular ? models[0] : models;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults({}, options, setOptions);
      if (options.parse) models = this.parse(models, options);
      var singular = !_.isArray(models);
      models = singular ? (models ? [models] : []) : models.slice();
      var id, model, attrs, existing, sort;
      var at = options.at;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};
      var add = options.add, merge = options.merge, remove = options.remove;
      var order = !sortable && add && remove ? [] : false;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (var i = 0, length = models.length; i < length; i++) {
        attrs = models[i] || {};
        if (this._isModel(attrs)) {
          id = model = attrs;
        } else {
          id = attrs[this.model.prototype.idAttribute || 'id'];
        }

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(id)) {
          if (remove) modelMap[existing.cid] = true;
          if (merge) {
            attrs = attrs === model ? model.attributes : attrs;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }
          models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(attrs, options);
          if (!model) continue;
          toAdd.push(model);
          this._addReference(model, options);
        }

        // Do not add multiple models with the same `id`.
        model = existing || model;
        if (!model) continue;
        if (order && (model.isNew() || !modelMap[model.id])) order.push(model);
        modelMap[model.id] = true;
      }

      // Remove nonexistent models if appropriate.
      if (remove) {
        for (var i = 0, length = this.length; i < length; i++) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this.remove(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length || (order && order.length)) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          for (var i = 0, length = toAdd.length; i < length; i++) {
            this.models.splice(at + i, 0, toAdd[i]);
          }
        } else {
          if (order) this.models.length = 0;
          var orderedModels = order || toAdd;
          for (var i = 0, length = orderedModels.length; i < length; i++) {
            this.models.push(orderedModels[i]);
          }
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        for (var i = 0, length = toAdd.length; i < length; i++) {
          (model = toAdd[i]).trigger('add', model, this, options);
        }
        if (sort || (order && order.length)) this.trigger('sort', this, options);
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options || (options = {});
      for (var i = 0, length = this.models.length; i < length; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
    },

    // Get the model at the given index.
    at: function(index) {
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      if (_.isEmpty(attrs)) return first ? void 0 : [];
      return this[first ? 'find' : 'filter'](function(model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) return false;
        }
        return true;
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success(collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      if (!(model = this._prepareModel(model, options))) return false;
      if (!options.wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp) {
        if (options.wait) collection.add(model, options);
        if (success) success(model, resp, options);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models, {
        model: this.model,
        comparator: this.comparator
      });
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (this._isModel(attrs)) {
        if (!attrs.collection) attrs.collection = this;
        return attrs;
      }
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Method for checking whether an object should be considered a model for
    // the purposes of adding to the collection.
    _isModel: function (model) {
      return model instanceof Model;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      if (model.id != null) this._byId[model.id] = model;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        if (model.id != null) this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',
    'lastIndexOf', 'isEmpty', 'chain', 'sample', 'partition'];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function(method) {
    if (!_[method]) return;
    Collection.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    if (!_[method]) return;
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    options || (options = {});
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this._removeElement();
      this.stopListening();
      return this;
    },

    // Remove this view's element from the document and all event listeners
    // attached to it. Exposed for subclasses using an alternative DOM
    // manipulation API.
    _removeElement: function() {
      this.$el.remove();
    },

    // Change the view's element (`this.el` property) and re-delegate the
    // view's events on the new element.
    setElement: function(element) {
      this.undelegateEvents();
      this._setElement(element);
      this.delegateEvents();
      return this;
    },

    // Creates the `this.el` and `this.$el` references for this view using the
    // given `el` and a hash of `attributes`. `el` can be a CSS selector or an
    // HTML string, a jQuery context or an element. Subclasses can override
    // this to utilize an alternative DOM manipulation API and are only required
    // to set the `this.el` property.
    _setElement: function(el) {
      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);
      this.el = this.$el[0];
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    delegateEvents: function(events) {
      if (!(events || (events = _.result(this, 'events')))) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[events[key]];
        if (!method) continue;
        var match = key.match(delegateEventSplitter);
        this.delegate(match[1], match[2], _.bind(method, this));
      }
      return this;
    },

    // Add a single event listener to the view's element (or a child element
    // using `selector`). This only works for delegate-able events: not `focus`,
    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.
    delegate: function(eventName, selector, listener) {
      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);
    },

    // Clears all callbacks previously bound to the view by `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      if (this.$el) this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // A finer-grained `undelegateEvents` for removing a single delegated event.
    // `selector` and `listener` are both optional.
    undelegate: function(eventName, selector, listener) {
      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);
    },

    // Produces a DOM element to be assigned to your view. Exposed for
    // subclasses using an alternative DOM manipulation API.
    _createElement: function(tagName) {
      return document.createElement(tagName);
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        this.setElement(this._createElement(_.result(this, 'tagName')));
        this._setAttributes(attrs);
      } else {
        this.setElement(_.result(this, 'el'));
      }
    },

    // Set attributes from a hash on this view's element.  Exposed for
    // subclasses using an alternative DOM manipulation API.
    _setAttributes: function(attributes) {
      this.$el.attr(attributes);
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // If we're sending a `PATCH` request, and we're in an old Internet Explorer
    // that still has ActiveX enabled by default, override jQuery to use that
    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
    if (params.type === 'PATCH' && noXhrPatch) {
      params.xhr = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      };
    }

    // Pass along `textStatus` and `errorThrown` from jQuery.
    var error = options.error;
    options.error = function(xhr, textStatus, errorThrown) {
      options.textStatus = textStatus;
      options.errorThrown = errorThrown;
      if (error) error.apply(this, arguments);
    };

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  var noXhrPatch =
    typeof window !== 'undefined' && !!window.ActiveXObject &&
      !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        if (router.execute(callback, args, name) !== false) {
          router.trigger.apply(router, ['route:' + name].concat(args));
          router.trigger('route', name, args);
          Backbone.history.trigger('route', router, name, args);
        }
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args, name) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional) {
                     return optional ? match : '([^/?]+)';
                   })
                   .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      var path = this.location.pathname.replace(/[^\/]$/, '$&/');
      return path === this.root && !this.location.search;
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the pathname and search params, without the root.
    getPath: function() {
      var path = decodeURI(this.location.pathname + this.location.search);
      var root = this.root.slice(0, -1);
      if (!path.indexOf(root)) path = path.slice(root.length);
      return path.slice(1);
    },

    // Get the cross-browser normalized URL fragment from the path or hash.
    getFragment: function(fragment) {
      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange) {
          fragment = this.getPath();
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error("Backbone.history has already been started");
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._hasHashChange   = 'onhashchange' in window;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);
      this.fragment         = this.getFragment();
      
      // Add a cross-platform `addEventListener` shim for older browsers.
      var addEventListener = window.addEventListener || function (eventName, listener) {
        return attachEvent('on' + eventName, listener);
      };

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      // Proxy an iframe to handle location events if the browser doesn't
      // support the `hashchange` event, HTML5 history, or the user wants
      // `hashChange` but not `pushState`.
      if (!this._hasHashChange && this._wantsHashChange && (!this._wantsPushState || !this._hasPushState)) {
        var iframe = document.createElement('iframe');
        iframe.src = 'javascript:0';
        iframe.style.display = 'none';
        iframe.tabIndex = -1;
        var body = document.body;
        // Using `appendChild` will throw on IE < 9 if the document is not ready.
        this.iframe = body.insertBefore(iframe, body.firstChild).contentWindow;
        this.navigate(this.fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        addEventListener('popstate', this.checkUrl, false);
      } else if (this._wantsHashChange && this._hasHashChange && !this.iframe) {
        addEventListener('hashchange', this.checkUrl, false);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          this.location.replace(this.root + '#' + this.getPath());
          // Return immediately as browser will do redirect to new url
          return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot()) {
          this.navigate(this.getHash(), {replace: true});
        }

      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      // Add a cross-platform `removeEventListener` shim for older browsers.
      var removeEventListener = window.removeEventListener || function (eventName, listener) {
        return detachEvent('on' + eventName, listener);
      };

      // Remove window listeners.
      if (this._hasPushState) {
        removeEventListener('popstate', this.checkUrl, false);
      } else if (this._wantsHashChange && this._hasHashChange && !this.iframe) {
        removeEventListener('hashchange', this.checkUrl, false);
      }

      // Clean up the iframe if necessary.
      if (this.iframe) {
        document.body.removeChild(this.iframe.frameElement);
        this.iframe = null;
      }

      // Some environments will throw when clearing an undefined interval.
      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getHash(this.iframe);
      }
      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      fragment = this.fragment = this.getFragment(fragment);
      return _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      var url = this.root + (fragment = this.getFragment(fragment || ''));

      // Strip the hash and decode for matching.
      fragment = decodeURI(fragment.replace(pathStripper, ''));

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // Don't include a trailing slash on the root.
      if (fragment === '' && url !== '/') url = url.slice(0, -1);

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getHash(this.iframe))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if(!options.replace) this.iframe.document.open().close();
          this._updateHash(this.iframe.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error(model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;

}));// MarionetteJS (Backbone.Marionette)
// ----------------------------------
// v1.0.2
//
// Copyright (c)2013 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://marionettejs.com



/*!
 * Includes BabySitter
 * https://github.com/marionettejs/backbone.babysitter/
 *
 * Includes Wreqr
 * https://github.com/marionettejs/backbone.wreqr/
 */

// Backbone.BabySitter
// -------------------
// v0.0.5
//
// Copyright (c)2013 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://github.com/babysitterjs/backbone.babysitter

// Backbone.ChildViewContainer
// ---------------------------
//
// Provide a container to store, retrieve and
// shut down child views.

Backbone.ChildViewContainer = (function(Backbone, _){
  
  // Container Constructor
  // ---------------------

  var Container = function(initialViews){
    this._views = {};
    this._indexByModel = {};
    this._indexByCollection = {};
    this._indexByCustom = {};
    this._updateLength();

    this._addInitialViews(initialViews);
  };

  // Container Methods
  // -----------------

  _.extend(Container.prototype, {

    // Add a view to this container. Stores the view
    // by `cid` and makes it searchable by the model
    // and/or collection of the view. Optionally specify
    // a custom key to store an retrieve the view.
    add: function(view, customIndex){
      var viewCid = view.cid;

      // store the view
      this._views[viewCid] = view;

      // index it by model
      if (view.model){
        this._indexByModel[view.model.cid] = viewCid;
      }

      // index it by collection
      if (view.collection){
        this._indexByCollection[view.collection.cid] = viewCid;
      }

      // index by custom
      if (customIndex){
        this._indexByCustom[customIndex] = viewCid;
      }

      this._updateLength();
    },

    // Find a view by the model that was attached to
    // it. Uses the model's `cid` to find it, and
    // retrieves the view by it's `cid` from the result
    findByModel: function(model){
      var viewCid = this._indexByModel[model.cid];
      return this.findByCid(viewCid);
    },

    // Find a view by the collection that was attached to
    // it. Uses the collection's `cid` to find it, and
    // retrieves the view by it's `cid` from the result
    findByCollection: function(col){
      var viewCid = this._indexByCollection[col.cid];
      return this.findByCid(viewCid);
    },

    // Find a view by a custom indexer.
    findByCustom: function(index){
      var viewCid = this._indexByCustom[index];
      return this.findByCid(viewCid);
    },

    // Find by index. This is not guaranteed to be a
    // stable index.
    findByIndex: function(index){
      return _.values(this._views)[index];
    },

    // retrieve a view by it's `cid` directly
    findByCid: function(cid){
      return this._views[cid];
    },

    // Remove a view
    remove: function(view){
      var viewCid = view.cid;

      // delete model index
      if (view.model){
        delete this._indexByModel[view.model.cid];
      }

      // delete collection index
      if (view.collection){
        delete this._indexByCollection[view.collection.cid];
      }

      // delete custom index
      var cust;

      for (var key in this._indexByCustom){
        if (this._indexByCustom.hasOwnProperty(key)){
          if (this._indexByCustom[key] === viewCid){
            cust = key;
            break;
          }
        }
      }

      if (cust){
        delete this._indexByCustom[cust];
      }

      // remove the view from the container
      delete this._views[viewCid];

      // update the length
      this._updateLength();
    },

    // Call a method on every view in the container,
    // passing parameters to the call method one at a
    // time, like `function.call`.
    call: function(method, args){
      args = Array.prototype.slice.call(arguments, 1);
      this.apply(method, args);
    },

    // Apply a method on every view in the container,
    // passing parameters to the call method one at a
    // time, like `function.apply`.
    apply: function(method, args){
      var view;

      // fix for IE < 9
      args = args || [];

      _.each(this._views, function(view, key){
        if (_.isFunction(view[method])){
          view[method].apply(view, args);
        }
      });

    },

    // Update the `.length` attribute on this container
    _updateLength: function(){
      this.length = _.size(this._views);
    },

    // set up an initial list of views
    _addInitialViews: function(views){
      if (!views){ return; }

      var view, i,
          length = views.length;

      for (i=0; i<length; i++){
        view = views[i];
        this.add(view);
      }
    }
  });

  // Borrowing this code from Backbone.Collection:
  // http://backbonejs.org/docs/backbone.html#section-106
  //
  // Mix in methods from Underscore, for iteration, and other
  // collection related features.
  var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter', 
    'select', 'reject', 'every', 'all', 'some', 'any', 'include', 
    'contains', 'invoke', 'toArray', 'first', 'initial', 'rest', 
    'last', 'without', 'isEmpty', 'pluck'];

  _.each(methods, function(method) {
    Container.prototype[method] = function() {
      var views = _.values(this._views);
      var args = [views].concat(_.toArray(arguments));
      return _[method].apply(_, args);
    };
  });

  // return the public API
  return Container;
})(Backbone, _);

// Backbone.Wreqr (Backbone.Marionette)
// ----------------------------------
// v0.2.0
//
// Copyright (c)2013 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://github.com/marionettejs/backbone.wreqr


Backbone.Wreqr = (function(Backbone, Marionette, _){
  "use strict";
  var Wreqr = {};

  // Handlers
// --------
// A registry of functions to call, given a name

Wreqr.Handlers = (function(Backbone, _){
  "use strict";
  
  // Constructor
  // -----------

  var Handlers = function(options){
    this.options = options;
    this._wreqrHandlers = {};
    
    if (_.isFunction(this.initialize)){
      this.initialize(options);
    }
  };

  Handlers.extend = Backbone.Model.extend;

  // Instance Members
  // ----------------

  _.extend(Handlers.prototype, Backbone.Events, {

    // Add multiple handlers using an object literal configuration
    setHandlers: function(handlers){
      _.each(handlers, function(handler, name){
        var context = null;

        if (_.isObject(handler) && !_.isFunction(handler)){
          context = handler.context;
          handler = handler.callback;
        }

        this.setHandler(name, handler, context);
      }, this);
    },

    // Add a handler for the given name, with an
    // optional context to run the handler within
    setHandler: function(name, handler, context){
      var config = {
        callback: handler,
        context: context
      };

      this._wreqrHandlers[name] = config;

      this.trigger("handler:add", name, handler, context);
    },

    // Determine whether or not a handler is registered
    hasHandler: function(name){
      return !! this._wreqrHandlers[name];
    },

    // Get the currently registered handler for
    // the specified name. Throws an exception if
    // no handler is found.
    getHandler: function(name){
      var config = this._wreqrHandlers[name];

      if (!config){
        throw new Error("Handler not found for '" + name + "'");
      }

      return function(){
        var args = Array.prototype.slice.apply(arguments);
        return config.callback.apply(config.context, args);
      };
    },

    // Remove a handler for the specified name
    removeHandler: function(name){
      delete this._wreqrHandlers[name];
    },

    // Remove all handlers from this registry
    removeAllHandlers: function(){
      this._wreqrHandlers = {};
    }
  });

  return Handlers;
})(Backbone, _);

  // Wreqr.CommandStorage
// --------------------
//
// Store and retrieve commands for execution.
Wreqr.CommandStorage = (function(){
  "use strict";

  // Constructor function
  var CommandStorage = function(options){
    this.options = options;
    this._commands = {};

    if (_.isFunction(this.initialize)){
      this.initialize(options);
    }
  };

  // Instance methods
  _.extend(CommandStorage.prototype, Backbone.Events, {

    // Get an object literal by command name, that contains
    // the `commandName` and the `instances` of all commands
    // represented as an array of arguments to process
    getCommands: function(commandName){
      var commands = this._commands[commandName];

      // we don't have it, so add it
      if (!commands){

        // build the configuration
        commands = {
          command: commandName, 
          instances: []
        };

        // store it
        this._commands[commandName] = commands;
      }

      return commands;
    },

    // Add a command by name, to the storage and store the
    // args for the command
    addCommand: function(commandName, args){
      var command = this.getCommands(commandName);
      command.instances.push(args);
    },

    // Clear all commands for the given `commandName`
    clearCommands: function(commandName){
      var command = this.getCommands(commandName);
      command.instances = [];
    }
  });

  return CommandStorage;
})();

  // Wreqr.Commands
// --------------
//
// A simple command pattern implementation. Register a command
// handler and execute it.
Wreqr.Commands = (function(Wreqr){
  "use strict";

  return Wreqr.Handlers.extend({
    // default storage type
    storageType: Wreqr.CommandStorage,

    constructor: function(options){
      this.options = options || {};

      this._initializeStorage(this.options);
      this.on("handler:add", this._executeCommands, this);

      var args = Array.prototype.slice.call(arguments);
      Wreqr.Handlers.prototype.constructor.apply(this, args);
    },

    // Execute a named command with the supplied args
    execute: function(name, args){
      name = arguments[0];
      args = Array.prototype.slice.call(arguments, 1);

      if (this.hasHandler(name)){
        this.getHandler(name).apply(this, args);
      } else {
        this.storage.addCommand(name, args);
      }

    },

    // Internal method to handle bulk execution of stored commands
    _executeCommands: function(name, handler, context){
      var command = this.storage.getCommands(name);

      // loop through and execute all the stored command instances
      _.each(command.instances, function(args){
        handler.apply(context, args);
      });

      this.storage.clearCommands(name);
    },

    // Internal method to initialize storage either from the type's
    // `storageType` or the instance `options.storageType`.
    _initializeStorage: function(options){
      var storage;

      var StorageType = options.storageType || this.storageType;
      if (_.isFunction(StorageType)){
        storage = new StorageType();
      } else {
        storage = StorageType;
      }

      this.storage = storage;
    }
  });

})(Wreqr);

  // Wreqr.RequestResponse
// ---------------------
//
// A simple request/response implementation. Register a
// request handler, and return a response from it
Wreqr.RequestResponse = (function(Wreqr){
  "use strict";

  return Wreqr.Handlers.extend({
    request: function(){
      var name = arguments[0];
      var args = Array.prototype.slice.call(arguments, 1);

      return this.getHandler(name).apply(this, args);
    }
  });

})(Wreqr);

  // Event Aggregator
// ----------------
// A pub-sub object that can be used to decouple various parts
// of an application through event-driven architecture.

Wreqr.EventAggregator = (function(Backbone, _){
  "use strict";
  var EA = function(){};

  // Copy the `extend` function used by Backbone's classes
  EA.extend = Backbone.Model.extend;

  // Copy the basic Backbone.Events on to the event aggregator
  _.extend(EA.prototype, Backbone.Events);

  return EA;
})(Backbone, _);


  return Wreqr;
})(Backbone, Backbone.Marionette, _);

var Marionette = (function(global, Backbone, _){
  "use strict";

  // Define and export the Marionette namespace
  var Marionette = {};
  Backbone.Marionette = Marionette;

  // Get the DOM manipulator for later use
  Marionette.$ = Backbone.$;

// Helpers
// -------

// For slicing `arguments` in functions
var protoSlice = Array.prototype.slice;
function slice(args) {
  return protoSlice.call(args);
}

function throwError(message, name) {
  var error = new Error(message);
  error.name = name || 'Error';
  throw error;
}

// Marionette.extend
// -----------------

// Borrow the Backbone `extend` method so we can use it as needed
Marionette.extend = Backbone.Model.extend;

// Marionette.getOption
// --------------------

// Retrieve an object, function or other value from a target
// object or it's `options`, with `options` taking precedence.
Marionette.getOption = function(target, optionName){
  if (!target || !optionName){ return; }
  var value;
  if (target.options && (optionName in target.options) && (target.options[optionName] !== undefined)){
    value = target.options[optionName];
  } else {
    value = target[optionName];
  }

  return value;
};

// Trigger an event and a corresponding method name. Examples:
//
// `this.triggerMethod("foo")` will trigger the "foo" event and
// call the "onFoo" method. 
//
// `this.triggerMethod("foo:bar") will trigger the "foo:bar" event and
// call the "onFooBar" method.
Marionette.triggerMethod = (function(){
  
  // split the event name on the :
  var splitter = /(^|:)(\w)/gi;

  // take the event section ("section1:section2:section3")
  // and turn it in to uppercase name
  function getEventName(match, prefix, eventName) { 
    return eventName.toUpperCase();
  }

  // actual triggerMethod name
  var triggerMethod = function(event) {
    // get the method name from the event name
    var methodName = 'on' + event.replace(splitter, getEventName);
    var method = this[methodName];

    // trigger the event
    this.trigger.apply(this, arguments);

    // call the onMethodName if it exists
    if (_.isFunction(method)) {
      // pass all arguments, except the event name
      return method.apply(this, _.tail(arguments));
    }
  };

  return triggerMethod;
})();

// DOMRefresh
// ----------
//
// Monitor a view's state, and after it has been rendered and shown
// in the DOM, trigger a "dom:refresh" event every time it is
// re-rendered.

Marionette.MonitorDOMRefresh = (function(){
  // track when the view has been rendered
  function handleShow(view){
    view._isShown = true;
    triggerDOMRefresh(view);
  }

  // track when the view has been shown in the DOM,
  // using a Marionette.Region (or by other means of triggering "show")
  function handleRender(view){
    view._isRendered = true;
    triggerDOMRefresh(view);
  }

  // Trigger the "dom:refresh" event and corresponding "onDomRefresh" method
  function triggerDOMRefresh(view){
    if (view._isShown && view._isRendered){
      if (_.isFunction(view.triggerMethod)){
        view.triggerMethod("dom:refresh");
      }
    }
  }

  // Export public API
  return function(view){
    view.listenTo(view, "show", function(){
      handleShow(view);
    });

    view.listenTo(view, "render", function(){
      handleRender(view);
    });
  };
})();


// Marionette.bindEntityEvents & unbindEntityEvents
// ---------------------------
//
// These methods are used to bind/unbind a backbone "entity" (collection/model) 
// to methods on a target object. 
//
// The first parameter, `target`, must have a `listenTo` method from the
// EventBinder object.
//
// The second parameter is the entity (Backbone.Model or Backbone.Collection)
// to bind the events from.
//
// The third parameter is a hash of { "event:name": "eventHandler" }
// configuration. Multiple handlers can be separated by a space. A
// function can be supplied instead of a string handler name. 

(function(Marionette){
  "use strict";

  // Bind the event to handlers specified as a string of
  // handler names on the target object
  function bindFromStrings(target, entity, evt, methods){
    var methodNames = methods.split(/\s+/);

    _.each(methodNames,function(methodName) {

      var method = target[methodName];
      if(!method) {
        throwError("Method '"+ methodName +"' was configured as an event handler, but does not exist.");
      }

      target.listenTo(entity, evt, method, target);
    });
  }

  // Bind the event to a supplied callback function
  function bindToFunction(target, entity, evt, method){
      target.listenTo(entity, evt, method, target);
  }

  // Bind the event to handlers specified as a string of
  // handler names on the target object
  function unbindFromStrings(target, entity, evt, methods){
    var methodNames = methods.split(/\s+/);

    _.each(methodNames,function(methodName) {
      var method = target[method];
      target.stopListening(entity, evt, method, target);
    });
  }

  // Bind the event to a supplied callback function
  function unbindToFunction(target, entity, evt, method){
      target.stopListening(entity, evt, method, target);
  }

  
  // generic looping function
  function iterateEvents(target, entity, bindings, functionCallback, stringCallback){
    if (!entity || !bindings) { return; }

    // allow the bindings to be a function
    if (_.isFunction(bindings)){
      bindings = bindings.call(target);
    }

    // iterate the bindings and bind them
    _.each(bindings, function(methods, evt){

      // allow for a function as the handler, 
      // or a list of event names as a string
      if (_.isFunction(methods)){
        functionCallback(target, entity, evt, methods);
      } else {
        stringCallback(target, entity, evt, methods);
      }

    });
  }
 
  // Export Public API
  Marionette.bindEntityEvents = function(target, entity, bindings){
    iterateEvents(target, entity, bindings, bindToFunction, bindFromStrings);
  };

  Marionette.unbindEntityEvents = function(target, entity, bindings){
    iterateEvents(target, entity, bindings, unbindToFunction, unbindFromStrings);
  };

})(Marionette);


// Callbacks
// ---------

// A simple way of managing a collection of callbacks
// and executing them at a later point in time, using jQuery's
// `Deferred` object.
Marionette.Callbacks = function(){
  this._deferred = Marionette.$.Deferred();
  this._callbacks = [];
};

_.extend(Marionette.Callbacks.prototype, {

  // Add a callback to be executed. Callbacks added here are
  // guaranteed to execute, even if they are added after the 
  // `run` method is called.
  add: function(callback, contextOverride){
    this._callbacks.push({cb: callback, ctx: contextOverride});

    this._deferred.done(function(context, options){
      if (contextOverride){ context = contextOverride; }
      callback.call(context, options);
    });
  },

  // Run all registered callbacks with the context specified. 
  // Additional callbacks can be added after this has been run 
  // and they will still be executed.
  run: function(options, context){
    this._deferred.resolve(context, options);
  },

  // Resets the list of callbacks to be run, allowing the same list
  // to be run multiple times - whenever the `run` method is called.
  reset: function(){
    var callbacks = this._callbacks;
    this._deferred = Marionette.$.Deferred();
    this._callbacks = [];
    
    _.each(callbacks, function(cb){
      this.add(cb.cb, cb.ctx);
    }, this);
  }
});


// Marionette Controller
// ---------------------
//
// A multi-purpose object to use as a controller for
// modules and routers, and as a mediator for workflow
// and coordination of other objects, views, and more.
Marionette.Controller = function(options){
  this.triggerMethod = Marionette.triggerMethod;
  this.options = options || {};

  if (_.isFunction(this.initialize)){
    this.initialize(this.options);
  }
};

Marionette.Controller.extend = Marionette.extend;

// Controller Methods
// --------------

// Ensure it can trigger events with Backbone.Events
_.extend(Marionette.Controller.prototype, Backbone.Events, {
  close: function(){
    this.stopListening();
    this.triggerMethod("close");
    this.unbind();
  }
});

// Region 
// ------
//
// Manage the visual regions of your composite application. See
// http://lostechies.com/derickbailey/2011/12/12/composite-js-apps-regions-and-region-managers/

Marionette.Region = function(options){
  this.options = options || {};

  this.el = Marionette.getOption(this, "el");

  if (!this.el){
    var err = new Error("An 'el' must be specified for a region.");
    err.name = "NoElError";
    throw err;
  }

  if (this.initialize){
    var args = Array.prototype.slice.apply(arguments);
    this.initialize.apply(this, args);
  }
};


// Region Type methods
// -------------------

_.extend(Marionette.Region, {

  // Build an instance of a region by passing in a configuration object
  // and a default region type to use if none is specified in the config.
  //
  // The config object should either be a string as a jQuery DOM selector,
  // a Region type directly, or an object literal that specifies both
  // a selector and regionType:
  //
  // ```js
  // {
  //   selector: "#foo",
  //   regionType: MyCustomRegion
  // }
  // ```
  //
  buildRegion: function(regionConfig, defaultRegionType){
    var regionIsString = (typeof regionConfig === "string");
    var regionSelectorIsString = (typeof regionConfig.selector === "string");
    var regionTypeIsUndefined = (typeof regionConfig.regionType === "undefined");
    var regionIsType = (typeof regionConfig === "function");

    if (!regionIsType && !regionIsString && !regionSelectorIsString) {
      throw new Error("Region must be specified as a Region type, a selector string or an object with selector property");
    }

    var selector, RegionType;
   
    // get the selector for the region
    
    if (regionIsString) {
      selector = regionConfig;
    } 

    if (regionConfig.selector) {
      selector = regionConfig.selector;
    }

    // get the type for the region
    
    if (regionIsType){
      RegionType = regionConfig;
    }

    if (!regionIsType && regionTypeIsUndefined) {
      RegionType = defaultRegionType;
    }

    if (regionConfig.regionType) {
      RegionType = regionConfig.regionType;
    }
    
    // build the region instance
    var region = new RegionType({
      el: selector
    });

    // override the `getEl` function if we have a parentEl
    // this must be overridden to ensure the selector is found
    // on the first use of the region. if we try to assign the
    // region's `el` to `parentEl.find(selector)` in the object
    // literal to build the region, the element will not be
    // guaranteed to be in the DOM already, and will cause problems
    if (regionConfig.parentEl){

      region.getEl = function(selector) {
        var parentEl = regionConfig.parentEl;
        if (_.isFunction(parentEl)){
          parentEl = parentEl();
        }
        return parentEl.find(selector);
      };
    }

    return region;
  }

});

// Region Instance Methods
// -----------------------

_.extend(Marionette.Region.prototype, Backbone.Events, {

  // Displays a backbone view instance inside of the region.
  // Handles calling the `render` method for you. Reads content
  // directly from the `el` attribute. Also calls an optional
  // `onShow` and `close` method on your view, just after showing
  // or just before closing the view, respectively.
  show: function(view){

    this.ensureEl();

    if (view !== this.currentView) {
      this.close();
      view.render();
      this.open(view);
    } else {
      view.render();
    }

    Marionette.triggerMethod.call(view, "show");
    Marionette.triggerMethod.call(this, "show", view);

    this.currentView = view;
  },

  ensureEl: function(){
    if (!this.$el || this.$el.length === 0){
      this.$el = this.getEl(this.el);
    }
  },

  // Override this method to change how the region finds the
  // DOM element that it manages. Return a jQuery selector object.
  getEl: function(selector){
    return Marionette.$(selector);
  },

  // Override this method to change how the new view is
  // appended to the `$el` that the region is managing
  open: function(view){
    this.$el.empty().append(view.el);
  },

  // Close the current view, if there is one. If there is no
  // current view, it does nothing and returns immediately.
  close: function(){
    var view = this.currentView;
    if (!view || view.isClosed){ return; }

    // call 'close' or 'remove', depending on which is found
    if (view.close) { view.close(); }
    else if (view.remove) { view.remove(); }

    Marionette.triggerMethod.call(this, "close");

    delete this.currentView;
  },

  // Attach an existing view to the region. This 
  // will not call `render` or `onShow` for the new view, 
  // and will not replace the current HTML for the `el`
  // of the region.
  attachView: function(view){
    this.currentView = view;
  },

  // Reset the region by closing any existing view and
  // clearing out the cached `$el`. The next time a view
  // is shown via this region, the region will re-query the
  // DOM for the region's `el`.
  reset: function(){
    this.close();
    delete this.$el;
  }
});

// Copy the `extend` function used by Backbone's classes
Marionette.Region.extend = Marionette.extend;

// Marionette.RegionManager
// ------------------------
//
// Manage one or more related `Marionette.Region` objects.
Marionette.RegionManager = (function(Marionette){

  var RegionManager = Marionette.Controller.extend({
    constructor: function(options){
      this._regions = {};
      Marionette.Controller.prototype.constructor.call(this, options);
    },

    // Add multiple regions using an object literal, where
    // each key becomes the region name, and each value is
    // the region definition.
    addRegions: function(regionDefinitions, defaults){
      var regions = {};

      _.each(regionDefinitions, function(definition, name){
        if (typeof definition === "string"){
          definition = { selector: definition };
        }

        if (definition.selector){
          definition = _.defaults({}, definition, defaults);
        }

        var region = this.addRegion(name, definition);
        regions[name] = region;
      }, this);

      return regions;
    },

    // Add an individual region to the region manager,
    // and return the region instance
    addRegion: function(name, definition){
      var region;

      var isObject = _.isObject(definition);
      var isString = _.isString(definition);
      var hasSelector = !!definition.selector;

      if (isString || (isObject && hasSelector)){
        region = Marionette.Region.buildRegion(definition, Marionette.Region);
      } else if (_.isFunction(definition)){
        region = Marionette.Region.buildRegion(definition, Marionette.Region);
      } else {
        region = definition;
      }

      this._store(name, region);
      this.triggerMethod("region:add", name, region);
      return region;
    },

    // Get a region by name
    get: function(name){
      return this._regions[name];
    },

    // Remove a region by name
    removeRegion: function(name){
      var region = this._regions[name];
      this._remove(name, region);
    },

    // Close all regions in the region manager, and
    // remove them
    removeRegions: function(){
      _.each(this._regions, function(region, name){
        this._remove(name, region);
      }, this);
    },

    // Close all regions in the region manager, but
    // leave them attached
    closeRegions: function(){
      _.each(this._regions, function(region, name){
        region.close();
      }, this);
    },

    // Close all regions and shut down the region
    // manager entirely
    close: function(){
      this.removeRegions();
      var args = Array.prototype.slice.call(arguments);
      Marionette.Controller.prototype.close.apply(this, args);
    },

    // internal method to store regions
    _store: function(name, region){
      this._regions[name] = region;
      this.length = _.size(this._regions);
    },

    // internal method to remove a region
    _remove: function(name, region){
      region.close();
      delete this._regions[name];
      this.triggerMethod("region:remove", name, region);
    }

  });

  // Borrowing this code from Backbone.Collection:
  // http://backbonejs.org/docs/backbone.html#section-106
  //
  // Mix in methods from Underscore, for iteration, and other
  // collection related features.
  var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter', 
    'select', 'reject', 'every', 'all', 'some', 'any', 'include', 
    'contains', 'invoke', 'toArray', 'first', 'initial', 'rest', 
    'last', 'without', 'isEmpty', 'pluck'];

  _.each(methods, function(method) {
    RegionManager.prototype[method] = function() {
      var regions = _.values(this._regions);
      var args = [regions].concat(_.toArray(arguments));
      return _[method].apply(_, args);
    };
  });

  return RegionManager;
})(Marionette);


// Template Cache
// --------------

// Manage templates stored in `<script>` blocks,
// caching them for faster access.
Marionette.TemplateCache = function(templateId){
  this.templateId = templateId;
};

// TemplateCache object-level methods. Manage the template
// caches from these method calls instead of creating 
// your own TemplateCache instances
_.extend(Marionette.TemplateCache, {
  templateCaches: {},

  // Get the specified template by id. Either
  // retrieves the cached version, or loads it
  // from the DOM.
  get: function(templateId){
    var cachedTemplate = this.templateCaches[templateId];

    if (!cachedTemplate){
      cachedTemplate = new Marionette.TemplateCache(templateId);
      this.templateCaches[templateId] = cachedTemplate;
    }

    return cachedTemplate.load();
  },

  // Clear templates from the cache. If no arguments
  // are specified, clears all templates:
  // `clear()`
  //
  // If arguments are specified, clears each of the 
  // specified templates from the cache:
  // `clear("#t1", "#t2", "...")`
  clear: function(){
    var i;
    var args = slice(arguments);
    var length = args.length;

    if (length > 0){
      for(i=0; i<length; i++){
        delete this.templateCaches[args[i]];
      }
    } else {
      this.templateCaches = {};
    }
  }
});

// TemplateCache instance methods, allowing each
// template cache object to manage it's own state
// and know whether or not it has been loaded
_.extend(Marionette.TemplateCache.prototype, {

  // Internal method to load the template
  load: function(){
    // Guard clause to prevent loading this template more than once
    if (this.compiledTemplate){
      return this.compiledTemplate;
    }

    // Load the template and compile it
    var template = this.loadTemplate(this.templateId);
    this.compiledTemplate = this.compileTemplate(template);

    return this.compiledTemplate;
  },

  // Load a template from the DOM, by default. Override
  // this method to provide your own template retrieval
  // For asynchronous loading with AMD/RequireJS, consider
  // using a template-loader plugin as described here: 
  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs
  loadTemplate: function(templateId){
    var template = Marionette.$(templateId).html();

    if (!template || template.length === 0){
      throwError("Could not find template: '" + templateId + "'", "NoTemplateError");
    }

    return template;
  },

  // Pre-compile the template before caching it. Override
  // this method if you do not need to pre-compile a template
  // (JST / RequireJS for example) or if you want to change
  // the template engine used (Handebars, etc).
  compileTemplate: function(rawTemplate){
    return _.template(rawTemplate);
  }
});


// Renderer
// --------

// Render a template with data by passing in the template
// selector and the data to render.
Marionette.Renderer = {

  // Render a template with data. The `template` parameter is
  // passed to the `TemplateCache` object to retrieve the
  // template function. Override this method to provide your own
  // custom rendering and template handling for all of Marionette.
  render: function(template, data){
    var templateFunc = typeof template === 'function' ? template : Marionette.TemplateCache.get(template);
    return templateFunc(data);
  }
};



// Marionette.View
// ---------------

// The core view type that other Marionette views extend from.
Marionette.View = Backbone.View.extend({

  constructor: function(){
    _.bindAll(this, "render");

    var args = Array.prototype.slice.apply(arguments);
    Backbone.View.prototype.constructor.apply(this, args);

    Marionette.MonitorDOMRefresh(this);
    this.listenTo(this, "show", this.onShowCalled, this);
  },

  // import the "triggerMethod" to trigger events with corresponding
  // methods if the method exists 
  triggerMethod: Marionette.triggerMethod,

  // Get the template for this view
  // instance. You can set a `template` attribute in the view
  // definition or pass a `template: "whatever"` parameter in
  // to the constructor options.
  getTemplate: function(){
    return Marionette.getOption(this, "template");
  },

  // Mix in template helper methods. Looks for a
  // `templateHelpers` attribute, which can either be an
  // object literal, or a function that returns an object
  // literal. All methods and attributes from this object
  // are copies to the object passed in.
  mixinTemplateHelpers: function(target){
    target = target || {};
    var templateHelpers = this.templateHelpers;
    if (_.isFunction(templateHelpers)){
      templateHelpers = templateHelpers.call(this);
    }
    return _.extend(target, templateHelpers);
  },

  // Configure `triggers` to forward DOM events to view
  // events. `triggers: {"click .foo": "do:foo"}`
  configureTriggers: function(){
    if (!this.triggers) { return; }

    var triggerEvents = {};

    // Allow `triggers` to be configured as a function
    var triggers = _.result(this, "triggers");

    // Configure the triggers, prevent default
    // action and stop propagation of DOM events
    _.each(triggers, function(value, key){

      // build the event handler function for the DOM event
      triggerEvents[key] = function(e){

        // stop the event in it's tracks
        if (e && e.preventDefault){ e.preventDefault(); }
        if (e && e.stopPropagation){ e.stopPropagation(); }

        // build the args for the event
        var args = {
          view: this,
          model: this.model,
          collection: this.collection
        };

        // trigger the event
        this.triggerMethod(value, args);
      };

    }, this);

    return triggerEvents;
  },

  // Overriding Backbone.View's delegateEvents to handle 
  // the `triggers`, `modelEvents`, and `collectionEvents` configuration
  delegateEvents: function(events){
    this._delegateDOMEvents(events);
    Marionette.bindEntityEvents(this, this.model, Marionette.getOption(this, "modelEvents"));
    Marionette.bindEntityEvents(this, this.collection, Marionette.getOption(this, "collectionEvents"));
  },

  // internal method to delegate DOM events and triggers
  _delegateDOMEvents: function(events){
    events = events || this.events;
    if (_.isFunction(events)){ events = events.call(this); }

    var combinedEvents = {};
    var triggers = this.configureTriggers();
    _.extend(combinedEvents, events, triggers);

    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);
  },

  // Overriding Backbone.View's undelegateEvents to handle unbinding
  // the `triggers`, `modelEvents`, and `collectionEvents` config
  undelegateEvents: function(){
    var args = Array.prototype.slice.call(arguments);
    Backbone.View.prototype.undelegateEvents.apply(this, args);

    Marionette.unbindEntityEvents(this, this.model, Marionette.getOption(this, "modelEvents"));
    Marionette.unbindEntityEvents(this, this.collection, Marionette.getOption(this, "collectionEvents"));
  },

  // Internal method, handles the `show` event.
  onShowCalled: function(){},

  // Default `close` implementation, for removing a view from the
  // DOM and unbinding it. Regions will call this method
  // for you. You can specify an `onClose` method in your view to
  // add custom code that is called after the view is closed.
  close: function(){
    if (this.isClosed) { return; }

    // allow the close to be stopped by returning `false`
    // from the `onBeforeClose` method
    var shouldClose = this.triggerMethod("before:close");
    if (shouldClose === false){
      return;
    }

    // mark as closed before doing the actual close, to
    // prevent infinite loops within "close" event handlers
    // that are trying to close other views
    this.isClosed = true;
    this.triggerMethod("close");

    // unbind UI elements
    this.unbindUIElements();

    // remove the view from the DOM
    this.remove();
  },

  // This method binds the elements specified in the "ui" hash inside the view's code with
  // the associated jQuery selectors.
  bindUIElements: function(){
    if (!this.ui) { return; }

    // store the ui hash in _uiBindings so they can be reset later
    // and so re-rendering the view will be able to find the bindings
    if (!this._uiBindings){
      this._uiBindings = this.ui;
    }

    // get the bindings result, as a function or otherwise
    var bindings = _.result(this, "_uiBindings");

    // empty the ui so we don't have anything to start with
    this.ui = {};

    // bind each of the selectors
    _.each(_.keys(bindings), function(key) {
      var selector = bindings[key];
      this.ui[key] = this.$(selector);
    }, this);
  },

  // This method unbinds the elements specified in the "ui" hash
  unbindUIElements: function(){
    if (!this.ui){ return; }

    // delete all of the existing ui bindings
    _.each(this.ui, function($el, name){
      delete this.ui[name];
    }, this);

    // reset the ui element to the original bindings configuration
    this.ui = this._uiBindings;
    delete this._uiBindings;
  }
});

// Item View
// ---------

// A single item view implementation that contains code for rendering
// with underscore.js templates, serializing the view's model or collection,
// and calling several methods on extended views, such as `onRender`.
Marionette.ItemView =  Marionette.View.extend({
  constructor: function(){
    Marionette.View.prototype.constructor.apply(this, slice(arguments));
  },

  // Serialize the model or collection for the view. If a model is
  // found, `.toJSON()` is called. If a collection is found, `.toJSON()`
  // is also called, but is used to populate an `items` array in the
  // resulting data. If both are found, defaults to the model.
  // You can override the `serializeData` method in your own view
  // definition, to provide custom serialization for your view's data.
  serializeData: function(){
    var data = {};

    if (this.model) {
      data = this.model.toJSON();
    }
    else if (this.collection) {
      data = { items: this.collection.toJSON() };
    }

    return data;
  },

  // Render the view, defaulting to underscore.js templates.
  // You can override this in your view definition to provide
  // a very specific rendering for your view. In general, though,
  // you should override the `Marionette.Renderer` object to
  // change how Marionette renders views.
  render: function(){
    this.isClosed = false;

    this.triggerMethod("before:render", this);
    this.triggerMethod("item:before:render", this);

    var data = this.serializeData();
    data = this.mixinTemplateHelpers(data);

    var template = this.getTemplate();
    var html = Marionette.Renderer.render(template, data);
    this.$el.html(html);
    this.bindUIElements();

    this.triggerMethod("render", this);
    this.triggerMethod("item:rendered", this);

    return this;
  },

  // Override the default close event to add a few
  // more events that are triggered.
  close: function(){
    if (this.isClosed){ return; }

    this.triggerMethod('item:before:close');

    Marionette.View.prototype.close.apply(this, slice(arguments));

    this.triggerMethod('item:closed');
  }
});

// Collection View
// ---------------

// A view that iterates over a Backbone.Collection
// and renders an individual ItemView for each model.
Marionette.CollectionView = Marionette.View.extend({
  // used as the prefix for item view events
  // that are forwarded through the collectionview
  itemViewEventPrefix: "itemview",

  // constructor
  constructor: function(options){
    this._initChildViewStorage();

    Marionette.View.prototype.constructor.apply(this, slice(arguments));
    
    this._initialEvents();
  },

  // Configured the initial events that the collection view
  // binds to. Override this method to prevent the initial
  // events, or to add your own initial events.
  _initialEvents: function(){
    if (this.collection){
      this.listenTo(this.collection, "add", this.addChildView, this);
      this.listenTo(this.collection, "remove", this.removeItemView, this);
      this.listenTo(this.collection, "reset", this.render, this);
    }
  },

  // Handle a child item added to the collection
  addChildView: function(item, collection, options){
    this.closeEmptyView();
    var ItemView = this.getItemView(item);
    var index = this.collection.indexOf(item);
    this.addItemView(item, ItemView, index);
  },

  // Override from `Marionette.View` to guarantee the `onShow` method
  // of child views is called.
  onShowCalled: function(){
    this.children.each(function(child){
      Marionette.triggerMethod.call(child, "show");
    });
  },

  // Internal method to trigger the before render callbacks
  // and events
  triggerBeforeRender: function(){
    this.triggerMethod("before:render", this);
    this.triggerMethod("collection:before:render", this);
  },

  // Internal method to trigger the rendered callbacks and
  // events
  triggerRendered: function(){
    this.triggerMethod("render", this);
    this.triggerMethod("collection:rendered", this);
  },

  // Render the collection of items. Override this method to
  // provide your own implementation of a render function for
  // the collection view.
  render: function(){
    this.isClosed = false;
    this.triggerBeforeRender();
    this._renderChildren();
    this.triggerRendered();
    return this;
  },

  // Internal method. Separated so that CompositeView can have
  // more control over events being triggered, around the rendering
  // process
  _renderChildren: function(){
    this.closeEmptyView();
    this.closeChildren();

    if (this.collection && this.collection.length > 0) {
      this.showCollection();
    } else {
      this.showEmptyView();
    }
  },

  // Internal method to loop through each item in the
  // collection view and show it
  showCollection: function(){
    var ItemView;
    this.collection.each(function(item, index){
      ItemView = this.getItemView(item);
      this.addItemView(item, ItemView, index);
    }, this);
  },

  // Internal method to show an empty view in place of
  // a collection of item views, when the collection is
  // empty
  showEmptyView: function(){
    var EmptyView = Marionette.getOption(this, "emptyView");
    if (EmptyView && !this._showingEmptyView){
      this._showingEmptyView = true;
      var model = new Backbone.Model();
      this.addItemView(model, EmptyView, 0);
    }
  },

  // Internal method to close an existing emptyView instance
  // if one exists. Called when a collection view has been
  // rendered empty, and then an item is added to the collection.
  closeEmptyView: function(){
    if (this._showingEmptyView){
      this.closeChildren();
      delete this._showingEmptyView;
    }
  },

  // Retrieve the itemView type, either from `this.options.itemView`
  // or from the `itemView` in the object definition. The "options"
  // takes precedence.
  getItemView: function(item){
    var itemView = Marionette.getOption(this, "itemView");

    if (!itemView){
      throwError("An `itemView` must be specified", "NoItemViewError");
    }

    return itemView;
  },

  // Render the child item's view and add it to the
  // HTML for the collection view.
  addItemView: function(item, ItemView, index){
    // get the itemViewOptions if any were specified
    var itemViewOptions = Marionette.getOption(this, "itemViewOptions");
    if (_.isFunction(itemViewOptions)){
      itemViewOptions = itemViewOptions.call(this, item, index);
    }

    // build the view 
    var view = this.buildItemView(item, ItemView, itemViewOptions);
    
    // set up the child view event forwarding
    this.addChildViewEventForwarding(view);

    // this view is about to be added
    this.triggerMethod("before:item:added", view);

    // Store the child view itself so we can properly
    // remove and/or close it later
    this.children.add(view);

    // Render it and show it
    this.renderItemView(view, index);

    // call the "show" method if the collection view
    // has already been shown
    if (this._isShown){
      Marionette.triggerMethod.call(view, "show");
    }

    // this view was added
    this.triggerMethod("after:item:added", view);
  },

  // Set up the child view event forwarding. Uses an "itemview:"
  // prefix in front of all forwarded events.
  addChildViewEventForwarding: function(view){
    var prefix = Marionette.getOption(this, "itemViewEventPrefix");

    // Forward all child item view events through the parent,
    // prepending "itemview:" to the event name
    this.listenTo(view, "all", function(){
      var args = slice(arguments);
      args[0] = prefix + ":" + args[0];
      args.splice(1, 0, view);

      Marionette.triggerMethod.apply(this, args);
    }, this);
  },

  // render the item view
  renderItemView: function(view, index) {
    view.render();
    this.appendHtml(this, view, index);
  },

  // Build an `itemView` for every model in the collection.
  buildItemView: function(item, ItemViewType, itemViewOptions){
    var options = _.extend({model: item}, itemViewOptions);
    return new ItemViewType(options);
  },

  // get the child view by item it holds, and remove it
  removeItemView: function(item){
    var view = this.children.findByModel(item);
    this.removeChildView(view);
    this.checkEmpty();
  },

  // Remove the child view and close it
  removeChildView: function(view){

    // shut down the child view properly,
    // including events that the collection has from it
    if (view){
      this.stopListening(view);

      // call 'close' or 'remove', depending on which is found
      if (view.close) { view.close(); }
      else if (view.remove) { view.remove(); }

      this.children.remove(view);
    }

    this.triggerMethod("item:removed", view);
  },

  // helper to show the empty view if the collection is empty
  checkEmpty: function() {
    // check if we're empty now, and if we are, show the
    // empty view
    if (!this.collection || this.collection.length === 0){
      this.showEmptyView();
    }
  },

  // Append the HTML to the collection's `el`.
  // Override this method to do something other
  // then `.append`.
  appendHtml: function(collectionView, itemView, index){
    collectionView.$el.append(itemView.el);
  },

  // Internal method to set up the `children` object for
  // storing all of the child views
  _initChildViewStorage: function(){
    this.children = new Backbone.ChildViewContainer();
  },

  // Handle cleanup and other closing needs for
  // the collection of views.
  close: function(){
    if (this.isClosed){ return; }

    this.triggerMethod("collection:before:close");
    this.closeChildren();
    this.triggerMethod("collection:closed");

    Marionette.View.prototype.close.apply(this, slice(arguments));
  },

  // Close the child views that this collection view
  // is holding on to, if any
  closeChildren: function(){
    this.children.each(function(child){
      this.removeChildView(child);
    }, this);
    this.checkEmpty();
  }
});


// Composite View
// --------------

// Used for rendering a branch-leaf, hierarchical structure.
// Extends directly from CollectionView and also renders an
// an item view as `modelView`, for the top leaf
Marionette.CompositeView = Marionette.CollectionView.extend({
  constructor: function(options){
    Marionette.CollectionView.apply(this, slice(arguments));

    this.itemView = this.getItemView();
  },

  // Configured the initial events that the composite view
  // binds to. Override this method to prevent the initial
  // events, or to add your own initial events.
  _initialEvents: function(){
    if (this.collection){
      this.listenTo(this.collection, "add", this.addChildView, this);
      this.listenTo(this.collection, "remove", this.removeItemView, this);
      this.listenTo(this.collection, "reset", this._renderChildren, this);
    }
  },

  // Retrieve the `itemView` to be used when rendering each of
  // the items in the collection. The default is to return
  // `this.itemView` or Marionette.CompositeView if no `itemView`
  // has been defined
  getItemView: function(item){
    var itemView = Marionette.getOption(this, "itemView") || this.constructor;

    if (!itemView){
      throwError("An `itemView` must be specified", "NoItemViewError");
    }

    return itemView;
  },

  // Serialize the collection for the view. 
  // You can override the `serializeData` method in your own view
  // definition, to provide custom serialization for your view's data.
  serializeData: function(){
    var data = {};

    if (this.model){
      data = this.model.toJSON();
    }

    return data;
  },

  // Renders the model once, and the collection once. Calling
  // this again will tell the model's view to re-render itself
  // but the collection will not re-render.
  render: function(){
    this.isRendered = true;
    this.isClosed = false;
    this.resetItemViewContainer();

    this.triggerBeforeRender();
    var html = this.renderModel();
    this.$el.html(html);
    // the ui bindings is done here and not at the end of render since they 
    // will not be available until after the model is rendered, but should be
    // available before the collection is rendered.
    this.bindUIElements();
    this.triggerMethod("composite:model:rendered");

    this._renderChildren();

    this.triggerMethod("composite:rendered");
    this.triggerRendered();
    return this;
  },

  _renderChildren: function(){
    if (this.isRendered){
      Marionette.CollectionView.prototype._renderChildren.call(this);
      this.triggerMethod("composite:collection:rendered");
    }
  },

  // Render an individual model, if we have one, as
  // part of a composite view (branch / leaf). For example:
  // a treeview.
  renderModel: function(){
    var data = {};
    data = this.serializeData();
    data = this.mixinTemplateHelpers(data);

    var template = this.getTemplate();
    return Marionette.Renderer.render(template, data);
  },

  // Appends the `el` of itemView instances to the specified
  // `itemViewContainer` (a jQuery selector). Override this method to
  // provide custom logic of how the child item view instances have their
  // HTML appended to the composite view instance.
  appendHtml: function(cv, iv){
    var $container = this.getItemViewContainer(cv);
    $container.append(iv.el);
  },

  // Internal method to ensure an `$itemViewContainer` exists, for the
  // `appendHtml` method to use.
  getItemViewContainer: function(containerView){
    if ("$itemViewContainer" in containerView){
      return containerView.$itemViewContainer;
    }

    var container;
    if (containerView.itemViewContainer){

      var selector = _.result(containerView, "itemViewContainer");
      container = containerView.$(selector);
      if (container.length <= 0) {
        throwError("The specified `itemViewContainer` was not found: " + containerView.itemViewContainer, "ItemViewContainerMissingError");
      }

    } else {
      container = containerView.$el;
    }

    containerView.$itemViewContainer = container;
    return container;
  },

  // Internal method to reset the `$itemViewContainer` on render
  resetItemViewContainer: function(){
    if (this.$itemViewContainer){
      delete this.$itemViewContainer;
    }
  }
});


// Layout
// ------

// Used for managing application layouts, nested layouts and
// multiple regions within an application or sub-application.
//
// A specialized view type that renders an area of HTML and then
// attaches `Region` instances to the specified `regions`.
// Used for composite view management and sub-application areas.
Marionette.Layout = Marionette.ItemView.extend({
  regionType: Marionette.Region,
  
  // Ensure the regions are available when the `initialize` method
  // is called.
  constructor: function (options) {
    options = options || {};

    this._firstRender = true;
    this._initializeRegions(options);
    
    Marionette.ItemView.call(this, options);
  },

  // Layout's render will use the existing region objects the
  // first time it is called. Subsequent calls will close the
  // views that the regions are showing and then reset the `el`
  // for the regions to the newly rendered DOM elements.
  render: function(){

    if (this._firstRender){
      // if this is the first render, don't do anything to
      // reset the regions
      this._firstRender = false;
    } else if (this.isClosed){
      // a previously closed layout means we need to 
      // completely re-initialize the regions
      this._initializeRegions();
    } else {
      // If this is not the first render call, then we need to 
      // re-initializing the `el` for each region
      this._reInitializeRegions();
    }

    var args = Array.prototype.slice.apply(arguments);
    var result = Marionette.ItemView.prototype.render.apply(this, args);

    return result;
  },

  // Handle closing regions, and then close the view itself.
  close: function () {
    if (this.isClosed){ return; }
    this.regionManager.close();
    var args = Array.prototype.slice.apply(arguments);
    Marionette.ItemView.prototype.close.apply(this, args);
  },

  // Add a single region, by name, to the layout
  addRegion: function(name, definition){
    var regions = {};
    regions[name] = definition;
    return this.addRegions(regions)[name];
  },

  // Add multiple regions as a {name: definition, name2: def2} object literal
  addRegions: function(regions){
    this.regions = _.extend(this.regions || {}, regions);
    return this._buildRegions(regions);
  },

  // Remove a single region from the Layout, by name
  removeRegion: function(name){
    return this.regionManager.removeRegion(name);
  },

  // internal method to build regions
  _buildRegions: function(regions){
    var that = this;

    var defaults = {
      parentEl: function(){ return that.$el; }
    };

    return this.regionManager.addRegions(regions, defaults);
  },

  // Internal method to initialize the regions that have been defined in a
  // `regions` attribute on this layout. 
  _initializeRegions: function (options) {
    var regions;
    this._initRegionManager();

    if (_.isFunction(this.regions)) {
      regions = this.regions(options);
    } else {
      regions = this.regions || {};
    }

    this.addRegions(regions);
  },

  // Internal method to re-initialize all of the regions by updating the `el` that
  // they point to
  _reInitializeRegions: function(){
    this.regionManager.closeRegions();
    this.regionManager.each(function(region){
      region.reset();
    });
  },

  // Internal method to initialize the region manager
  // and all regions in it
  _initRegionManager: function(){
    this.regionManager = new Marionette.RegionManager();

    this.listenTo(this.regionManager, "region:add", function(name, region){
      this[name] = region;
      this.trigger("region:add", name, region);
    });

    this.listenTo(this.regionManager, "region:remove", function(name, region){
      delete this[name];
      this.trigger("region:remove", name, region);
    });
  }
});


// AppRouter
// ---------

// Reduce the boilerplate code of handling route events
// and then calling a single method on another object.
// Have your routers configured to call the method on
// your object, directly.
//
// Configure an AppRouter with `appRoutes`.
//
// App routers can only take one `controller` object. 
// It is recommended that you divide your controller
// objects in to smaller pieces of related functionality
// and have multiple routers / controllers, instead of
// just one giant router and controller.
//
// You can also add standard routes to an AppRouter.

Marionette.AppRouter = Backbone.Router.extend({

  constructor: function(options){
    Backbone.Router.prototype.constructor.apply(this, slice(arguments));

    this.options = options;

    if (this.appRoutes){
      var controller = Marionette.getOption(this, "controller");
      this.processAppRoutes(controller, this.appRoutes);
    }
  },

  // Internal method to process the `appRoutes` for the
  // router, and turn them in to routes that trigger the
  // specified method on the specified `controller`.
  processAppRoutes: function(controller, appRoutes) {
    var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes

    _.each(routeNames, function(route) {
      var methodName = appRoutes[route];
      var method = controller[methodName];

      if (!method) {
        throw new Error("Method '" + methodName + "' was not found on the controller");
      }

      this.route(route, methodName, _.bind(method, controller));
    }, this);
  }
});


// Application
// -----------

// Contain and manage the composite application as a whole.
// Stores and starts up `Region` objects, includes an
// event aggregator as `app.vent`
Marionette.Application = function(options){
  this._initRegionManager();
  this._initCallbacks = new Marionette.Callbacks();
  this.vent = new Backbone.Wreqr.EventAggregator();
  this.commands = new Backbone.Wreqr.Commands();
  this.reqres = new Backbone.Wreqr.RequestResponse();
  this.submodules = {};

  _.extend(this, options);

  this.triggerMethod = Marionette.triggerMethod;
};

_.extend(Marionette.Application.prototype, Backbone.Events, {
  // Command execution, facilitated by Backbone.Wreqr.Commands
  execute: function(){
    var args = Array.prototype.slice.apply(arguments);
    this.commands.execute.apply(this.commands, args);
  },

  // Request/response, facilitated by Backbone.Wreqr.RequestResponse
  request: function(){
    var args = Array.prototype.slice.apply(arguments);
    return this.reqres.request.apply(this.reqres, args);
  },

  // Add an initializer that is either run at when the `start`
  // method is called, or run immediately if added after `start`
  // has already been called.
  addInitializer: function(initializer){
    this._initCallbacks.add(initializer);
  },

  // kick off all of the application's processes.
  // initializes all of the regions that have been added
  // to the app, and runs all of the initializer functions
  start: function(options){
    this.triggerMethod("initialize:before", options);
    this._initCallbacks.run(options, this);
    this.triggerMethod("initialize:after", options);

    this.triggerMethod("start", options);
  },

  // Add regions to your app. 
  // Accepts a hash of named strings or Region objects
  // addRegions({something: "#someRegion"})
  // addRegions({something: Region.extend({el: "#someRegion"}) });
  addRegions: function(regions){
    return this._regionManager.addRegions(regions);
  },

  // Removes a region from your app.
  // Accepts the regions name
  // removeRegion('myRegion')
  removeRegion: function(region) {
    this._regionManager.removeRegion(region);
  },

  // Create a module, attached to the application
  module: function(moduleNames, moduleDefinition){
    // slice the args, and add this application object as the
    // first argument of the array
    var args = slice(arguments);
    args.unshift(this);

    // see the Marionette.Module object for more information
    return Marionette.Module.create.apply(Marionette.Module, args);
  },

  // Internal method to set up the region manager
  _initRegionManager: function(){
    this._regionManager = new Marionette.RegionManager();

    this.listenTo(this._regionManager, "region:add", function(name, region){
      this[name] = region;
    });

    this.listenTo(this._regionManager, "region:remove", function(name, region){
      delete this[name];
    });
  }
});

// Copy the `extend` function used by Backbone's classes
Marionette.Application.extend = Marionette.extend;

// Module
// ------

// A simple module system, used to create privacy and encapsulation in
// Marionette applications
Marionette.Module = function(moduleName, app){
  this.moduleName = moduleName;

  // store sub-modules
  this.submodules = {};

  this._setupInitializersAndFinalizers();

  // store the configuration for this module
  this.app = app;
  this.startWithParent = true;

  this.triggerMethod = Marionette.triggerMethod;
};

// Extend the Module prototype with events / listenTo, so that the module
// can be used as an event aggregator or pub/sub.
_.extend(Marionette.Module.prototype, Backbone.Events, {

  // Initializer for a specific module. Initializers are run when the
  // module's `start` method is called.
  addInitializer: function(callback){
    this._initializerCallbacks.add(callback);
  },

  // Finalizers are run when a module is stopped. They are used to teardown
  // and finalize any variables, references, events and other code that the
  // module had set up.
  addFinalizer: function(callback){
    this._finalizerCallbacks.add(callback);
  },

  // Start the module, and run all of its initializers
  start: function(options){
    // Prevent re-starting a module that is already started
    if (this._isInitialized){ return; }

    // start the sub-modules (depth-first hierarchy)
    _.each(this.submodules, function(mod){
      // check to see if we should start the sub-module with this parent
      if (mod.startWithParent){
        mod.start(options);
      }
    });

    // run the callbacks to "start" the current module
    this.triggerMethod("before:start", options);

    this._initializerCallbacks.run(options, this);
    this._isInitialized = true;

    this.triggerMethod("start", options);
  },

  // Stop this module by running its finalizers and then stop all of
  // the sub-modules for this module
  stop: function(){
    // if we are not initialized, don't bother finalizing
    if (!this._isInitialized){ return; }
    this._isInitialized = false;

    Marionette.triggerMethod.call(this, "before:stop");

    // stop the sub-modules; depth-first, to make sure the
    // sub-modules are stopped / finalized before parents
    _.each(this.submodules, function(mod){ mod.stop(); });

    // run the finalizers
    this._finalizerCallbacks.run(undefined,this);

    // reset the initializers and finalizers
    this._initializerCallbacks.reset();
    this._finalizerCallbacks.reset();

    Marionette.triggerMethod.call(this, "stop");
  },

  // Configure the module with a definition function and any custom args
  // that are to be passed in to the definition function
  addDefinition: function(moduleDefinition, customArgs){
    this._runModuleDefinition(moduleDefinition, customArgs);
  },

  // Internal method: run the module definition function with the correct
  // arguments
  _runModuleDefinition: function(definition, customArgs){
    if (!definition){ return; }

    // build the correct list of arguments for the module definition
    var args = _.flatten([
      this,
      this.app,
      Backbone,
      Marionette,
      Marionette.$, _,
      customArgs
    ]);

    definition.apply(this, args);
  },

  // Internal method: set up new copies of initializers and finalizers.
  // Calling this method will wipe out all existing initializers and
  // finalizers.
  _setupInitializersAndFinalizers: function(){
    this._initializerCallbacks = new Marionette.Callbacks();
    this._finalizerCallbacks = new Marionette.Callbacks();
  }
});

// Type methods to create modules
_.extend(Marionette.Module, {

  // Create a module, hanging off the app parameter as the parent object.
  create: function(app, moduleNames, moduleDefinition){
    var module = app;

    // get the custom args passed in after the module definition and
    // get rid of the module name and definition function
    var customArgs = slice(arguments);
    customArgs.splice(0, 3);

    // split the module names and get the length
    moduleNames = moduleNames.split(".");
    var length = moduleNames.length;

    // store the module definition for the last module in the chain
    var moduleDefinitions = [];
    moduleDefinitions[length-1] = moduleDefinition;

    // Loop through all the parts of the module definition
    _.each(moduleNames, function(moduleName, i){
      var parentModule = module;
      module = this._getModule(parentModule, moduleName, app);
      this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs);
    }, this);

    // Return the last module in the definition chain
    return module;
  },

  _getModule: function(parentModule, moduleName, app, def, args){
    // Get an existing module of this name if we have one
    var module = parentModule[moduleName];

    if (!module){
      // Create a new module if we don't have one
      module = new Marionette.Module(moduleName, app);
      parentModule[moduleName] = module;
      // store the module on the parent
      parentModule.submodules[moduleName] = module;
    }

    return module;
  },

  _addModuleDefinition: function(parentModule, module, def, args){
    var fn; 
    var startWithParent;

    if (_.isFunction(def)){
      // if a function is supplied for the module definition
      fn = def;
      startWithParent = true;

    } else if (_.isObject(def)){
      // if an object is supplied
      fn = def.define;
      startWithParent = def.startWithParent;
      
    } else {
      // if nothing is supplied
      startWithParent = true;
    }

    // add module definition if needed
    if (fn){
      module.addDefinition(fn, args);
    }

    // `and` the two together, ensuring a single `false` will prevent it
    // from starting with the parent
    module.startWithParent = module.startWithParent && startWithParent;

    // setup auto-start if needed
    if (module.startWithParent && !module.startWithParentIsConfigured){

      // only configure this once
      module.startWithParentIsConfigured = true;

      // add the module initializer config
      parentModule.addInitializer(function(options){
        if (module.startWithParent){
          module.start(options);
        }
      });

    }

  }
});



  return Marionette;
})(this, Backbone, _);// Backbone.Stickit v0.8.0, MIT Licensed
// Copyright (c) 2012 The New York Times, CMS Group, Matthew DeLambo <delambo@gmail.com>

(function (factory) {

  // Set up Stickit appropriately for the environment. Start with AMD.
  if (typeof define === 'function' && define.amd) {
    define(['underscore', 'backbone', 'exports'], factory);
  }

  // Next for Node.js or CommonJS.
  else if (typeof exports === 'object') {
    factory(require('underscore'), require('backbone'), exports);
  }

  // Finally, as a browser global.
  else {
    factory(_, Backbone, {});
  }

}(function (_, Backbone, Stickit) {

  // Stickit Namespace
  // --------------------------

  Stickit._handlers = [];

  Stickit.addHandler = function(handlers) {
    // Fill-in default values.
    handlers = _.map(_.flatten([handlers]), function(handler) {
      return _.defaults({}, handler, {
        updateModel: true,
        updateView: true,
        updateMethod: 'text'
      });
    });
    this._handlers = this._handlers.concat(handlers);
  };

  // Backbone.View Mixins
  // --------------------

  Stickit.ViewMixin = {

    // Collection of model event bindings.
    //   [{model,event,fn,config}, ...]
    _modelBindings: null,

    // Unbind the model and event bindings from `this._modelBindings` and
    // `this.$el`. If the optional `model` parameter is defined, then only
    // delete bindings for the given `model` and its corresponding view events.
    unstickit: function(model, bindingSelector) {

      // Support passing a bindings hash in place of bindingSelector.
      if (_.isObject(bindingSelector)) {
        _.each(bindingSelector, function(v, selector) {
          this.unstickit(model, selector);
        }, this);
        return;
      }

      var models = [], destroyFns = [], bindings = _.clone(this._modelBindings);
      _.each(bindings, function(binding, i) {
        if (model && binding.model !== model) return;
        if (bindingSelector && binding.config.selector != bindingSelector) return;

        binding.model.off(binding.event, binding.fn);
        destroyFns.push(binding.config._destroy);
        models.push(binding.model);
        delete this._modelBindings[i];
      }, this);

      // Trigger an event for each model that was unbound.
      _.invoke(_.uniq(models), 'trigger', 'stickit:unstuck', this.cid);

      // Call `_destroy` on a unique list of the binding callbacks.
      _.each(_.uniq(destroyFns), function(fn) { fn.call(this); }, this);

      // Cleanup the null values.
      this._modelBindings = _.compact(this._modelBindings);

      this.$el.off('.stickit' + (model ? '.' + model.cid : ''), bindingSelector);
    },

    // Initilize Stickit bindings for the view. Subsequent binding additions
    // can either call `stickit` with the new bindings, or add them directly
    // with `addBinding`. Both arguments to `stickit` are optional.
    stickit: function(optionalModel, optionalBindingsConfig) {
      var model = optionalModel || this.model,
          bindings = optionalBindingsConfig || _.result(this, "bindings") || {};

      this._modelBindings || (this._modelBindings = []);

      // Add bindings in bulk using `addBinding`.
      this.addBinding(model, bindings);

      // Wrap `view.remove` to unbind stickit model and dom events.
      var remove = this.remove;
      if (!remove.stickitWrapped) {
        this.remove = function() {
          var ret = this;
          this.unstickit();
          if (remove) ret = remove.apply(this, arguments);
          return ret;
        };
      }
      this.remove.stickitWrapped = true;
      return this;
    },

    // Add a single Stickit binding or a hash of bindings to the model. If
    // `optionalModel` is ommitted, will default to the view's `model` property.
    addBinding: function(optionalModel, selector, binding) {
      var model = optionalModel || this.model,
          namespace = '.stickit.' + model.cid,
          binding = binding || {};

      // Support jQuery-style {key: val} event maps.
      if (_.isObject(selector)) {
        var bindings = selector;
        _.each(bindings, function(val, key) {
          this.addBinding(model, key, val);
        }, this);
        return;
      }

      // Special case the ':el' selector to use the view's this.$el.
      var $el = selector === ':el' ? this.$el : this.$(selector);

      // Clear any previous matching bindings.
      this.unstickit(model, selector);

      // Fail fast if the selector didn't match an element.
      if (!$el.length) return;

      // Allow shorthand setting of model attributes - `'selector':'observe'`.
      if (_.isString(binding)) binding = {observe: binding};

      // Handle case where `observe` is in the form of a function.
      if (_.isFunction(binding.observe)) binding.observe = binding.observe.call(this);

      // Find all matching Stickit handlers that could apply to this element
      // and store in a config object.
      var config = getConfiguration($el, binding);

      // The attribute we're observing in our config.
      var modelAttr = config.observe;

      // Store needed properties for later.
      config.selector = selector;
      config.view = this;

      // Create the model set options with a unique `bindId` so that we
      // can avoid double-binding in the `change:attribute` event handler.
      var bindId = config.bindId = _.uniqueId();

      // Add a reference to the view for handlers of stickitChange events
      var options = _.extend({stickitChange: config}, config.setOptions);

      // Add a `_destroy` callback to the configuration, in case `destroy`
      // is a named function and we need a unique function when unsticking.
      config._destroy = function() {
        applyViewFn.call(this, config.destroy, $el, model, config);
      };

      initializeAttributes($el, config, model, modelAttr);
      initializeVisible($el, config, model, modelAttr);
      initializeClasses($el, config, model, modelAttr);

      if (modelAttr) {
        // Setup one-way (input element -> model) bindings.
        _.each(config.events, function(type) {
          var eventName = type + namespace;
          var listener = function(event) {
            var val = applyViewFn.call(this, config.getVal, $el, event, config, slice.call(arguments, 1));

            // Don't update the model if false is returned from the `updateModel` configuration.
            var currentVal = evaluateBoolean(config.updateModel, val, event, config);
            if (currentVal) setAttr(model, modelAttr, val, options, config);
          };
          var sel = selector === ':el'? '' : selector;
          this.$el.on(eventName, sel, _.bind(listener, this));
        }, this);

        // Setup a `change:modelAttr` observer to keep the view element in sync.
        // `modelAttr` may be an array of attributes or a single string value.
        _.each(_.flatten([modelAttr]), function(attr) {
          observeModelEvent(model, 'change:' + attr, config, function(m, val, options) {
            var changeId = options && options.stickitChange && options.stickitChange.bindId;
            if (changeId !== bindId) {
              var currentVal = getAttr(model, modelAttr, config);
              updateViewBindEl($el, config, currentVal, model);
            }
          });
        });

        var currentVal = getAttr(model, modelAttr, config);
        updateViewBindEl($el, config, currentVal, model, true);
      }

      // After each binding is setup, call the `initialize` callback.
      applyViewFn.call(this, config.initialize, $el, model, config);
    }
  };

  _.extend(Backbone.View.prototype, Stickit.ViewMixin);

  // Helpers
  // -------

  var slice = [].slice;

  // Evaluates the given `path` (in object/dot-notation) relative to the given
  // `obj`. If the path is null/undefined, then the given `obj` is returned.
  var evaluatePath = function(obj, path) {
    var parts = (path || '').split('.');
    var result = _.reduce(parts, function(memo, i) { return memo[i]; }, obj);
    return result == null ? obj : result;
  };

  // If the given `fn` is a string, then view[fn] is called, otherwise it is
  // a function that should be executed.
  var applyViewFn = function(fn) {
    fn = _.isString(fn) ? evaluatePath(this, fn) : fn;
    if (fn) return (fn).apply(this, slice.call(arguments, 1));
  };

  // Given a function, string (view function reference), or a boolean
  // value, returns the truthy result. Any other types evaluate as false.
  // The first argument must be `reference` and the last must be `config`, but
  // middle arguments can be variadic.
  var evaluateBoolean = function(reference, val, config) {
    if (_.isBoolean(reference)) {
      return reference;
    } else if (_.isFunction(reference) || _.isString(reference)) {
      var view = _.last(arguments).view;
      return applyViewFn.apply(view, arguments);
    }
    return false;
  };

  // Setup a model event binding with the given function, and track the event
  // in the view's _modelBindings.
  var observeModelEvent = function(model, event, config, fn) {
    var view = config.view;
    model.on(event, fn, view);
    view._modelBindings.push({model:model, event:event, fn:fn, config:config});
  };

  // Prepares the given `val`ue and sets it into the `model`.
  var setAttr = function(model, attr, val, options, config) {
    var value = {}, view = config.view;
    if (config.onSet) {
      val = applyViewFn.call(view, config.onSet, val, config);
    }

    if (config.set) {
      applyViewFn.call(view, config.set, attr, val, options, config);
    } else {
      value[attr] = val;
      // If `observe` is defined as an array and `onSet` returned
      // an array, then map attributes to their values.
      if (_.isArray(attr) && _.isArray(val)) {
        value = _.reduce(attr, function(memo, attribute, index) {
          memo[attribute] = _.has(val, index) ? val[index] : null;
          return memo;
        }, {});
      }
      model.set(value, options);
    }
  };

  // Returns the given `attr`'s value from the `model`, escaping and
  // formatting if necessary. If `attr` is an array, then an array of
  // respective values will be returned.
  var getAttr = function(model, attr, config) {
    var view = config.view;
    var retrieveVal = function(field) {
      return model[config.escape ? 'escape' : 'get'](field);
    };
    var sanitizeVal = function(val) {
      return val == null ? '' : val;
    };
    var val = _.isArray(attr) ? _.map(attr, retrieveVal) : retrieveVal(attr);
    if (config.onGet) val = applyViewFn.call(view, config.onGet, val, config);
    return _.isArray(val) ? _.map(val, sanitizeVal) : sanitizeVal(val);
  };

  // Find handlers in `Backbone.Stickit._handlers` with selectors that match
  // `$el` and generate a configuration by mixing them in the order that they
  // were found with the given `binding`.
  var getConfiguration = Stickit.getConfiguration = function($el, binding) {
    var handlers = [{
      updateModel: false,
      updateMethod: 'text',
      update: function($el, val, m, opts) { if ($el[opts.updateMethod]) $el[opts.updateMethod](val); },
      getVal: function($el, e, opts) { return $el[opts.updateMethod](); }
    }];
    handlers = handlers.concat(_.filter(Stickit._handlers, function(handler) {
      return $el.is(handler.selector);
    }));
    handlers.push(binding);

    // Merge handlers into a single config object. Last props in wins.
    var config = _.extend.apply(_, handlers);

    // `updateView` is defaulted to false for configutrations with
    // `visible`; otherwise, `updateView` is defaulted to true.
    if (!_.has(config, 'updateView')) config.updateView = !config.visible;
    return config;
  };

  // Setup the attributes configuration - a list that maps an attribute or
  // property `name`, to an `observe`d model attribute, using an optional
  // `onGet` formatter.
  //
  //     attributes: [{
  //       name: 'attributeOrPropertyName',
  //       observe: 'modelAttrName'
  //       onGet: function(modelAttrVal, modelAttrName) { ... }
  //     }, ...]
  //
  var initializeAttributes = function($el, config, model, modelAttr) {
    var props = ['autofocus', 'autoplay', 'async', 'checked', 'controls',
      'defer', 'disabled', 'hidden', 'indeterminate', 'loop', 'multiple',
      'open', 'readonly', 'required', 'scoped', 'selected'];

    var view = config.view;

    _.each(config.attributes || [], function(attrConfig) {
      attrConfig = _.clone(attrConfig);
      attrConfig.view = view;

      var lastClass = '';
      var observed = attrConfig.observe || (attrConfig.observe = modelAttr);
      var updateAttr = function() {
        var updateType = _.contains(props, attrConfig.name) ? 'prop' : 'attr',
            val = getAttr(model, observed, attrConfig);

        // If it is a class then we need to remove the last value and add the new.
        if (attrConfig.name === 'class') {
          $el.removeClass(lastClass).addClass(val);
          lastClass = val;
        } else {
          $el[updateType](attrConfig.name, val);
        }
      };

      _.each(_.flatten([observed]), function(attr) {
        observeModelEvent(model, 'change:' + attr, config, updateAttr);
      });

      // Initialize the matched element's state.
      updateAttr();
    });
  };

  var initializeClasses = function($el, config, model, modelAttr) {
    _.each(config.classes || [], function(classConfig, name) {
      if (_.isString(classConfig)) classConfig = {observe: classConfig};
      classConfig.view = config.view;

      var observed = classConfig.observe;
      var updateClass = function() {
        var val = getAttr(model, observed, classConfig);
        $el.toggleClass(name, !!val);
      };

      _.each(_.flatten([observed]), function(attr) {
        observeModelEvent(model, 'change:' + attr, config, updateClass);
      });
      updateClass();
    });
  };

  // If `visible` is configured, then the view element will be shown/hidden
  // based on the truthiness of the modelattr's value or the result of the
  // given callback. If a `visibleFn` is also supplied, then that callback
  // will be executed to manually handle showing/hiding the view element.
  //
  //     observe: 'isRight',
  //     visible: true, // or function(val, options) {}
  //     visibleFn: function($el, isVisible, options) {} // optional handler
  //
  var initializeVisible = function($el, config, model, modelAttr) {
    if (config.visible == null) return;
    var view = config.view;

    var visibleCb = function() {
      var visible = config.visible,
          visibleFn = config.visibleFn,
          val = getAttr(model, modelAttr, config),
          isVisible = !!val;

      // If `visible` is a function then it should return a boolean result to show/hide.
      if (_.isFunction(visible) || _.isString(visible)) {
        isVisible = !!applyViewFn.call(view, visible, val, config);
      }

      // Either use the custom `visibleFn`, if provided, or execute the standard show/hide.
      if (visibleFn) {
        applyViewFn.call(view, visibleFn, $el, isVisible, config);
      } else {
        $el.toggle(isVisible);
      }
    };

    _.each(_.flatten([modelAttr]), function(attr) {
      observeModelEvent(model, 'change:' + attr, config, visibleCb);
    });

    visibleCb();
  };

  // Update the value of `$el` using the given configuration and trigger the
  // `afterUpdate` callback. This action may be blocked by `config.updateView`.
  //
  //     update: function($el, val, model, options) {},  // handler for updating
  //     updateView: true, // defaults to true
  //     afterUpdate: function($el, val, options) {} // optional callback
  //
  var updateViewBindEl = function($el, config, val, model, isInitializing) {
    var view = config.view;
    if (!evaluateBoolean(config.updateView, val, config)) return;
    applyViewFn.call(view, config.update, $el, val, model, config);
    if (!isInitializing) applyViewFn.call(view, config.afterUpdate, $el, val, config);
  };

  // Default Handlers
  // ----------------

  Stickit.addHandler([{
    selector: '[contenteditable="true"]',
    updateMethod: 'html',
    events: ['input', 'change']
  }, {
    selector: 'input',
    events: ['propertychange', 'input', 'change'],
    update: function($el, val) { $el.val(val); },
    getVal: function($el) {
      return $el.val();
    }
  }, {
    selector: 'textarea',
    events: ['propertychange', 'input', 'change'],
    update: function($el, val) { $el.val(val); },
    getVal: function($el) { return $el.val(); }
  }, {
    selector: 'input[type="radio"]',
    events: ['change'],
    update: function($el, val) {
      $el.filter('[value="'+val+'"]').prop('checked', true);
    },
    getVal: function($el) {
      return $el.filter(':checked').val();
    }
  }, {
    selector: 'input[type="checkbox"]',
    events: ['change'],
    update: function($el, val, model, options) {
      if ($el.length > 1) {
        // There are multiple checkboxes so we need to go through them and check
        // any that have value attributes that match what's in the array of `val`s.
        val || (val = []);
        $el.each(function(i, el) {
          var checkbox = Backbone.$(el);
          var checked = _.contains(val, checkbox.val());
          checkbox.prop('checked', checked);
        });
      } else {
        var checked = _.isBoolean(val) ? val : val === $el.val();
        $el.prop('checked', checked);
      }
    },
    getVal: function($el) {
      var val;
      if ($el.length > 1) {
        val = _.reduce($el, function(memo, el) {
          var checkbox = Backbone.$(el);
          if (checkbox.prop('checked')) memo.push(checkbox.val());
          return memo;
        }, []);
      } else {
        val = $el.prop('checked');
        // If the checkbox has a value attribute defined, then
        // use that value. Most browsers use "on" as a default.
        var boxval = $el.val();
        if (boxval !== 'on' && boxval != null) {
          val = val ? $el.val() : null;
        }
      }
      return val;
    }
  }, {
    selector: 'select',
    events: ['change'],
    update: function($el, val, model, options) {
      var optList,
        selectConfig = options.selectOptions,
        list = selectConfig && selectConfig.collection || undefined,
        isMultiple = $el.prop('multiple');

      // If there are no `selectOptions` then we assume that the `<select>`
      // is pre-rendered and that we need to generate the collection.
      if (!selectConfig) {
        selectConfig = {};
        var getList = function($el) {
          return $el.map(function() {
            return {value:this.value, label:this.text};
          }).get();
        };
        if ($el.find('optgroup').length) {
          list = {opt_labels:[]};
          // Search for options without optgroup
          if ($el.find('> option').length) {
            list.opt_labels.push(undefined);
            _.each($el.find('> option'), function(el) {
              list[undefined] = getList(Backbone.$(el));
            });
          }
          _.each($el.find('optgroup'), function(el) {
            var label = Backbone.$(el).attr('label');
            list.opt_labels.push(label);
            list[label] = getList(Backbone.$(el).find('option'));
          });
        } else {
          list = getList($el.find('option'));
        }
      }

      // Fill in default label and path values.
      selectConfig.valuePath = selectConfig.valuePath || 'value';
      selectConfig.labelPath = selectConfig.labelPath || 'label';

      var addSelectOptions = function(optList, $el, fieldVal) {
        _.each(optList, function(obj) {
          var option = Backbone.$('<option/>'), optionVal = obj;

          var fillOption = function(text, val) {
            option.text(text);
            optionVal = val;
            // Save the option value as data so that we can reference it later.
            option.data('stickit_bind_val', optionVal);
            if (!_.isArray(optionVal) && !_.isObject(optionVal)) option.val(optionVal);
          };

          var text, val;
          if (obj === '__default__') {
            text = fieldVal.label,
            val = fieldVal.value;
          } else {
            text = evaluatePath(obj, selectConfig.labelPath),
            val = evaluatePath(obj, selectConfig.valuePath);
          }
          fillOption(text, val);

          // Determine if this option is selected.
          var isSelected = function() {
            if (!isMultiple && optionVal != null && fieldVal != null && optionVal === fieldVal) {
              return true;
            } else if (_.isObject(fieldVal) && _.isEqual(optionVal, fieldVal)) {
              return true;
            }
            return false;
          };

          if (isSelected()) {
            option.prop('selected', true);
          } else if (isMultiple && _.isArray(fieldVal)) {
            _.each(fieldVal, function(val) {
              if (_.isObject(val)) val = evaluatePath(val, selectConfig.valuePath);
              if (val === optionVal || (_.isObject(val) && _.isEqual(optionVal, val)))
                option.prop('selected', true);
            });
          }

          $el.append(option);
        });
      };

      $el.find('*').remove();

      // The `list` configuration is a function that returns the options list or a string
      // which represents the path to the list relative to `window` or the view/`this`.
      if (_.isString(list)) {
        var context = window;
        if (list.indexOf('this.') === 0) context = this;
        list = list.replace(/^[a-z]*\.(.+)$/, '$1');
        optList = evaluatePath(context, list);
      } else if (_.isFunction(list)) {
        optList = applyViewFn.call(this, list, $el, options);
      } else {
        optList = list;
      }

      // Support Backbone.Collection and deserialize.
      if (optList instanceof Backbone.Collection) {
        var collection = optList;
        var refreshSelectOptions = function() {
          var currentVal = getAttr(model, options.observe, options);
          applyViewFn.call(this, options.update, $el, currentVal, model, options);
        };
        // We need to call this function after unstickit and after an update so we don't end up
        // with multiple listeners doing the same thing
        var removeCollectionListeners = function() {
          collection.off('add remove reset sort', refreshSelectOptions);
        };
        var removeAllListeners = function() {
          removeCollectionListeners();
          collection.off('stickit:selectRefresh');
          model.off('stickit:selectRefresh');
        };
        // Remove previously set event listeners by triggering a custom event
        collection.trigger('stickit:selectRefresh');
        collection.once('stickit:selectRefresh', removeCollectionListeners, this);

        // Listen to the collection and trigger an update of the select options
        collection.on('add remove reset sort', refreshSelectOptions, this);

        // Remove the previous model event listener
        model.trigger('stickit:selectRefresh');
        model.once('stickit:selectRefresh', function() {
          model.off('stickit:unstuck', removeAllListeners);
        });
        // Remove collection event listeners once this binding is unstuck
        model.once('stickit:unstuck', removeAllListeners, this);
        optList = optList.toJSON();
      }

      if (selectConfig.defaultOption) {
        var option = _.isFunction(selectConfig.defaultOption) ?
          selectConfig.defaultOption.call(this, $el, options) :
          selectConfig.defaultOption;
        addSelectOptions(["__default__"], $el, option);
      }

      if (_.isArray(optList)) {
        addSelectOptions(optList, $el, val);
      } else if (optList.opt_labels) {
        // To define a select with optgroups, format selectOptions.collection as an object
        // with an 'opt_labels' property, as in the following:
        //
        //     {
        //       'opt_labels': ['Looney Tunes', 'Three Stooges'],
        //       'Looney Tunes': [{id: 1, name: 'Bugs Bunny'}, {id: 2, name: 'Donald Duck'}],
        //       'Three Stooges': [{id: 3, name : 'moe'}, {id: 4, name : 'larry'}, {id: 5, name : 'curly'}]
        //     }
        //
        _.each(optList.opt_labels, function(label) {
          var $group = Backbone.$('<optgroup/>').attr('label', label);
          addSelectOptions(optList[label], $group, val);
          $el.append($group);
        });
        // With no 'opt_labels' parameter, the object is assumed to be a simple value-label map.
        // Pass a selectOptions.comparator to override the default order of alphabetical by label.
      } else {
        var opts = [], opt;
        for (var i in optList) {
          opt = {};
          opt[selectConfig.valuePath] = i;
          opt[selectConfig.labelPath] = optList[i];
          opts.push(opt);
        }
        opts = _.sortBy(opts, selectConfig.comparator || selectConfig.labelPath);
        addSelectOptions(opts, $el, val);
      }
    },
    getVal: function($el) {
      var selected = $el.find('option:selected');

      if ($el.prop('multiple')) {
        return _.map(selected, function(el) {
          return Backbone.$(el).data('stickit_bind_val');
        });
      } else {
        return selected.data('stickit_bind_val');
      }
    }
  }]);


  // Export onto Backbone object
  Backbone.Stickit = Stickit;

  return Backbone.Stickit;

}));var Notification = Backbone.View.extend({
  tagName: "div",
  className: "notification",
  initialize: function(A) {
    _.extend(this, A)
  },
  render: function() {
    var A = this;
    this.$el.html(this.text).addClass(this.type).delay(this.wait).slideUp("fast", function() {
      A.remove()
    });
    return this
  }
});
var Notifier = Backbone.View.extend({
  className: "notifications",
  wait: 1000,
  loaders: {},
  initialize: function(A) {
    _.extend(this, A);
    this.model.on("flash", _.bind(this.notify, this, "flash"));
    this.model.on("error", _.bind(this.notify, this, "error"));
    this.model.on("success", _.bind(this.notify, this, "success"));
    this.model.on("start:loader", this.startLoader, this);
    this.model.on("start:loader", this.startLoader, this);
    this.model.on("finish:loader", this.finishLoader, this);
    this.model.on("start:progress", this.startProgressBar, this);
    this.model.on("finish:progress", this.finishProgressBar, this);
    this.model.on("update:progress", this.updateProgressBar, this)
  },
  notify: function(A, D, C) {
    var B = new Notification({
      text: D,
      type: A,
      wait: C || this.wait
    }).render();
    this.$el.append(B.$el);
    return B
  },
  startLoader: function(B, A) {
    if (!A) {
      return this._startRootLoader(B)
    }
    this._startSelectorLoader(B, A)
  },
  _startRootLoader: function(A) {
    if (this.loaders.rootLoader) {
      return
    }
    this.loaders.rootLoader = new Loader({
      text: A
    }).render();
    this.$el.append(this.loaders.rootLoader.el)
  },
  _startSelectorLoader: function(B, A) {
    if (this.loaders[A]) {
      return
    }
    this.loaders[A] = new SelectorLoader({
      text: B
    }).render();
    $(A).css("position", "relative").append(this.loaders[A].el)
  },
  finishLoader: function(A) {
    if (A && this.loaders[A] != null) {
      $(A).css("position", "");
      return this._finishAndClearLoader(A)
    }
    if (this.loaders.rootLoader == null) {
      return
    }
    this._finishAndClearLoader("rootLoader")
  },
  _finishAndClearLoader: function(A) {
    this.loaders[A].finish();
    this.loaders[A] = null
  },
  startProgressBar: function(A) {
    if (this.progressBar) {
      return
    }
    this.progressBar = new ProgressBar({
      text: A
    }).render();
    this.$el.append(this.progressBar.el)
  },
  updateProgressBar: function(A) {
    if (!this.progressBar) {
      return
    }
    this.progressBar.update(A)
  },
  finishProgressBar: function() {
    if (!this.progressBar) {
      return
    }
    this.progressBar.update(100);
    var A = _.bind(this.progressBar.finish, this.progressBar);
    _.delay(A, this.wait);
    this.progressBar = null
  }
});
var Loader = Notification.extend({
  className: "notification loader",
  render: function() {
    this.$el.html(this.text).append($("<em>"));
    return this
  },
  finish: function() {
    var A = this;
    this.$el.fadeOut("fast", function() {
      A.$el.remove()
    })
  }
});
var SelectorLoader = Loader.extend({

  className: "notification loader selector",

});
var ProgressBar = Loader.extend({
  className: "notification progress",
  update: function(A) {
    this.$el.find("em").width(A + "%");
    return this
  }
});var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

window.MapStick = function() {
  return {
    extend: Backbone.Model.extend
  };
};

MapStick.ChildViewContainer = (function() {
  function ChildViewContainer(views) {
    this._updateLength = bind(this._updateLength, this);
    this.apply = bind(this.apply, this);
    this.call = bind(this.call, this);
    this.remove = bind(this.remove, this);
    this.findByCid = bind(this.findByCid, this);
    this.findByIndex = bind(this.findByIndex, this);
    this.findByCustom = bind(this.findByCustom, this);
    this.findByModelCid = bind(this.findByModelCid, this);
    this.findByModel = bind(this.findByModel, this);
    this.add = bind(this.add, this);
    this._views = {};
    this._indexByModel = {};
    this._indexByCustom = {};
    this._methods = ["forEach", "each", "map", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "toArray", "first", "initial", "rest", "last", "without", "isEmpty", "pluck"];
    _.each(this._methods, (function(_this) {
      return function(method) {
        return _this[method] = function() {
          var args;
          views = _.values(_this._views);
          args = [views].concat(_.toArray(arguments));
          return _[method].apply(_, args);
        };
      };
    })(this));
    this._updateLength();
    _.each(views, this.add);
  }

  ChildViewContainer.prototype.add = function(view, customIndex) {
    var model, viewCid;
    viewCid = view.cid;
    this._views[viewCid] = view;
    if (model = view.model) {
      this._indexByModel[model.cid] = viewCid;
    }
    if (customIndex) {
      this._indexByCustom[customIndex] = viewCid;
    }
    this._updateLength();
    return this;
  };

  ChildViewContainer.prototype.findByModel = function(model) {
    return this.findByModelCid(model.cid);
  };

  ChildViewContainer.prototype.findByModelCid = function(modelCid) {
    var viewCid;
    viewCid = this._indexByModel[modelCid];
    return this.findByCid(viewCid);
  };

  ChildViewContainer.prototype.findByCustom = function(index) {
    var viewCid;
    viewCid = this._indexByCustom[index];
    return this.findByCid(viewCid);
  };

  ChildViewContainer.prototype.findByIndex = function(index) {
    return _.values(this._views)[index];
  };

  ChildViewContainer.prototype.findByCid = function(cid) {
    return this._views[cid];
  };

  ChildViewContainer.prototype.remove = function(view) {
    var viewCid;
    viewCid = view.cid;
    if (view.model) {
      delete this._indexByModel[view.model.cid];
    }
    _.any(this._indexByCustom, (function(_this) {
      return function(cid, key) {
        if (cid === viewCid) {
          delete _this._indexByCustom[key];
          return true;
        }
      };
    })(this), this);
    delete this._views[viewCid];
    this._updateLength();
    return this;
  };

  ChildViewContainer.prototype.call = function(method) {
    return this.apply(method, _.tail(arguments));
  };

  ChildViewContainer.prototype.apply = function(method, args) {
    return _.each(this._views, (function(_this) {
      return function(view) {
        if (_.isFunction(view[method])) {
          return view[method].apply(view, args || []);
        }
      };
    })(this));
  };

  ChildViewContainer.prototype._updateLength = function() {
    return this.length = _.size(this._views);
  };

  return ChildViewContainer;

})();

MapStick.getOption = function(target, optionName) {
  if (!target || !optionName) {
    return null;
  } else if (target.options && (indexOf.call(target.options, optionName) >= 0) && (target.options[optionName] !== void 0)) {
    return target.options[optionName];
  } else {
    return target[optionName];
  }
};

MapStick.triggerMethod = function() {
  var splitter, triggerMethod;
  splitter = /(^|:)(\w)/gi;
  getEventName(match, prefix, eventName)(function() {
    return eventName.toUpperCase();
  });
  triggerMethod = (function(_this) {
    return function(event) {
      var method, methodName;
      methodName = 'on' + event.replace(splitter, getEventName);
      method = _this[methodName];
      if (_.isFunction(_this.trigger)) {
        _this.trigger.apply(_this, arguments);
      }
      if (_.isFunction(method)) {
        return method.apply(_this, _.tail(arguments));
      }
    };
  })(this);
  return triggerMethod;
};

MapStick.actAsCollection = function(object, listProperty) {
  var methods;
  methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke', 'toArray', 'first', 'initial', 'rest', 'last', 'without', 'isEmpty', 'pluck'];
  return _.each(methods, (function(_this) {
    return function(method) {
      return object[method] = function() {
        var args, list;
        list = _.values(_.result(_this, listProperty));
        args = [list].concat(_.toArray(arguments));
        return _[method].apply(_, args);
      };
    };
  })(this));
};

MapStick.decodePathString = function(string) {
  if (google.maps.geometry) {
    if (string && _.isString(string) && string !== "") {
      return google.maps.geometry.encoding.decodePath(string);
    } else {
      return [];
    }
  } else {
    return console.error("please include google.maps.geometry library");
  }
};

MapStick.encodePathString = function(array) {
  if (google.maps.geometry) {
    if (array) {
      return google.maps.geometry.encoding.encodePath(array);
    }
  } else {
    return console.error("please include google.maps.geometry library");
  }
};

MapStick.isClockwise = function(path) {
  var l, previous_lat, previous_lng, r;
  if (!_.isArray(path)) {
    path = path.getArray();
  }
  path.push(path[0]);
  l = 0;
  r = 0;
  previous_lat = null;
  previous_lng = null;
  _.each(path, function(latlng) {
    var lat, lng;
    lng = latlng.lng();
    lat = latlng.lat();
    if (previous_lng && previous_lat) {
      l += lng * previous_lat;
      r += lat * previous_lng;
    }
    previous_lng = lng;
    return previous_lat = lat;
  });
  return l - r > 0;
};

MapStick.Overlay = (function(superClass) {
  extend(Overlay, superClass);

  Overlay.prototype.googleOverlayType = function() {
    return this.overlayType.split("_").map(function(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    }).join("");
  };

  Overlay.prototype.googleDrawingOverlayType = function() {
    return google.maps.drawing.OverlayType["" + (this.overlayType.split("_").map(function(string) {
      return string.toUpperCase();
    }).join(""))];
  };

  Overlay.prototype.defaultOptions = {};

  Overlay.prototype.properties = [];

  Overlay.prototype.overlayEvents = {};

  Overlay.prototype.viewOptions = ['model', 'events', 'map'];

  Overlay.prototype.bindings = {};

  Overlay.prototype.defaultOverlayEvents = [];

  Overlay.prototype.modelEvents = {};

  Overlay.prototype.triggerMethod = Marionette.triggerMethod;

  Overlay.prototype.showing = false;

  Overlay.prototype.buildOverlay = function(options) {
    return new google.maps[this.googleOverlayType()](options);
  };

  function Overlay(options) {
    if (options == null) {
      options = {};
    }
    this.updateFromDrawn = bind(this.updateFromDrawn, this);
    this.getDrawnOptions = bind(this.getDrawnOptions, this);
    this.finishDrawing = bind(this.finishDrawing, this);
    this.draw = bind(this.draw, this);
    this.render = bind(this.render, this);
    this.clearListeners = bind(this.clearListeners, this);
    this.remove = bind(this.remove, this);
    this.hide = bind(this.hide, this);
    this.show = bind(this.show, this);
    this.set = bind(this.set, this);
    this.get = bind(this.get, this);
    this.triggerOverlayEvent = bind(this.triggerOverlayEvent, this);
    this.setBoundOverlayAttributes = bind(this.setBoundOverlayAttributes, this);
    this.setBoundModelAttributes = bind(this.setBoundModelAttributes, this);
    this.listenToBoundOverlayEvents = bind(this.listenToBoundOverlayEvents, this);
    this.listenToBoundModelChanges = bind(this.listenToBoundModelChanges, this);
    this.bindPosition = bind(this.bindPosition, this);
    this.setBindings = bind(this.setBindings, this);
    this.listenToModel = bind(this.listenToModel, this);
    this.attachOverlayEvents = bind(this.attachOverlayEvents, this);
    this.buildOverlay = bind(this.buildOverlay, this);
    this.googleDrawingOverlayType = bind(this.googleDrawingOverlayType, this);
    this.googleOverlayType = bind(this.googleOverlayType, this);
    this.cid = _.uniqueId('overlay');
    this.options = _.extend({}, _.result(this, 'options'), _.isFunction(options) ? options.call(this) : options);
    this.overlayOptions = _.pick(options, this.properties);
    _.defaults(this.overlayOptions, this.defaultOptions);
    this[this.overlayType] = this.overlay = this.buildOverlay(this.overlayOptions);
    _.extend(this, _.pick(options, this.viewOptions));
    this.attachOverlayEvents();
    this.listenToModel();
    this.setBindings();
    if (_.isFunction(this.initialize)) {
      this.initialize(this.options);
    }
    this.model.on("destroy", this.remove);
    this.model.on("draw", this.draw);
  }

  Overlay.prototype.attachOverlayEvents = function() {
    return _.each(this.overlayEventNames, (function(_this) {
      return function(event_name) {
        return google.maps.event.addListener(_this.overlay, event_name, function(e) {
          if (_.isFunction(_this.trigger)) {
            _this.trigger(event_name, e);
          }
          return _this.triggerOverlayEvent(event_name, e);
        });
      };
    })(this));
  };

  Overlay.prototype.listenToModel = function() {
    if (this.model) {
      return _.each(this.modelEvents, (function(_this) {
        return function(function_name, event_name) {
          var method;
          if (_.isFunction(method = _this[function_name])) {
            return _this.model.on(event_name, method);
          }
        };
      })(this));
    }
  };

  Overlay.prototype.setBindings = function() {
    return _.each(this.bindings, (function(_this) {
      return function(opts, overlay_attribute) {
        var model_attributes;
        if (_.isString(opts)) {
          opts = {
            attribute: opts,
            overlayChanged: true
          };
        }
        if (_.isObject(opts)) {
          opts.overlay_attribute = overlay_attribute;
          if (overlay_attribute === "position" && _.isString(opts.lat) && _.isString(opts.lng)) {
            return _this.bindPosition(opts);
          } else if (model_attributes = opts.attributes || opts.attribute) {
            if (_.isString(model_attributes)) {
              opts.attributes = model_attributes = [model_attributes];
            }
            _this.setBoundOverlayAttributes(opts);
            _this.listenToBoundModelChanges(opts);
            return _this.listenToBoundOverlayEvents(opts);
          }
        }
      };
    })(this));
  };

  Overlay.prototype.bindPosition = function(opts) {
    var lat_attr, lng_attr, overlay_events, setLatLng;
    if (opts == null) {
      opts = {};
    }
    lat_attr = opts.lat;
    lng_attr = opts.lng;
    setLatLng = (function(_this) {
      return function() {
        if (_this.model.has(lat_attr) && _this.model.has(lng_attr)) {
          return _this.set({
            position: new google.maps.LatLng(_this.model.get(lat_attr), _this.model.get(lng_attr))
          });
        }
      };
    })(this);
    setLatLng();
    this.model.on("change:" + lat_attr + " change:" + lng_attr, (function(_this) {
      return function(model, value, arg) {
        var m_change;
        m_change = (arg != null ? arg : {}).mapstickChange;
        if (!m_change) {
          return setLatLng();
        }
      };
    })(this));
    overlay_events = opts.overlayEvents || this.defaultOverlayEvents;
    return _.each(overlay_events, (function(_this) {
      return function(event_name) {
        return google.maps.event.addListener(_this.overlay, event_name, function(e) {
          var latlng, pos;
          if (pos = _this.get("position")) {
            latlng = {};
            latlng[lat_attr] = pos.lat();
            latlng[lng_attr] = pos.lng();
            return _this.model.set(latlng, {
              mapstickChange: true
            });
          }
        });
      };
    })(this));
  };

  Overlay.prototype.listenToBoundModelChanges = function(opts) {
    var model_attributes, observers;
    if (opts == null) {
      opts = {};
    }
    model_attributes = opts.attributes;
    observers = model_attributes.map(function(ob) {
      return "change:" + ob;
    }).join(" ");
    return this.model.on(observers, (function(_this) {
      return function(model, value, arg) {
        var m_change;
        m_change = (arg != null ? arg : {}).mapstickChange;
        if (!m_change) {
          return _this.setBoundOverlayAttributes(opts);
        }
      };
    })(this));
  };

  Overlay.prototype.listenToBoundOverlayEvents = function(opts) {
    var events, overlay_attribute;
    if (opts == null) {
      opts = {};
    }
    overlay_attribute = opts.overlay_attribute;
    if (events = opts.overlayEvents) {
      if (_.isString(events)) {
        events = [events];
      }
    } else {
      events || (events = this.defaultOverlayEvents);
    }
    return _.each(events, (function(_this) {
      return function(event_name) {
        return google.maps.event.addListener(_this.overlay, event_name, function(e) {
          if (event_name === "drawn") {
            if (overlay_attribute === "paths") {
              _this._listenToPaths(opts);
            } else if (overlay_attribute === "path") {
              _this._listenToPath(opts);
            }
          }
          return _this.setBoundModelAttributes(opts, e);
        });
      };
    })(this));
  };

  Overlay.prototype.setBoundModelAttributes = function(opts, e) {
    var data, model_attributes, on_set, overlay_attribute, result;
    if (opts == null) {
      opts = {};
    }
    if (opts.overlayChanged) {
      overlay_attribute = opts.overlay_attribute;
      model_attributes = opts.attributes;
      if (overlay_attribute === "paths") {
        data = this.overlay.getPaths();
      } else if (overlay_attribute === "path") {
        data = this.overlay.getPath();
      } else {
        data = this.get(overlay_attribute);
      }
      result = {};
      on_set = opts.overlayChanged;
      if (_.isFunction(on_set)) {
        result = on_set(data, e);
      } else if (_.isString(on_set) && _.isFunction(this[on_set])) {
        result = this[on_set](data, e);
      } else if (on_set === true && model_attributes.length === 1) {
        result[model_attributes[0]] = data;
      }
      return this.model.set(result, {
        mapstickChange: true
      });
    }
  };

  Overlay.prototype.setBoundOverlayAttributes = function(opts) {
    var model_attributes, model_data, on_get, overlay_attribute, overlay_options, result;
    if (opts == null) {
      opts = {};
    }
    model_attributes = opts.attributes;
    overlay_attribute = opts.overlay_attribute;
    model_data = {};
    _.each(model_attributes, (function(_this) {
      return function(attr) {
        return model_data[attr] = _this.model.get(attr);
      };
    })(this));
    overlay_options = {};
    if (on_get = opts.modelChanged) {
      result = null;
      if (_.isFunction(on_get)) {
        result = on_get(model_data);
      } else if (_.isFunction(this[on_get])) {
        result = this[on_get](model_data);
      }
      overlay_options[overlay_attribute] = result;
    } else if (model_attributes.length === 1) {
      overlay_options[overlay_attribute] = this.model.get(model_attributes[0]);
    }
    this.set(overlay_options);
    if (overlay_attribute === "paths") {
      return this._listenToPaths(opts);
    } else if (overlay_attribute === "path") {
      return this._listenToPath(opts);
    }
  };

  Overlay.prototype.triggerOverlayEvent = function(event_name, e) {
    var event, method;
    if (event = this.overlayEvents[event_name]) {
      method = this[event];
      if (_.isFunction(method)) {
        method(e);
      } else {
        console.error("no such handler for event: '" + event_name + "'");
      }
    }
    method = this["on" + (event_name.split("_").map(function(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    }).join(""))];
    if (_.isFunction(method)) {
      return method(e);
    }
  };

  Overlay.prototype.get = function(attribute) {
    return this.overlay.get(attribute);
  };

  Overlay.prototype.set = function(attribute, value) {
    if (_.isObject(attribute)) {
      return this.overlay.setOptions(attribute);
    } else if (_.isString(attribute)) {
      return this.overlay.set(attribute, value);
    } else {
      return console.error("can't set that");
    }
  };

  Overlay.prototype.show = function(map) {
    this.showing = true;
    if (map) {
      this.map = map;
    }
    return this.set("map", this.map);
  };

  Overlay.prototype.hide = function() {
    this.showing = false;
    return this.set("map", null);
  };

  Overlay.prototype.remove = function() {
    this.clearListeners();
    return this.set("map", null);
  };

  Overlay.prototype.clearListeners = function() {
    if (this.overlay) {
      return google.maps.event.clearListeners(this.overlay);
    }
  };

  Overlay.prototype.render = function() {
    if (this.showing) {
      return this.overlay.setMap(this.map);
    }
  };

  Overlay.prototype.draw = function(map) {
    if (map == null) {
      map = this.map;
    }
    if (google.maps.drawing) {
      if (MapStick.drawingManager == null) {
        MapStick.drawingManager = new google.maps.drawing.DrawingManager({
          map: map,
          drawingControl: false
        });
      }
      MapStick.drawingManager.setDrawingMode(this.overlayType);
      google.maps.event.clearInstanceListeners(MapStick.drawingManager);
      return google.maps.event.addListener(MapStick.drawingManager, "overlaycomplete", (function(_this) {
        return function(e) {
          return _this.finishDrawing(e.overlay);
        };
      })(this));
    } else {
      return console.error("please include google.maps.drawing library");
    }
  };

  Overlay.prototype.finishDrawing = function(overlay) {
    this.updateFromDrawn(overlay);
    overlay.setMap(null);
    return MapStick.drawingManager.setDrawingMode(null);
  };

  Overlay.prototype.getDrawnOptions = function(overlay) {
    return {};
  };

  Overlay.prototype.updateFromDrawn = function(overlay) {
    this.overlay.setOptions(this.getDrawnOptions(overlay));
    this.model.trigger("overlay:drawn");
    return google.maps.event.trigger(this.overlay, "drawn");
  };

  return Overlay;

})(Backbone.View);

MapStick.Marker = (function(superClass) {
  extend(Marker, superClass);

  function Marker() {
    this.getDrawnOptions = bind(this.getDrawnOptions, this);
    return Marker.__super__.constructor.apply(this, arguments);
  }

  Marker.prototype.overlayType = "marker";

  Marker.prototype.overlayEventNames = ["animation_changed", "click", "clickable_changed", "cursor_changed", "dblclick", "drag", "dragend", "draggable_changed", "dragstart", "flat_changed", "icon_changed", "mousedown", "mouseout", "mouseover", "mouseup", "position_changed", "rightclick", "shape_changed", "title_changed", "visible_changed", "zindex_changed"];

  Marker.prototype.defaultOverlayEvents = ["drag", "dragend", "dragstart", "drawn"];

  Marker.prototype.properties = ["anchorPoint", "animation", "clickable", "crossOnDrag", "cursor", "draggable", "icon", "map", "opacity", "optimized", "position", "shape", "title", "visible", "zIndex"];

  Marker.prototype.getDrawnOptions = function(overlay) {
    return {
      position: overlay.getPosition()
    };
  };

  return Marker;

})(MapStick.Overlay);

MapStick.OverlayWithPath = (function(superClass) {
  extend(OverlayWithPath, superClass);

  function OverlayWithPath() {
    this._listenToPath = bind(this._listenToPath, this);
    this.getDrawnOptions = bind(this.getDrawnOptions, this);
    this.setOverlayPathFromEncodedString = bind(this.setOverlayPathFromEncodedString, this);
    this.getEncodedPathFromOverlay = bind(this.getEncodedPathFromOverlay, this);
    return OverlayWithPath.__super__.constructor.apply(this, arguments);
  }

  OverlayWithPath.prototype.defaultOptions = {
    path: new google.maps.MVCArray
  };

  OverlayWithPath.prototype.getEncodedPathFromOverlay = function() {
    return MapStick.encodePathString(this.overlay.getPath());
  };

  OverlayWithPath.prototype.setOverlayPathFromEncodedString = function(string) {
    return this.overlay.setPath(MapStick.decodePathString(string));
  };

  OverlayWithPath.prototype.getDrawnOptions = function(overlay) {
    return {
      path: overlay.getPath()
    };
  };

  OverlayWithPath.prototype._listenToPath = function(opts) {
    var path;
    if (opts == null) {
      opts = {};
    }
    path = this.overlay.getPath();
    return _.each(["insert_at", "remove_at", "set_at"], (function(_this) {
      return function(event_name) {
        return google.maps.event.addListener(path, event_name, function(e) {
          return _this.setBoundModelAttributes(opts, e);
        });
      };
    })(this));
  };

  return OverlayWithPath;

})(MapStick.Overlay);

MapStick.Polyline = (function(superClass) {
  extend(Polyline, superClass);

  function Polyline() {
    return Polyline.__super__.constructor.apply(this, arguments);
  }

  Polyline.prototype.overlayType = "polyline";

  Polyline.prototype.overlayEventNames = ["click", "dblclick", "drag", "dragend", "dragstart", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "rightclick"];

  Polyline.prototype.defaultOverlayEvents = ["drag", "dragend", "drawn"];

  Polyline.prototype.properties = ["clickable", "draggable", "editable", "geodesic", "icons", "map", "path", "strokeColor", "strokeOpacity", "strokeWeight", "visible", "zIndex"];

  return Polyline;

})(MapStick.OverlayWithPath);

MapStick.Polygon = (function(superClass) {
  extend(Polygon, superClass);

  function Polygon() {
    this._listenToPaths = bind(this._listenToPaths, this);
    this.setOverlayPathsFromEncodedStrings = bind(this.setOverlayPathsFromEncodedStrings, this);
    this.getEncodedPathsFromOverlay = bind(this.getEncodedPathsFromOverlay, this);
    this.finishExclusion = bind(this.finishExclusion, this);
    this.drawExclusion = bind(this.drawExclusion, this);
    return Polygon.__super__.constructor.apply(this, arguments);
  }

  Polygon.prototype.overlayType = "polygon";

  Polygon.prototype.overlayEventNames = ["click", "dblclick", "drag", "dragend", "dragstart", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "rightclick"];

  Polygon.prototype.defaultOverlayEvents = ["drag", "dragend", "drawn"];

  Polygon.prototype.properties = ["zIndex", "visible", "strokeWeight", "strokePosition", "strokeOpacity", "strokeColor", "paths", "map", "geodesic", "fillOpacity", "fillColor", "editable", "draggable", "clickable"];

  Polygon.prototype.drawExclusion = function() {
    if (google.maps.drawing) {
      if (MapStick.drawingManager == null) {
        MapStick.drawingManager = new google.maps.drawing.DrawingManager({
          map: this.map,
          drawingControl: false
        });
      }
      MapStick.drawingManager.setDrawingMode("polygon");
      google.maps.event.clearInstanceListeners(MapStick.drawingManager);
      return google.maps.event.addListener(MapStick.drawingManager, "polygoncomplete", (function(_this) {
        return function(polygon) {
          return _this.finishExclusion(polygon);
        };
      })(this));
    } else {
      return console.error("please include google.maps.drawing library");
    }
  };

  Polygon.prototype.finishExclusion = function(polygon) {
    var path, paths;
    path = polygon.getPath();
    if (MapStick.isClockwise(path) === MapStick.isClockwise(this.overlay.getPath())) {
      path = new google.maps.MVCArray(path.getArray().reverse());
    }
    paths = this.overlay.getPaths();
    paths.push(path);
    this.overlay.setPaths(paths);
    polygon.setMap(null);
    MapStick.drawingManager.setDrawingMode(null);
    return google.maps.event.trigger(this.overlay, "drawn");
  };

  Polygon.prototype.getEncodedPathsFromOverlay = function() {
    return _.collect(this.overlay.getPaths().getArray(), (function(_this) {
      return function(path) {
        return MapStick.encodePathString(path);
      };
    })(this));
  };

  Polygon.prototype.setOverlayPathsFromEncodedStrings = function(paths) {
    if (_.isString(paths)) {
      paths = paths.split(",");
    }
    paths = _.collect(paths, (function(_this) {
      return function(string) {
        return MapStick.decodePathString(string);
      };
    })(this));
    return this.overlay.setPaths(paths);
  };

  Polygon.prototype._listenToPaths = function(opts) {
    var paths;
    if (opts == null) {
      opts = {};
    }
    paths = this.overlay.getPaths();
    return _.each(["insert_at", "remove_at", "set_at"], (function(_this) {
      return function(event_name) {
        return paths.forEach(function(path) {
          return google.maps.event.addListener(path, event_name, function(e) {
            return _this.setBoundModelAttributes(opts);
          });
        });
      };
    })(this));
  };

  return Polygon;

})(MapStick.OverlayWithPath);

MapStick.Rectangle = (function(superClass) {
  extend(Rectangle, superClass);

  function Rectangle() {
    this.getDrawnOptions = bind(this.getDrawnOptions, this);
    return Rectangle.__super__.constructor.apply(this, arguments);
  }

  Rectangle.prototype.overlayType = "rectangle";

  Rectangle.prototype.overlayEventNames = ["bounds_changed", "click", "dblclick", "drag", "dragend", "dragstart", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "rightclick"];

  Rectangle.prototype.defaultOverlayEvents = ["drag", "dragend", "dragstart", "drawn"];

  Rectangle.prototype.properties = ["bounds", "clickable", "draggable", "editable", "fillColor", "fillOpacity", "map", "strokeColor", "strokeOpacity", "strokePosition", "strokeWeight", "visible", "zIndex"];

  Rectangle.prototype.getDrawnOptions = function(overlay) {
    return {
      bounds: overlay.getBounds()
    };
  };

  return Rectangle;

})(MapStick.Overlay);

MapStick.Circle = (function(superClass) {
  extend(Circle, superClass);

  function Circle() {
    this.getDrawnOptions = bind(this.getDrawnOptions, this);
    return Circle.__super__.constructor.apply(this, arguments);
  }

  Circle.prototype.overlayType = "circle";

  Circle.prototype.overlayEventNames = ["center_changed", "click", "dblclick", "drag", "dragend", "dragstart", "mousedown", "mousemove", "mouseout", "mouseup", "mouseover", "radius_changed", "rightclick"];

  Circle.prototype.defaultOverlayEvents = ["drag", "dragend", "dragstart", "drawn"];

  Circle.prototype.properties = ["center", "clickable", "draggable", "editable", "fillColor", "fillOpacity", "map", "radius", "strokeColor", "strokeOpacity", "strokePosition", "strokeWeight", "visible", "zIndex"];

  Circle.prototype.getDrawnOptions = function(overlay) {
    return {
      center: overlay.getCenter(),
      radius: overlay.getRadius()
    };
  };

  return Circle;

})(MapStick.Overlay);

MapStick.InfoWindow = (function(superClass) {
  extend(InfoWindow, superClass);

  function InfoWindow() {
    this.setContentView = bind(this.setContentView, this);
    this.close = bind(this.close, this);
    this.open = bind(this.open, this);
    this.isOpen = bind(this.isOpen, this);
    return InfoWindow.__super__.constructor.apply(this, arguments);
  }

  InfoWindow.prototype.overlayType = "info_window";

  InfoWindow.prototype.overlayEventNames = ["closeclick", "content_changed", "domready", "position_changed", "zindex_changed"];

  InfoWindow.prototype.properties = ["content", "disableAutoPan", "maxWidth", "pixelOffset", "position", "zIndex"];

  InfoWindow.prototype.initialize = function(arg) {
    this.content_view = (arg != null ? arg : {}).content_view;
    InfoWindow.__super__.initialize.apply(this, arguments);
    if (this.content_view) {
      return this.setContentView();
    }
  };

  InfoWindow.prototype.isOpen = function() {
    var map;
    map = this.get("map");
    return map !== null && typeof map !== "undefined";
  };

  InfoWindow.prototype.open = function(arg) {
    var anchor, map, position, ref;
    ref = arg != null ? arg : {}, map = ref.map, anchor = ref.anchor, position = ref.position;
    if (anchor) {
      return this.overlay.open(map || (map = anchor.getMap()), anchor);
    } else if (position) {
      this.overlay.setPosition(position);
      if (map || (map = this.map)) {
        return this.overlay.open(map);
      }
    }
  };

  InfoWindow.prototype.close = function() {
    return this.overlay.close();
  };

  InfoWindow.prototype.setContentView = function(content_view) {
    if (content_view == null) {
      content_view = this.content_view;
    }
    content_view.render();
    return this.overlay.setContent(content_view.$el[0]);
  };

  return InfoWindow;

})(MapStick.Overlay);

MapStick.OverlayCollection = (function(superClass) {
  extend(OverlayCollection, superClass);

  OverlayCollection.prototype.itemType = "model";

  OverlayCollection.prototype.triggerMethod = Marionette.triggerMethod;

  OverlayCollection.prototype.viewOptions = ['collection', 'model', 'map'];

  OverlayCollection.prototype.showing = false;

  OverlayCollection.prototype.collectionEvents = {};

  function OverlayCollection(options) {
    this.closeChildren = bind(this.closeChildren, this);
    this.close = bind(this.close, this);
    this.triggerRendered = bind(this.triggerRendered, this);
    this.triggerBeforeRender = bind(this.triggerBeforeRender, this);
    this._initChildViewStorage = bind(this._initChildViewStorage, this);
    this.removeChildView = bind(this.removeChildView, this);
    this.removeItemView = bind(this.removeItemView, this);
    this.buildItemView = bind(this.buildItemView, this);
    this.addItemView = bind(this.addItemView, this);
    this.getItemView = bind(this.getItemView, this);
    this.showCollection = bind(this.showCollection, this);
    this._renderChildren = bind(this._renderChildren, this);
    this.render = bind(this.render, this);
    this.hide = bind(this.hide, this);
    this.show = bind(this.show, this);
    this.addChildView = bind(this.addChildView, this);
    this.removeListeners = bind(this.removeListeners, this);
    this.listenToCollection = bind(this.listenToCollection, this);
    this._initialEvents = bind(this._initialEvents, this);
    this._initialCollection = bind(this._initialCollection, this);
    this.options = _.extend({}, _.result(this, 'options'), _.isFunction(options) ? options.call(this) : options);
    _.extend(this, _.pick(options, this.viewOptions));
    this._initChildViewStorage();
    this._initialCollection();
    this._initialEvents();
    this.listenToCollection();
    if (_.isFunction(this.initialize)) {
      this.initialize(this.options);
    }
  }

  OverlayCollection.prototype._initialCollection = function() {
    return this.collection.each((function(_this) {
      return function(item, index) {
        var ItemView;
        if (ItemView = _this.getItemView(item)) {
          return _this.addItemView(item, ItemView, index);
        }
      };
    })(this));
  };

  OverlayCollection.prototype._initialEvents = function() {
    if (this.collection) {
      this.listenTo(this.collection, "add", this.addChildView);
      this.listenTo(this.collection, "remove", this.removeItemView);
      return this.listenTo(this.collection, "reset", this.render);
    }
  };

  OverlayCollection.prototype.listenToCollection = function() {
    if (this.collection) {
      return _.each(this.collectionEvents, (function(_this) {
        return function(function_name, event_name) {
          var method;
          if (_.isFunction(method = _this[function_name])) {
            return _this.collection.on(event_name, method);
          }
        };
      })(this));
    }
  };

  OverlayCollection.prototype.removeListeners = function() {
    if (this.collection) {
      this.stopListening(this.collection, "add");
      this.stopListening(this.collection, "remove");
      return this.stopListening(this.collection, "reset");
    }
  };

  OverlayCollection.prototype.addChildView = function(item, collection, options) {
    var ItemView;
    if (ItemView = this.getItemView(item)) {
      return this.addItemView(item, ItemView);
    }
  };

  OverlayCollection.prototype.show = function(map) {
    this.showing = true;
    if (map) {
      this.map = map;
    }
    return this.children.apply("show");
  };

  OverlayCollection.prototype.hide = function() {
    this.showing = false;
    return this.children.apply("hide");
  };

  OverlayCollection.prototype.render = function() {
    this.isClosed = false;
    this.triggerBeforeRender();
    this._renderChildren();
    this.triggerRendered();
    return this;
  };

  OverlayCollection.prototype._renderChildren = function() {
    this.closeChildren();
    return this.showCollection();
  };

  OverlayCollection.prototype.showCollection = function() {
    return this.collection.each((function(_this) {
      return function(item) {
        var ItemView;
        if (ItemView = _this.getItemView(item)) {
          return _this.addItemView(item, ItemView);
        }
      };
    })(this));
  };

  OverlayCollection.prototype.getItemView = function(item) {
    var itemView;
    itemView = MapStick.getOption(this, "itemView");
    if (!itemView) {
      console.error("An 'itemView' must be specified for class: " + this.constructor.name);
    }
    return itemView;
  };

  OverlayCollection.prototype.addItemView = function(item, ItemView, index) {
    var itemViewOptions, view;
    itemViewOptions = MapStick.getOption(this, "itemViewOptions");
    if (_.isFunction(itemViewOptions)) {
      itemViewOptions = itemViewOptions.call(this, item, index);
    }
    view = this.buildItemView(item, ItemView, itemViewOptions);
    this.triggerMethod("before:item:added", view);
    this.children.add(view);
    if (this.showing) {
      view.show();
    } else {
      view.hide();
    }
    this.triggerMethod("after:item:added", view);
    return view;
  };

  OverlayCollection.prototype.buildItemView = function(item, ItemViewType, itemViewOptions) {
    var options, view;
    options = _.extend({
      model: item,
      map: this.map
    }, itemViewOptions);
    view = new ItemViewType(options);
    return view;
  };

  OverlayCollection.prototype.removeItemView = function(item) {
    var view;
    view = this.children.findByModel(item);
    return this.removeChildView(view);
  };

  OverlayCollection.prototype.removeChildView = function(view) {
    if (view) {
      if (view.close) {
        view.close();
      } else if (view.remove) {
        view.remove();
      }
      this.stopListening(view);
      this.children.remove(view);
    }
    return this.triggerMethod("item:removed", view);
  };

  OverlayCollection.prototype._initChildViewStorage = function() {
    return this.children = new MapStick.ChildViewContainer;
  };

  OverlayCollection.prototype.triggerBeforeRender = function() {
    this.triggerMethod("before:render", this);
    return this.triggerMethod("collection:before:render", this);
  };

  OverlayCollection.prototype.triggerRendered = function() {
    this.triggerMethod("render", this);
    return this.triggerMethod("collection:rendered", this);
  };

  OverlayCollection.prototype.close = function() {
    if (this.isClosed) {
      return;
    }
    this.triggerMethod("collection:before:close");
    this.closeChildren();
    this.removeListeners();
    return this.triggerMethod("collection:closed");
  };

  OverlayCollection.prototype.closeChildren = function() {
    return this.children.each((function(_this) {
      return function(child, index) {
        return _this.removeChildView(child);
      };
    })(this));
  };

  return OverlayCollection;

})(Backbone.View);// Backbone.Validation v0.11.3
//
// Copyright (c) 2011-2015 Thomas Pedersen
// Distributed under MIT License
//
// Documentation and full license available at:
// http://thedersen.com/projects/backbone-validation
Backbone.Validation = (function(_){
  'use strict';

  // Default options
  // ---------------

  var defaultOptions = {
    forceUpdate: false,
    selector: 'name',
    labelFormatter: 'sentenceCase',
    valid: Function.prototype,
    invalid: Function.prototype
  };


  // Helper functions
  // ----------------

  // Formatting functions used for formatting error messages
  var formatFunctions = {
    // Uses the configured label formatter to format the attribute name
    // to make it more readable for the user
    formatLabel: function(attrName, model) {
      return defaultLabelFormatters[defaultOptions.labelFormatter](attrName, model);
    },

    // Replaces nummeric placeholders like {0} in a string with arguments
    // passed to the function
    format: function() {
      var args = Array.prototype.slice.call(arguments),
          text = args.shift();
      return text.replace(/\{(\d+)\}/g, function(match, number) {
        return typeof args[number] !== 'undefined' ? args[number] : match;
      });
    }
  };

  // Flattens an object
  // eg:
  //
  //     var o = {
  //       owner: {
  //         name: 'Backbone',
  //         address: {
  //           street: 'Street',
  //           zip: 1234
  //         }
  //       }
  //     };
  //
  // becomes:
  //
  //     var o = {
  //       'owner': {
  //         name: 'Backbone',
  //         address: {
  //           street: 'Street',
  //           zip: 1234
  //         }
  //       },
  //       'owner.name': 'Backbone',
  //       'owner.address': {
  //         street: 'Street',
  //         zip: 1234
  //       },
  //       'owner.address.street': 'Street',
  //       'owner.address.zip': 1234
  //     };
  // This may seem redundant, but it allows for maximum flexibility
  // in validation rules.
  var flatten = function (obj, into, prefix) {
    into = into || {};
    prefix = prefix || '';

    _.each(obj, function(val, key) {
      if(obj.hasOwnProperty(key)) {
        if (!!val && typeof val === 'object' && val.constructor === Object) {
          flatten(val, into, prefix + key + '.');
        }

        // Register the current level object as well
        into[prefix + key] = val;
      }
    });

    return into;
  };

  // Validation
  // ----------

  var Validation = (function(){

    // Returns an object with undefined properties for all
    // attributes on the model that has defined one or more
    // validation rules.
    var getValidatedAttrs = function(model, attrs) {
      attrs = attrs || _.keys(_.result(model, 'validation') || {});
      return _.reduce(attrs, function(memo, key) {
        memo[key] = void 0;
        return memo;
      }, {});
    };

    // Returns an array with attributes passed through options
    var getOptionsAttrs = function(options, view) {
      var attrs = options.attributes;
      if (_.isFunction(attrs)) {
        attrs = attrs(view);
      } else if (_.isString(attrs) && (_.isFunction(defaultAttributeLoaders[attrs]))) {
        attrs = defaultAttributeLoaders[attrs](view);
      }
      if (_.isArray(attrs)) {
        return attrs;
      }
    };


    // Looks on the model for validations for a specified
    // attribute. Returns an array of any validators defined,
    // or an empty array if none is defined.
    var getValidators = function(model, attr) {
      var attrValidationSet = model.validation ? _.result(model, 'validation')[attr] || {} : {};

      // If the validator is a function or a string, wrap it in a function validator
      if (_.isFunction(attrValidationSet) || _.isString(attrValidationSet)) {
        attrValidationSet = {
          fn: attrValidationSet
        };
      }

      // Stick the validator object into an array
      if(!_.isArray(attrValidationSet)) {
        attrValidationSet = [attrValidationSet];
      }

      // Reduces the array of validators into a new array with objects
      // with a validation method to call, the value to validate against
      // and the specified error message, if any
      return _.reduce(attrValidationSet, function(memo, attrValidation) {
        _.each(_.without(_.keys(attrValidation), 'msg'), function(validator) {
          memo.push({
            fn: defaultValidators[validator],
            val: attrValidation[validator],
            msg: attrValidation.msg
          });
        });
        return memo;
      }, []);
    };

    // Validates an attribute against all validators defined
    // for that attribute. If one or more errors are found,
    // the first error message is returned.
    // If the attribute is valid, an empty string is returned.
    var validateAttr = function(model, attr, value, computed) {
      // Reduces the array of validators to an error message by
      // applying all the validators and returning the first error
      // message, if any.
      return _.reduce(getValidators(model, attr), function(memo, validator){
        // Pass the format functions plus the default
        // validators as the context to the validator
        var ctx = _.extend({}, formatFunctions, defaultValidators),
            result = validator.fn.call(ctx, value, attr, validator.val, model, computed);

        if(result === false || memo === false) {
          return false;
        }
        if (result && !memo) {
          return _.result(validator, 'msg') || result;
        }
        return memo;
      }, '');
    };

    // Loops through the model's attributes and validates the specified attrs.
    // Returns and object containing names of invalid attributes
    // as well as error messages.
    var validateModel = function(model, attrs, validatedAttrs) {
      var error,
          invalidAttrs = {},
          isValid = true,
          computed = _.clone(attrs);

      _.each(validatedAttrs, function(val, attr) {
        error = validateAttr(model, attr, val, computed);
        if (error) {
          invalidAttrs[attr] = error;
          isValid = false;
        }
      });

      return {
        invalidAttrs: invalidAttrs,
        isValid: isValid
      };
    };

    // Contains the methods that are mixed in on the model when binding
    var mixin = function(view, options) {
      return {

        // Check whether or not a value, or a hash of values
        // passes validation without updating the model
        preValidate: function(attr, value) {
          var self = this,
              result = {},
              error;

          if(_.isObject(attr)){
            _.each(attr, function(value, key) {
              error = self.preValidate(key, value);
              if(error){
                result[key] = error;
              }
            });

            return _.isEmpty(result) ? undefined : result;
          }
          else {
            return validateAttr(this, attr, value, _.extend({}, this.attributes));
          }
        },

        // Check to see if an attribute, an array of attributes or the
        // entire model is valid. Passing true will force a validation
        // of the model.
        isValid: function(option) {
          var flattened, attrs, error, invalidAttrs;

          option = option || getOptionsAttrs(options, view);

          if(_.isString(option)){
            attrs = [option];
          } else if(_.isArray(option)) {
            attrs = option;
          }
          if (attrs) {
            flattened = flatten(this.attributes);
            //Loop through all associated views
            _.each(this.associatedViews, function(view) {
              _.each(attrs, function (attr) {
                error = validateAttr(this, attr, flattened[attr], _.extend({}, this.attributes));
                if (error) {
                  options.invalid(view, attr, error, options.selector);
                  invalidAttrs = invalidAttrs || {};
                  invalidAttrs[attr] = error;
                } else {
                  options.valid(view, attr, options.selector);
                }
              }, this);
            }, this);
          }

          if(option === true) {
            invalidAttrs = this.validate();
          }
          if (invalidAttrs) {
            this.trigger('invalid', this, invalidAttrs, {validationError: invalidAttrs});
          }
          return attrs ? !invalidAttrs : this.validation ? this._isValid : true;
        },

        // This is called by Backbone when it needs to perform validation.
        // You can call it manually without any parameters to validate the
        // entire model.
        validate: function(attrs, setOptions){
          var model = this,
              validateAll = !attrs,
              opt = _.extend({}, options, setOptions),
              validatedAttrs = getValidatedAttrs(model, getOptionsAttrs(options, view)),
              allAttrs = _.extend({}, validatedAttrs, model.attributes, attrs),
              flattened = flatten(allAttrs),
              changedAttrs = attrs ? flatten(attrs) : flattened,
              result = validateModel(model, allAttrs, _.pick(flattened, _.keys(validatedAttrs)));

          model._isValid = result.isValid;

          //After validation is performed, loop through all associated views
          _.each(model.associatedViews, function(view){

            // After validation is performed, loop through all validated and changed attributes
            // and call the valid and invalid callbacks so the view is updated.
            _.each(validatedAttrs, function(val, attr){
                var invalid = result.invalidAttrs.hasOwnProperty(attr),
                  changed = changedAttrs.hasOwnProperty(attr);

                if(!invalid){
                  opt.valid(view, attr, opt.selector);
                }
                if(invalid && (changed || validateAll)){
                  opt.invalid(view, attr, result.invalidAttrs[attr], opt.selector);
                }
            });
          });

          // Trigger validated events.
          // Need to defer this so the model is actually updated before
          // the event is triggered.
          _.defer(function() {
            model.trigger('validated', model._isValid, model, result.invalidAttrs);
            model.trigger('validated:' + (model._isValid ? 'valid' : 'invalid'), model, result.invalidAttrs);
          });

          // Return any error messages to Backbone, unless the forceUpdate flag is set.
          // Then we do not return anything and fools Backbone to believe the validation was
          // a success. That way Backbone will update the model regardless.
          if (!opt.forceUpdate && _.intersection(_.keys(result.invalidAttrs), _.keys(changedAttrs)).length > 0) {
            return result.invalidAttrs;
          }
        }
      };
    };

    // Helper to mix in validation on a model. Stores the view in the associated views array.
    var bindModel = function(view, model, options) {
      if (model.associatedViews) {
        model.associatedViews.push(view);
      } else {
        model.associatedViews = [view];
      }
      _.extend(model, mixin(view, options));
    };

    // Removes view from associated views of the model or the methods
    // added to a model if no view or single view provided
    var unbindModel = function(model, view) {
      if (view && model.associatedViews.length > 1){
        model.associatedViews = _.without(model.associatedViews, view);
      } else {
        delete model.validate;
        delete model.preValidate;
        delete model.isValid;
        delete model.associatedViews;
      }
    };

    // Mix in validation on a model whenever a model is
    // added to a collection
    var collectionAdd = function(model) {
      bindModel(this.view, model, this.options);
    };

    // Remove validation from a model whenever a model is
    // removed from a collection
    var collectionRemove = function(model) {
      unbindModel(model);
    };

    // Returns the public methods on Backbone.Validation
    return {

      // Current version of the library
      version: '0.11.3',

      // Called to configure the default options
      configure: function(options) {
        _.extend(defaultOptions, options);
      },

      // Hooks up validation on a view with a model
      // or collection
      bind: function(view, options) {
        options = _.extend({}, defaultOptions, defaultCallbacks, options);

        var model = options.model || view.model,
            collection = options.collection || view.collection;

        if(typeof model === 'undefined' && typeof collection === 'undefined'){
          throw 'Before you execute the binding your view must have a model or a collection.\n' +
                'See http://thedersen.com/projects/backbone-validation/#using-form-model-validation for more information.';
        }

        if(model) {
          bindModel(view, model, options);
        }
        else if(collection) {
          collection.each(function(model){
            bindModel(view, model, options);
          });
          collection.bind('add', collectionAdd, {view: view, options: options});
          collection.bind('remove', collectionRemove);
        }
      },

      // Removes validation from a view with a model
      // or collection
      unbind: function(view, options) {
        options = _.extend({}, options);
        var model = options.model || view.model,
            collection = options.collection || view.collection;

        if(model) {
          unbindModel(model, view);
        }
        else if(collection) {
          collection.each(function(model){
            unbindModel(model, view);
          });
          collection.unbind('add', collectionAdd);
          collection.unbind('remove', collectionRemove);
        }
      },

      // Used to extend the Backbone.Model.prototype
      // with validation
      mixin: mixin(null, defaultOptions)
    };
  }());


  // Callbacks
  // ---------

  var defaultCallbacks = Validation.callbacks = {

    // Gets called when a previously invalid field in the
    // view becomes valid. Removes any error message.
    // Should be overridden with custom functionality.
    valid: function(view, attr, selector) {
      view.$('[' + selector + '~="' + attr + '"]')
          .removeClass('invalid')
          .removeAttr('data-error');
    },

    // Gets called when a field in the view becomes invalid.
    // Adds a error message.
    // Should be overridden with custom functionality.
    invalid: function(view, attr, error, selector) {
      view.$('[' + selector + '~="' + attr + '"]')
          .addClass('invalid')
          .attr('data-error', error);
    }
  };


  // Patterns
  // --------

  var defaultPatterns = Validation.patterns = {
    // Matches any digit(s) (i.e. 0-9)
    digits: /^\d+$/,

    // Matches any number (e.g. 100.000)
    number: /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/,

    // Matches a valid email address (e.g. mail@example.com)
    email: /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,

    // Mathes any valid url (e.g. http://www.xample.com)
    url: /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i
  };


  // Error messages
  // --------------

  // Error message for the build in validators.
  // {x} gets swapped out with arguments form the validator.
  var defaultMessages = Validation.messages = {
    required: '{0} is required',
    acceptance: '{0} must be accepted',
    min: '{0} must be greater than or equal to {1}',
    max: '{0} must be less than or equal to {1}',
    range: '{0} must be between {1} and {2}',
    length: '{0} must be {1} characters',
    minLength: '{0} must be at least {1} characters',
    maxLength: '{0} must be at most {1} characters',
    rangeLength: '{0} must be between {1} and {2} characters',
    oneOf: '{0} must be one of: {1}',
    equalTo: '{0} must be the same as {1}',
    digits: '{0} must only contain digits',
    number: '{0} must be a number',
    email: '{0} must be a valid email',
    url: '{0} must be a valid url',
    inlinePattern: '{0} is invalid'
  };

  // Label formatters
  // ----------------

  // Label formatters are used to convert the attribute name
  // to a more human friendly label when using the built in
  // error messages.
  // Configure which one to use with a call to
  //
  //     Backbone.Validation.configure({
  //       labelFormatter: 'label'
  //     });
  var defaultLabelFormatters = Validation.labelFormatters = {

    // Returns the attribute name with applying any formatting
    none: function(attrName) {
      return attrName;
    },

    // Converts attributeName or attribute_name to Attribute name
    sentenceCase: function(attrName) {
      return attrName.replace(/(?:^\w|[A-Z]|\b\w)/g, function(match, index) {
        return index === 0 ? match.toUpperCase() : ' ' + match.toLowerCase();
      }).replace(/_/g, ' ');
    },

    // Looks for a label configured on the model and returns it
    //
    //      var Model = Backbone.Model.extend({
    //        validation: {
    //          someAttribute: {
    //            required: true
    //          }
    //        },
    //
    //        labels: {
    //          someAttribute: 'Custom label'
    //        }
    //      });
    label: function(attrName, model) {
      return (model.labels && model.labels[attrName]) || defaultLabelFormatters.sentenceCase(attrName, model);
    }
  };

  // AttributeLoaders

  var defaultAttributeLoaders = Validation.attributeLoaders = {
    inputNames: function (view) {
      var attrs = [];
      if (view) {
        view.$('form [name]').each(function () {
          if (/^(?:input|select|textarea)$/i.test(this.nodeName) && this.name &&
            this.type !== 'submit' && attrs.indexOf(this.name) === -1) {
            attrs.push(this.name);
          }
        });
      }
      return attrs;
    }
  };


  // Built in validators
  // -------------------

  var defaultValidators = Validation.validators = (function(){
    // Use native trim when defined
    var trim = String.prototype.trim ?
      function(text) {
        return text === null ? '' : String.prototype.trim.call(text);
      } :
      function(text) {
        var trimLeft = /^\s+/,
            trimRight = /\s+$/;

        return text === null ? '' : text.toString().replace(trimLeft, '').replace(trimRight, '');
      };

    // Determines whether or not a value is a number
    var isNumber = function(value){
      return _.isNumber(value) || (_.isString(value) && value.match(defaultPatterns.number));
    };

    // Determines whether or not a value is empty
    var hasValue = function(value) {
      return !(_.isNull(value) || _.isUndefined(value) || (_.isString(value) && trim(value) === '') || (_.isArray(value) && _.isEmpty(value)));
    };

    return {
      // Function validator
      // Lets you implement a custom function used for validation
      fn: function(value, attr, fn, model, computed) {
        if(_.isString(fn)){
          fn = model[fn];
        }
        return fn.call(model, value, attr, computed);
      },

      // Required validator
      // Validates if the attribute is required or not
      // This can be specified as either a boolean value or a function that returns a boolean value
      required: function(value, attr, required, model, computed) {
        var isRequired = _.isFunction(required) ? required.call(model, value, attr, computed) : required;
        if(!isRequired && !hasValue(value)) {
          return false; // overrides all other validators
        }
        if (isRequired && !hasValue(value)) {
          return this.format(defaultMessages.required, this.formatLabel(attr, model));
        }
      },

      // Acceptance validator
      // Validates that something has to be accepted, e.g. terms of use
      // `true` or 'true' are valid
      acceptance: function(value, attr, accept, model) {
        if(value !== 'true' && (!_.isBoolean(value) || value === false)) {
          return this.format(defaultMessages.acceptance, this.formatLabel(attr, model));
        }
      },

      // Min validator
      // Validates that the value has to be a number and equal to or greater than
      // the min value specified
      min: function(value, attr, minValue, model) {
        if (!isNumber(value) || value < minValue) {
          return this.format(defaultMessages.min, this.formatLabel(attr, model), minValue);
        }
      },

      // Max validator
      // Validates that the value has to be a number and equal to or less than
      // the max value specified
      max: function(value, attr, maxValue, model) {
        if (!isNumber(value) || value > maxValue) {
          return this.format(defaultMessages.max, this.formatLabel(attr, model), maxValue);
        }
      },

      // Range validator
      // Validates that the value has to be a number and equal to or between
      // the two numbers specified
      range: function(value, attr, range, model) {
        if(!isNumber(value) || value < range[0] || value > range[1]) {
          return this.format(defaultMessages.range, this.formatLabel(attr, model), range[0], range[1]);
        }
      },

      // Length validator
      // Validates that the value has to be a string with length equal to
      // the length value specified
      length: function(value, attr, length, model) {
        if (!_.isString(value) || value.length !== length) {
          return this.format(defaultMessages.length, this.formatLabel(attr, model), length);
        }
      },

      // Min length validator
      // Validates that the value has to be a string with length equal to or greater than
      // the min length value specified
      minLength: function(value, attr, minLength, model) {
        if (!_.isString(value) || value.length < minLength) {
          return this.format(defaultMessages.minLength, this.formatLabel(attr, model), minLength);
        }
      },

      // Max length validator
      // Validates that the value has to be a string with length equal to or less than
      // the max length value specified
      maxLength: function(value, attr, maxLength, model) {
        if (!_.isString(value) || value.length > maxLength) {
          return this.format(defaultMessages.maxLength, this.formatLabel(attr, model), maxLength);
        }
      },

      // Range length validator
      // Validates that the value has to be a string and equal to or between
      // the two numbers specified
      rangeLength: function(value, attr, range, model) {
        if (!_.isString(value) || value.length < range[0] || value.length > range[1]) {
          return this.format(defaultMessages.rangeLength, this.formatLabel(attr, model), range[0], range[1]);
        }
      },

      // One of validator
      // Validates that the value has to be equal to one of the elements in
      // the specified array. Case sensitive matching
      oneOf: function(value, attr, values, model) {
        if(!_.include(values, value)){
          return this.format(defaultMessages.oneOf, this.formatLabel(attr, model), values.join(', '));
        }
      },

      // Equal to validator
      // Validates that the value has to be equal to the value of the attribute
      // with the name specified
      equalTo: function(value, attr, equalTo, model, computed) {
        if(value !== computed[equalTo]) {
          return this.format(defaultMessages.equalTo, this.formatLabel(attr, model), this.formatLabel(equalTo, model));
        }
      },

      // Pattern validator
      // Validates that the value has to match the pattern specified.
      // Can be a regular expression or the name of one of the built in patterns
      pattern: function(value, attr, pattern, model) {
        if (!hasValue(value) || !value.toString().match(defaultPatterns[pattern] || pattern)) {
          return this.format(defaultMessages[pattern] || defaultMessages.inlinePattern, this.formatLabel(attr, model), pattern);
        }
      }
    };
  }());

  // Set the correct context for all validators
  // when used from within a method validator
  _.each(defaultValidators, function(validator, key){
    defaultValidators[key] = _.bind(defaultValidators[key], _.extend({}, formatFunctions, defaultValidators));
  });

  return Validation;
}(_));/*global self, document, DOMException */

/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */

// Full polyfill for browsers with no classList support
if (!("classList" in document.createElement("_"))) {
  (function (view) {

  "use strict";

  if (!('Element' in view)) return;

  var
      classListProp = "classList"
    , protoProp = "prototype"
    , elemCtrProto = view.Element[protoProp]
    , objCtr = Object
    , strTrim = String[protoProp].trim || function () {
      return this.replace(/^\s+|\s+$/g, "");
    }
    , arrIndexOf = Array[protoProp].indexOf || function (item) {
      var
          i = 0
        , len = this.length
      ;
      for (; i < len; i++) {
        if (i in this && this[i] === item) {
          return i;
        }
      }
      return -1;
    }
    // Vendors: please allow content code to instantiate DOMExceptions
    , DOMEx = function (type, message) {
      this.name = type;
      this.code = DOMException[type];
      this.message = message;
    }
    , checkTokenAndGetIndex = function (classList, token) {
      if (token === "") {
        throw new DOMEx(
            "SYNTAX_ERR"
          , "An invalid or illegal string was specified"
        );
      }
      if (/\s/.test(token)) {
        throw new DOMEx(
            "INVALID_CHARACTER_ERR"
          , "String contains an invalid character"
        );
      }
      return arrIndexOf.call(classList, token);
    }
    , ClassList = function (elem) {
      var
          trimmedClasses = strTrim.call(elem.getAttribute("class") || "")
        , classes = trimmedClasses ? trimmedClasses.split(/\s+/) : []
        , i = 0
        , len = classes.length
      ;
      for (; i < len; i++) {
        this.push(classes[i]);
      }
      this._updateClassName = function () {
        elem.setAttribute("class", this.toString());
      };
    }
    , classListProto = ClassList[protoProp] = []
    , classListGetter = function () {
      return new ClassList(this);
    }
  ;
  // Most DOMException implementations don't allow calling DOMException's toString()
  // on non-DOMExceptions. Error's toString() is sufficient here.
  DOMEx[protoProp] = Error[protoProp];
  classListProto.item = function (i) {
    return this[i] || null;
  };
  classListProto.contains = function (token) {
    token += "";
    return checkTokenAndGetIndex(this, token) !== -1;
  };
  classListProto.add = function () {
    var
        tokens = arguments
      , i = 0
      , l = tokens.length
      , token
      , updated = false
    ;
    do {
      token = tokens[i] + "";
      if (checkTokenAndGetIndex(this, token) === -1) {
        this.push(token);
        updated = true;
      }
    }
    while (++i < l);

    if (updated) {
      this._updateClassName();
    }
  };
  classListProto.remove = function () {
    var
        tokens = arguments
      , i = 0
      , l = tokens.length
      , token
      , updated = false
      , index
    ;
    do {
      token = tokens[i] + "";
      index = checkTokenAndGetIndex(this, token);
      while (index !== -1) {
        this.splice(index, 1);
        updated = true;
        index = checkTokenAndGetIndex(this, token);
      }
    }
    while (++i < l);

    if (updated) {
      this._updateClassName();
    }
  };
  classListProto.toggle = function (token, force) {
    token += "";

    var
        result = this.contains(token)
      , method = result ?
        force !== true && "remove"
      :
        force !== false && "add"
    ;

    if (method) {
      this[method](token);
    }

    if (force === true || force === false) {
      return force;
    } else {
      return !result;
    }
  };
  classListProto.toString = function () {
    return this.join(" ");
  };

  if (objCtr.defineProperty) {
    var classListPropDesc = {
        get: classListGetter
      , enumerable: true
      , configurable: true
    };
    try {
      objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
    } catch (ex) { // IE 8 doesn't support enumerable:true
      if (ex.number === -0x7FF5EC54) {
        classListPropDesc.enumerable = false;
        objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
      }
    }
  } else if (objCtr[protoProp].__defineGetter__) {
    elemCtrProto.__defineGetter__(classListProp, classListGetter);
  }

  }(self));
}

(function (root, factory) {
    'use strict';
    if (typeof module === 'object') {
        module.exports = factory;
    } else if (typeof define === 'function' && define.amd) {
        define(function () {
            return factory;
        });
    } else {
        root.MediumEditor = factory;
    }
}(this, function () {

    'use strict';

var Util;

(function (window, document) {
    'use strict';

    function copyInto(dest, source, overwrite) {
        var prop;
        dest = dest || {};
        for (prop in source) {
            if (source.hasOwnProperty(prop) && (overwrite || dest.hasOwnProperty(prop) === false)) {
                dest[prop] = source[prop];
            }
        }
        return dest;
    }

    Util = {

        // http://stackoverflow.com/questions/17907445/how-to-detect-ie11#comment30165888_17907562
        // by rg89
        isIE: ((navigator.appName === 'Microsoft Internet Explorer') || ((navigator.appName === 'Netscape') && (new RegExp('Trident/.*rv:([0-9]{1,}[.0-9]{0,})').exec(navigator.userAgent) !== null))),

        // https://github.com/jashkenas/underscore
        keyCode: {
            BACKSPACE: 8,
            TAB: 9,
            ENTER: 13,
            ESCAPE: 27,
            SPACE: 32,
            DELETE: 46
        },

        parentElements: ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'pre'],

        defaults: function defaults(dest, source) {
            return copyInto(dest, source);
        },

        extend: function extend(dest, source) {
            return copyInto(dest, source, true);
        },

        derives: function derives(base, derived) {
            var origPrototype = derived.prototype;
            function Proto() { }
            Proto.prototype = base.prototype;
            derived.prototype = new Proto();
            derived.prototype.constructor = base;
            derived.prototype = copyInto(derived.prototype, origPrototype);
            return derived;
        },

        // Find the next node in the DOM tree that represents any text that is being
        // displayed directly next to the targetNode (passed as an argument)
        // Text that appears directly next to the current node can be:
        //  - A sibling text node
        //  - A descendant of a sibling element
        //  - A sibling text node of an ancestor
        //  - A descendant of a sibling element of an ancestor
        findAdjacentTextNodeWithContent: function findAdjacentTextNodeWithContent(rootNode, targetNode, ownerDocument) {
            var pastTarget = false,
                nextNode,
                nodeIterator = ownerDocument.createNodeIterator(rootNode, NodeFilter.SHOW_TEXT, null, false);

            // Use a native NodeIterator to iterate over all the text nodes that are descendants
            // of the rootNode.  Once past the targetNode, choose the first non-empty text node
            nextNode = nodeIterator.nextNode();
            while (nextNode) {
                if (nextNode === targetNode) {
                    pastTarget = true;
                } else if (pastTarget) {
                    if (nextNode.nodeType === 3 && nextNode.nodeValue && nextNode.nodeValue.trim().length > 0) {
                        break;
                    }
                }
                nextNode = nodeIterator.nextNode();
            }

            return nextNode;
        },

        isDescendant: function isDescendant(parent, child) {
            if (!parent || !child) {
                return false;
            }
            var node = child.parentNode;
            while (node !== null) {
                if (node === parent) {
                    return true;
                }
                node = node.parentNode;
            }
            return false;
        },

        // https://github.com/jashkenas/underscore
        isElement: function isElement(obj) {
            return !!(obj && obj.nodeType === 1);
        },

        now: function now() {
            return Date.now || new Date().getTime();
        },

        // https://github.com/jashkenas/underscore
        throttle: function throttle(func, wait) {
            var THROTTLE_INTERVAL = 50,
                context,
                args,
                result,
                timeout = null,
                previous = 0,
                later;

            if (!wait && wait !== 0) {
                wait = THROTTLE_INTERVAL;
            }

            later = function () {
                previous = Util.now();
                timeout = null;
                result = func.apply(context, args);
                if (!timeout) {
                    context = args = null;
                }
            };

            return function () {
                var currNow = Util.now(),
                    remaining = wait - (currNow - previous);
                context = this;
                args = arguments;
                if (remaining <= 0 || remaining > wait) {
                    clearTimeout(timeout);
                    timeout = null;
                    previous = currNow;
                    result = func.apply(context, args);
                    if (!timeout) {
                        context = args = null;
                    }
                } else if (!timeout) {
                    timeout = setTimeout(later, remaining);
                }
                return result;
            };
        },

        traverseUp: function (current, testElementFunction) {

            do {
                if (current.nodeType === 1) {
                    if (testElementFunction(current)) {
                        return current;
                    }
                    // do not traverse upwards past the nearest containing editor
                    if (current.getAttribute('data-medium-element')) {
                        return false;
                    }
                }

                current = current.parentNode;
            } while (current);

            return false;

        },

        htmlEntities: function (str) {
            // converts special characters (like <) into their escaped/encoded values (like &lt;).
            // This allows you to show to display the string without the browser reading it as HTML.
            return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
        },

        // http://stackoverflow.com/questions/6690752/insert-html-at-caret-in-a-contenteditable-div
        insertHTMLCommand: function (doc, html) {
            var selection, range, el, fragment, node, lastNode;

            if (doc.queryCommandSupported('insertHTML')) {
                try {
                    return doc.execCommand('insertHTML', false, html);
                } catch (ignore) {}
            }

            selection = window.getSelection();
            if (selection.getRangeAt && selection.rangeCount) {
                range = selection.getRangeAt(0);
                range.deleteContents();

                el = doc.createElement("div");
                el.innerHTML = html;
                fragment = doc.createDocumentFragment();
                while (el.firstChild) {
                    node = el.firstChild;
                    lastNode = fragment.appendChild(node);
                }
                range.insertNode(fragment);

                // Preserve the selection:
                if (lastNode) {
                    range = range.cloneRange();
                    range.setStartAfter(lastNode);
                    range.collapse(true);
                    selection.removeAllRanges();
                    selection.addRange(range);
                }
            }
        },

        // TODO: not sure if this should be here
        setTargetBlank: function (el) {
            var i;
            if (el.tagName.toLowerCase() === 'a') {
                el.target = '_blank';
            } else {
                el = el.getElementsByTagName('a');

                for (i = 0; i < el.length; i += 1) {
                    el[i].target = '_blank';
                }
            }
        },

        isListItemChild: function (node) {
            var parentNode = node.parentNode,
                tagName = parentNode.tagName.toLowerCase();
            while (this.parentElements.indexOf(tagName) === -1 && tagName !== 'div') {
                if (tagName === 'li') {
                    return true;
                }
                parentNode = parentNode.parentNode;
                if (parentNode && parentNode.tagName) {
                    tagName = parentNode.tagName.toLowerCase();
                } else {
                    return false;
                }
            }
            return false;
        }
    };
}(window, document));

var Selection;

(function (window, document) {
    'use strict';

    Selection = {
        // http://stackoverflow.com/questions/1197401/how-can-i-get-the-element-the-caret-is-in-with-javascript-when-using-contentedi
        // by You
        getSelectionStart: function (ownerDocument) {
            var node = ownerDocument.getSelection().anchorNode,
                startNode = (node && node.nodeType === 3 ? node.parentNode : node);
            return startNode;
        },

        findMatchingSelectionParent: function (testElementFunction, contentWindow) {
            var selection = contentWindow.getSelection(), range, current;

            if (selection.rangeCount === 0) {
                return false;
            }

            range = selection.getRangeAt(0);
            current = range.commonAncestorContainer;

            return Util.traverseUp(current, testElementFunction);
        },

        getSelectionElement: function (contentWindow) {
            return this.findMatchingSelectionParent(function (el) {
                return el.getAttribute('data-medium-element');
            }, contentWindow);
        },

        selectionInContentEditableFalse: function (contentWindow) {
            return this.findMatchingSelectionParent(function (el) {
                return (el && el.nodeName !== '#text' && el.getAttribute('contenteditable') === 'false');
            }, contentWindow);
        },

        // http://stackoverflow.com/questions/4176923/html-of-selected-text
        // by Tim Down
        getSelectionHtml: function getSelectionHtml() {
            var i,
                html = '',
                sel,
                len,
                container;
            if (this.options.contentWindow.getSelection !== undefined) {
                sel = this.options.contentWindow.getSelection();
                if (sel.rangeCount) {
                    container = this.options.ownerDocument.createElement('div');
                    for (i = 0, len = sel.rangeCount; i < len; i += 1) {
                        container.appendChild(sel.getRangeAt(i).cloneContents());
                    }
                    html = container.innerHTML;
                }
            } else if (this.options.ownerDocument.selection !== undefined) {
                if (this.options.ownerDocument.selection.type === 'Text') {
                    html = this.options.ownerDocument.selection.createRange().htmlText;
                }
            }
            return html;
        },

        /**
         *  Find the caret position within an element irrespective of any inline tags it may contain.
         *
         *  @param {DOMElement} An element containing the cursor to find offsets relative to.
         *  @param {Range} A Range representing cursor position. Will window.getSelection if none is passed.
         *  @return {Object} 'left' and 'right' attributes contain offsets from begining and end of Element
         */
        getCaretOffsets: function getCaretOffsets(element, range) {
            var preCaretRange, postCaretRange;

            if (!range) {
                range = window.getSelection().getRangeAt(0);
            }

            preCaretRange = range.cloneRange();
            postCaretRange = range.cloneRange();

            preCaretRange.selectNodeContents(element);
            preCaretRange.setEnd(range.endContainer, range.endOffset);

            postCaretRange.selectNodeContents(element);
            postCaretRange.setStart(range.endContainer, range.endOffset);

            return {
                left: preCaretRange.toString().length,
                right: postCaretRange.toString().length
            };
        },

        // http://stackoverflow.com/questions/15867542/range-object-get-selection-parent-node-chrome-vs-firefox
        rangeSelectsSingleNode: function (range) {
            var startNode = range.startContainer;
            return startNode === range.endContainer &&
                startNode.hasChildNodes() &&
                range.endOffset === range.startOffset + 1;
        },

        getSelectedParentElement: function (range) {
            var selectedParentElement = null;
            if (this.rangeSelectsSingleNode(range) && range.startContainer.childNodes[range.startOffset].nodeType !== 3) {
                selectedParentElement = range.startContainer.childNodes[range.startOffset];
            } else if (range.startContainer.nodeType === 3) {
                selectedParentElement = range.startContainer.parentNode;
            } else {
                selectedParentElement = range.startContainer;
            }
            return selectedParentElement;
        },

        getSelectionData: function (el) {
            var tagName;

            if (el && el.tagName) {
                tagName = el.tagName.toLowerCase();
            }

            while (el && Util.parentElements.indexOf(tagName) === -1) {
                el = el.parentNode;
                if (el && el.tagName) {
                    tagName = el.tagName.toLowerCase();
                }
            }

            return {
                el: el,
                tagName: tagName
            };
        }
    };
}(document, window));

var DefaultButton,
    ButtonsData;

(function (window, document) {
    'use strict';

    ButtonsData = {
        'bold': {
            name: 'bold',
            action: 'bold',
            aria: 'bold',
            tagNames: ['b', 'strong'],
            style: {
                prop: 'font-weight',
                value: '700|bold'
            },
            useQueryState: true,
            contentDefault: '<b>B</b>',
            contentFA: '<i class="fa fa-bold"></i>',
            key: 'b'
        },
        'italic': {
            name: 'italic',
            action: 'italic',
            aria: 'italic',
            tagNames: ['i', 'em'],
            style: {
                prop: 'font-style',
                value: 'italic'
            },
            useQueryState: true,
            contentDefault: '<b><i>I</i></b>',
            contentFA: '<i class="fa fa-italic"></i>',
            key: 'i'
        },
        'underline': {
            name: 'underline',
            action: 'underline',
            aria: 'underline',
            tagNames: ['u'],
            style: {
                prop: 'text-decoration',
                value: 'underline'
            },
            useQueryState: true,
            contentDefault: '<b><u>U</u></b>',
            contentFA: '<i class="fa fa-underline"></i>',
            key: 'u'
        },
        'strikethrough': {
            name: 'strikethrough',
            action: 'strikethrough',
            aria: 'strike through',
            tagNames: ['strike'],
            style: {
                prop: 'text-decoration',
                value: 'line-through'
            },
            useQueryState: true,
            contentDefault: '<s>A</s>',
            contentFA: '<i class="fa fa-strikethrough"></i>'
        },
        'superscript': {
            name: 'superscript',
            action: 'superscript',
            aria: 'superscript',
            tagNames: ['sup'],
            /* firefox doesn't behave the way we want it to, so we CAN'T use queryCommandState for superscript
               https://github.com/guardian/scribe/blob/master/BROWSERINCONSISTENCIES.md#documentquerycommandstate */
            // useQueryState: true
            contentDefault: '<b>x<sup>1</sup></b>',
            contentFA: '<i class="fa fa-superscript"></i>'
        },
        'subscript': {
            name: 'subscript',
            action: 'subscript',
            aria: 'subscript',
            tagNames: ['sub'],
            /* firefox doesn't behave the way we want it to, so we CAN'T use queryCommandState for subscript
               https://github.com/guardian/scribe/blob/master/BROWSERINCONSISTENCIES.md#documentquerycommandstate */
            // useQueryState: true
            contentDefault: '<b>x<sub>1</sub></b>',
            contentFA: '<i class="fa fa-subscript"></i>'
        },
        'image': {
            name: 'image',
            action: 'image',
            aria: 'image',
            tagNames: ['img'],
            contentDefault: '<b>image</b>',
            contentFA: '<i class="fa fa-picture-o"></i>'
        },
        'quote': {
            name: 'quote',
            action: 'append-blockquote',
            aria: 'blockquote',
            tagNames: ['blockquote'],
            contentDefault: '<b>&ldquo;</b>',
            contentFA: '<i class="fa fa-quote-right"></i>'
        },
        'orderedlist': {
            name: 'orderedlist',
            action: 'insertorderedlist',
            aria: 'ordered list',
            tagNames: ['ol'],
            useQueryState: true,
            contentDefault: '<b>1.</b>',
            contentFA: '<i class="fa fa-list-ol"></i>'
        },
        'unorderedlist': {
            name: 'unorderedlist',
            action: 'insertunorderedlist',
            aria: 'unordered list',
            tagNames: ['ul'],
            useQueryState: true,
            contentDefault: '<b>&bull;</b>',
            contentFA: '<i class="fa fa-list-ul"></i>'
        },
        'pre': {
            name: 'pre',
            action: 'append-pre',
            aria: 'preformatted text',
            tagNames: ['pre'],
            contentDefault: '<b>0101</b>',
            contentFA: '<i class="fa fa-code fa-lg"></i>'
        },
        'indent': {
            name: 'indent',
            action: 'indent',
            aria: 'indent',
            tagNames: [],
            contentDefault: '<b>&rarr;</b>',
            contentFA: '<i class="fa fa-indent"></i>'
        },
        'outdent': {
            name: 'outdent',
            action: 'outdent',
            aria: 'outdent',
            tagNames: [],
            contentDefault: '<b>&larr;</b>',
            contentFA: '<i class="fa fa-outdent"></i>'
        },
        'justifyCenter': {
            name: 'justifyCenter',
            action: 'justifyCenter',
            aria: 'center justify',
            tagNames: [],
            style: {
                prop: 'text-align',
                value: 'center'
            },
            useQueryState: true,
            contentDefault: '<b>C</b>',
            contentFA: '<i class="fa fa-align-center"></i>'
        },
        'justifyFull': {
            name: 'justifyFull',
            action: 'justifyFull',
            aria: 'full justify',
            tagNames: [],
            style: {
                prop: 'text-align',
                value: 'justify'
            },
            useQueryState: true,
            contentDefault: '<b>J</b>',
            contentFA: '<i class="fa fa-align-justify"></i>'
        },
        'justifyLeft': {
            name: 'justifyLeft',
            action: 'justifyLeft',
            aria: 'left justify',
            tagNames: [],
            style: {
                prop: 'text-align',
                value: 'left'
            },
            useQueryState: true,
            contentDefault: '<b>L</b>',
            contentFA: '<i class="fa fa-align-left"></i>'
        },
        'justifyRight': {
            name: 'justifyRight',
            action: 'justifyRight',
            aria: 'right justify',
            tagNames: [],
            style: {
                prop: 'text-align',
                value: 'right'
            },
            useQueryState: true,
            contentDefault: '<b>R</b>',
            contentFA: '<i class="fa fa-align-right"></i>'
        },
        'header1': {
            name: 'header1',
            action: function (options) {
                return 'append-' + options.firstHeader;
            },
            aria: function (options) {
                return options.firstHeader;
            },
            tagNames: function (options) {
                return [options.firstHeader];
            },
            contentDefault: '<b>H1</b>'
        },
        'header2': {
            name: 'header2',
            action: function (options) {
                return 'append-' + options.secondHeader;
            },
            aria: function (options) {
                return options.secondHeader;
            },
            tagNames: function (options) {
                return [options.secondHeader];
            },
            contentDefault: '<b>H2</b>'
        }
    };

    DefaultButton = function (options, instance) {
        this.options = options;
        this.name = options.name;
        this.init(instance);
    };

    DefaultButton.prototype = {
        init: function (instance) {
            this.base = instance;

            this.button = this.createButton();
            this.base.on(this.button, 'click', this.handleClick.bind(this));
        },
        getButton: function () {
            return this.button;
        },
        getAction: function () {
            return (typeof this.options.action === 'function') ? this.options.action(this.base.options) : this.options.action;
        },
        getAria: function () {
            return (typeof this.options.aria === 'function') ? this.options.aria(this.base.options) : this.options.aria;
        },
        getTagNames: function () {
            return (typeof this.options.tagNames === 'function') ? this.options.tagNames(this.base.options) : this.options.tagNames;
        },
        createButton: function () {
            var button = this.base.options.ownerDocument.createElement('button'),
                content = this.options.contentDefault;
            button.classList.add('medium-editor-action');
            button.classList.add('medium-editor-action-' + this.name);
            button.setAttribute('data-action', this.getAction());
            button.setAttribute('aria-label', this.getAria());
            if (this.base.options.buttonLabels) {
                if (this.base.options.buttonLabels === 'fontawesome' && this.options.contentFA) {
                    content = this.options.contentFA;
                } else if (typeof this.base.options.buttonLabels === 'object' && this.base.options.buttonLabels[this.name]) {
                    content = this.base.options.buttonLabels[this.options.name];
                }
            }
            button.innerHTML = content;
            return button;
        },
        handleClick: function (evt) {
            evt.preventDefault();
            evt.stopPropagation();

            var action = this.getAction();

            if (action) {
                this.base.execAction(action);
            }
        },
        isActive: function () {
            return this.button.classList.contains(this.base.options.activeButtonClass);
        },
        setInactive: function () {
            this.button.classList.remove(this.base.options.activeButtonClass);
            delete this.knownState;
        },
        setActive: function () {
            this.button.classList.add(this.base.options.activeButtonClass);
            delete this.knownState;
        },
        queryCommandState: function () {
            var queryState = null;
            if (this.options.useQueryState) {
                queryState = this.base.queryCommandState(this.getAction());
            }
            return queryState;
        },
        isAlreadyApplied: function (node) {
            var isMatch = false,
                tagNames = this.getTagNames(),
                styleVals,
                computedStyle;

            if (this.knownState === false || this.knownState === true) {
                return this.knownState;
            }

            if (tagNames && tagNames.length > 0 && node.tagName) {
                isMatch = tagNames.indexOf(node.tagName.toLowerCase()) !== -1;
            }

            if (!isMatch && this.options.style) {
                styleVals = this.options.style.value.split('|');
                computedStyle = this.base.options.contentWindow.getComputedStyle(node, null).getPropertyValue(this.options.style.prop);
                styleVals.forEach(function (val) {
                    if (!this.knownState) {
                        this.knownState = isMatch = (computedStyle.indexOf(val) !== -1);
                    }
                }.bind(this));
            }

            return isMatch;
        }
    };
}(window, document));

var pasteHandler;

(function (window, document) {
    'use strict';
    /*jslint regexp: true*/
    /*
        jslint does not allow character negation, because the negation
        will not match any unicode characters. In the regexes in this
        block, negation is used specifically to match the end of an html
        tag, and in fact unicode characters *should* be allowed.
    */
    function createReplacements() {
        return [

            // replace two bogus tags that begin pastes from google docs
            [new RegExp(/<[^>]*docs-internal-guid[^>]*>/gi), ""],
            [new RegExp(/<\/b>(<br[^>]*>)?$/gi), ""],

             // un-html spaces and newlines inserted by OS X
            [new RegExp(/<span class="Apple-converted-space">\s+<\/span>/g), ' '],
            [new RegExp(/<br class="Apple-interchange-newline">/g), '<br>'],

            // replace google docs italics+bold with a span to be replaced once the html is inserted
            [new RegExp(/<span[^>]*(font-style:italic;font-weight:bold|font-weight:bold;font-style:italic)[^>]*>/gi), '<span class="replace-with italic bold">'],

            // replace google docs italics with a span to be replaced once the html is inserted
            [new RegExp(/<span[^>]*font-style:italic[^>]*>/gi), '<span class="replace-with italic">'],

            //[replace google docs bolds with a span to be replaced once the html is inserted
            [new RegExp(/<span[^>]*font-weight:bold[^>]*>/gi), '<span class="replace-with bold">'],

             // replace manually entered b/i/a tags with real ones
            [new RegExp(/&lt;(\/?)(i|b|a)&gt;/gi), '<$1$2>'],

             // replace manually a tags with real ones, converting smart-quotes from google docs
            [new RegExp(/&lt;a\s+href=(&quot;|&rdquo;|&ldquo;|“|”)([^&]+)(&quot;|&rdquo;|&ldquo;|“|”)&gt;/gi), '<a href="$2">']

        ];
    }
    /*jslint regexp: false*/

    pasteHandler = {
        handlePaste: function (element, evt, options) {
            var paragraphs,
                html = '',
                p,
                dataFormatHTML = 'text/html',
                dataFormatPlain = 'text/plain';

            element.classList.remove('medium-editor-placeholder');
            if (!options.forcePlainText && !options.cleanPastedHTML) {
                return element;
            }

            if (options.contentWindow.clipboardData && evt.clipboardData === undefined) {
                evt.clipboardData = options.contentWindow.clipboardData;
                // If window.clipboardData exists, but e.clipboardData doesn't exist,
                // we're probably in IE. IE only has two possibilities for clipboard
                // data format: 'Text' and 'URL'.
                //
                // Of the two, we want 'Text':
                dataFormatHTML = 'Text';
                dataFormatPlain = 'Text';
            }

            if (evt.clipboardData && evt.clipboardData.getData && !evt.defaultPrevented) {
                evt.preventDefault();

                if (options.cleanPastedHTML && evt.clipboardData.getData(dataFormatHTML)) {
                    return this.cleanPaste(evt.clipboardData.getData(dataFormatHTML), options);
                }
                if (!(options.disableReturn || element.getAttribute('data-disable-return'))) {
                    paragraphs = evt.clipboardData.getData(dataFormatPlain).split(/[\r\n]/g);
                    for (p = 0; p < paragraphs.length; p += 1) {
                        if (paragraphs[p] !== '') {
                            html += '<p>' + Util.htmlEntities(paragraphs[p]) + '</p>';
                        }
                    }
                    Util.insertHTMLCommand(options.ownerDocument, html);
                } else {
                    html = Util.htmlEntities(evt.clipboardData.getData(dataFormatPlain));
                    Util.insertHTMLCommand(options.ownerDocument, html);
                }
            }
        },

        cleanPaste: function (text, options) {
            var i, elList, workEl,
                el = Selection.getSelectionElement(options.contentWindow),
                multiline = /<p|<br|<div/.test(text),
                replacements = createReplacements();

            for (i = 0; i < replacements.length; i += 1) {
                text = text.replace(replacements[i][0], replacements[i][1]);
            }

            if (multiline) {
                // double br's aren't converted to p tags, but we want paragraphs.
                elList = text.split('<br><br>');

                this.pasteHTML('<p>' + elList.join('</p><p>') + '</p>', options.ownerDocument);

                try {
                    options.ownerDocument.execCommand('insertText', false, "\n");
                } catch (ignore) { }

                // block element cleanup
                elList = el.querySelectorAll('a,p,div,br');
                for (i = 0; i < elList.length; i += 1) {
                    workEl = elList[i];

                    switch (workEl.tagName.toLowerCase()) {
                    case 'a':
                        if (options.targetBlank) {
                            Util.setTargetBlank(workEl);
                        }
                        break;
                    case 'p':
                    case 'div':
                        this.filterCommonBlocks(workEl);
                        break;
                    case 'br':
                        this.filterLineBreak(workEl);
                        break;
                    }
                }
            } else {
                this.pasteHTML(text, options.ownerDocument);
            }
        },

        pasteHTML: function (html, ownerDocument) {
            var elList, workEl, i, fragmentBody, pasteBlock = ownerDocument.createDocumentFragment();

            pasteBlock.appendChild(ownerDocument.createElement('body'));

            fragmentBody = pasteBlock.querySelector('body');
            fragmentBody.innerHTML = html;

            this.cleanupSpans(fragmentBody, ownerDocument);

            elList = fragmentBody.querySelectorAll('*');
            for (i = 0; i < elList.length; i += 1) {
                workEl = elList[i];

                // delete ugly attributes
                workEl.removeAttribute('class');
                workEl.removeAttribute('style');
                workEl.removeAttribute('dir');

                if (workEl.tagName.toLowerCase() === 'meta') {
                    workEl.parentNode.removeChild(workEl);
                }
            }
            Util.insertHTMLCommand(ownerDocument, fragmentBody.innerHTML.replace(/&nbsp;/g, ' '));
        },
        isCommonBlock: function (el) {
            return (el && (el.tagName.toLowerCase() === 'p' || el.tagName.toLowerCase() === 'div'));
        },
        filterCommonBlocks: function (el) {
            if (/^\s*$/.test(el.textContent)) {
                el.parentNode.removeChild(el);
            }
        },
        filterLineBreak: function (el) {
            if (this.isCommonBlock(el.previousElementSibling)) {
                // remove stray br's following common block elements
                this.removeWithParent(el);
            } else if (this.isCommonBlock(el.parentNode) && (el.parentNode.firstChild === el || el.parentNode.lastChild === el)) {
                // remove br's just inside open or close tags of a div/p
                this.removeWithParent(el);
            } else if (el.parentNode.childElementCount === 1 && el.parentNode.textContent === '') {
                // and br's that are the only child of elements other than div/p
                this.removeWithParent(el);
            }
        },

        // remove an element, including its parent, if it is the only element within its parent
        removeWithParent: function (el) {
            if (el && el.parentNode) {
                if (el.parentNode.parentNode && el.parentNode.childElementCount === 1) {
                    el.parentNode.parentNode.removeChild(el.parentNode);
                } else {
                    el.parentNode.removeChild(el);
                }
            }
        },

        cleanupSpans: function (container_el, ownerDocument) {
            var i,
                el,
                new_el,
                spans = container_el.querySelectorAll('.replace-with'),
                isCEF = function (el) {
                    return (el && el.nodeName !== '#text' && el.getAttribute('contenteditable') === 'false');
                };

            for (i = 0; i < spans.length; i += 1) {
                el = spans[i];
                new_el = ownerDocument.createElement(el.classList.contains('bold') ? 'b' : 'i');

                if (el.classList.contains('bold') && el.classList.contains('italic')) {
                    // add an i tag as well if this has both italics and bold
                    new_el.innerHTML = '<i>' + el.innerHTML + '</i>';
                } else {
                    new_el.innerHTML = el.innerHTML;
                }
                el.parentNode.replaceChild(new_el, el);
            }

            spans = container_el.querySelectorAll('span');
            for (i = 0; i < spans.length; i += 1) {
                el = spans[i];

                // bail if span is in contenteditable = false
                if (Util.traverseUp(el, isCEF)) {
                    return false;
                }

                // remove empty spans, replace others with their contents
                if (/^\s*$/.test()) {
                    el.parentNode.removeChild(el);
                } else {
                    el.parentNode.replaceChild(ownerDocument.createTextNode(el.textContent), el);
                }
            }
        }
    };
}(window, document));

var AnchorExtension;

(function (window, document) {
    'use strict';

    function AnchorDerived() {
        this.parent = true;
        this.options = {
            name: 'anchor',
            action: 'createLink',
            aria: 'link',
            tagNames: ['a'],
            contentDefault: '<b>#</b>',
            contentFA: '<i class="fa fa-link"></i>'
        };
        this.name = 'anchor';
        this.hasForm = true;
    }

    AnchorDerived.prototype = {

        // Button and Extension handling

        // Called when the button the toolbar is clicked
        // Overrides DefaultButton.handleClick
        handleClick: function (evt) {
            evt.preventDefault();
            evt.stopPropagation();

            if (!this.base.selection) {
                this.base.checkSelection();
            }

            var selectedParentElement = Selection.getSelectedParentElement(this.base.selectionRange);
            if (selectedParentElement.tagName &&
                    selectedParentElement.tagName.toLowerCase() === 'a') {
                return this.base.execAction('unlink');
            }

            if (!this.isDisplayed()) {
                this.showForm();
            }

            return false;
        },

        // Called by medium-editor to append form to the toolbar
        getForm: function () {
            if (!this.anchorForm) {
                this.anchorForm = this.createForm();
            }
            return this.anchorForm;
        },

        // Used by medium-editor when the default toolbar is to be displayed
        isDisplayed: function () {
            return this.getForm().style.display === 'block';
        },

        hideForm: function () {
            this.getForm().style.display = 'none';
            this.getInput().value = '';
        },

        showForm: function (link_value) {
            var input = this.getInput();

            this.base.saveSelection();
            this.base.hideToolbarDefaultActions();
            this.getForm().style.display = 'block';
            this.base.setToolbarPosition();
            this.base.keepToolbarAlive = true;

            input.value = link_value || '';
            input.focus();
        },

        // Called by core when tearing down medium-editor (deactivate)
        deactivate: function () {
            if (!this.anchorForm) {
                return false;
            }

            if (this.anchorForm.parentNode) {
                this.anchorForm.parentNode.removeChild(this.anchorForm);
            }

            delete this.anchorForm;
        },

        // core methods

        doLinkCreation: function () {
            var targetCheckbox = this.getForm().querySelector('.medium-editor-toolbar-anchor-target'),
                buttonCheckbox = this.getForm().querySelector('.medium-editor-toolbar-anchor-button'),
                opts = {
                    url: this.getInput().value
                };

            this.base.restoreSelection();

            if (this.base.options.checkLinkFormat) {
                opts.url = this.checkLinkFormat(opts.url);
            }

            if (targetCheckbox && targetCheckbox.checked) {
                opts.target = "_blank";
            } else {
                opts.target = "_self";
            }

            if (buttonCheckbox && buttonCheckbox.checked) {
                opts.buttonClass = this.base.options.anchorButtonClass;
            }

            this.base.createLink(opts);
            this.base.keepToolbarAlive = false;
            this.base.checkSelection();
        },

        checkLinkFormat: function (value) {
            var re = /^(https?|ftps?|rtmpt?):\/\/|mailto:/;
            return (re.test(value) ? '' : 'http://') + value;
        },

        doFormCancel: function () {
            this.base.restoreSelection();
            this.base.keepToolbarAlive = false;
            this.base.checkSelection();
        },

        // form creation and event handling

        createForm: function () {
            var doc = this.base.options.ownerDocument,
                form = doc.createElement('div'),
                input = doc.createElement('input'),
                close = doc.createElement('a'),
                save = doc.createElement('a'),
                target,
                target_label,
                button,
                button_label;

            // Anchor Form (div)
            form.className = 'medium-editor-toolbar-form';
            form.id = 'medium-editor-toolbar-form-anchor-' + this.base.id;

            // Handle clicks on the form itself
            this.base.on(form, 'click', this.handleFormClick.bind(this));

            // Add url textbox
            input.setAttribute('type', 'text');
            input.className = 'medium-editor-toolbar-input';
            input.setAttribute('placeholder', this.base.options.anchorInputPlaceholder);
            form.appendChild(input);

            // Handle typing in the textbox
            this.base.on(input, 'keyup', this.handleTextboxKeyup.bind(this));

            // Handle clicks into the textbox
            this.base.on(input, 'click', this.handleFormClick.bind(this));

            // Add save buton
            save.setAttribute('href', '#');
            save.className = 'medium-editor-toobar-save';
            save.innerHTML = this.base.options.buttonLabels === 'fontawesome' ?
                             '<i class="fa fa-check"></i>' :
                             '&#10003;';
            form.appendChild(save);

            // Handle save button clicks (capture)
            this.base.on(save, 'click', this.handleSaveClick.bind(this), true);

            // Add close button
            close.setAttribute('href', '#');
            close.className = 'medium-editor-toobar-close';
            close.innerHTML = this.base.options.buttonLabels === 'fontawesome' ?
                              '<i class="fa fa-times"></i>' :
                              '&times;';
            form.appendChild(close);

            // Handle close button clicks
            this.base.on(close, 'click', this.handleCloseClick.bind(this));

            // (Optional) Add 'open in new window' checkbox
            if (this.base.options.anchorTarget) {
                target = doc.createElement('input');
                target.setAttribute('type', 'checkbox');
                target.className = 'medium-editor-toolbar-anchor-target';

                target_label = doc.createElement('label');
                target_label.innerHTML = this.base.options.anchorInputCheckboxLabel;
                target_label.insertBefore(target, target_label.firstChild);

                form.appendChild(target_label);
            }

            // (Optional) Add 'add button class to anchor' checkbox
            if (this.base.options.anchorButton) {
                button = doc.createElement('input');
                button.setAttribute('type', 'checkbox');
                button.className = 'medium-editor-toolbar-anchor-button';

                button_label = doc.createElement('label');
                button_label.innerHTML = "Button";
                button_label.insertBefore(button, button_label.firstChild);

                form.appendChild(button_label);
            }

            // Handle click (capture) & focus (capture) outside of the form
            this.base.on(doc.body, 'click', this.handleOutsideInteraction.bind(this), true);
            this.base.on(doc.body, 'focus', this.handleOutsideInteraction.bind(this), true);

            return form;
        },

        getInput: function () {
            return this.getForm().querySelector('input.medium-editor-toolbar-input');
        },

        handleOutsideInteraction: function (event) {
            if (event.target !== this.getForm() &&
                    !Util.isDescendant(this.getForm(), event.target) &&
                    !Util.isDescendant(this.base.toolbarActions, event.target)) {
                this.base.keepToolbarAlive = false;
                this.base.checkSelection();
            }
        },

        handleTextboxKeyup: function (event) {
            // For ENTER -> create the anchor
            if (event.keyCode === Util.keyCode.ENTER) {
                event.preventDefault();
                this.doLinkCreation();
                return;
            }

            // For ESCAPE -> close the form
            if (event.keyCode === Util.keyCode.ESCAPE) {
                event.preventDefault();
                this.doFormCancel();
            }
        },

        handleFormClick: function (event) {
            // make sure not to hide form when clicking inside the form
            event.stopPropagation();
            this.base.keepToolbarAlive = true;
        },

        handleSaveClick: function (event) {
            // Clicking Save -> create the anchor
            event.preventDefault();
            this.doLinkCreation();
        },

        handleCloseClick: function (event) {
            // Click Close -> close the form
            event.preventDefault();
            this.doFormCancel();
        }
    };

    AnchorExtension = Util.derives(DefaultButton, AnchorDerived);
}(window, document));

function MediumEditor(elements, options) {
    'use strict';
    return this.init(elements, options);
}

(function () {
    'use strict';

    MediumEditor.statics = {
        ButtonsData: ButtonsData,
        DefaultButton: DefaultButton,
        AnchorExtension: AnchorExtension
    };

    MediumEditor.prototype = {
        defaults: {
            allowMultiParagraphSelection: true,
            anchorInputPlaceholder: 'Paste or type a link',
            anchorInputCheckboxLabel: 'Open in new window',
            anchorPreviewHideDelay: 500,
            buttons: ['bold', 'italic', 'underline', 'anchor', 'header1', 'header2', 'quote'],
            buttonLabels: false,
            checkLinkFormat: false,
            cleanPastedHTML: false,
            delay: 0,
            diffLeft: 0,
            diffTop: -10,
            disableReturn: false,
            disableDoubleReturn: false,
            disableToolbar: false,
            disableEditing: false,
            disablePlaceholders: false,
            toolbarAlign: 'center',
            elementsContainer: false,
            imageDragging: true,
            standardizeSelectionStart: false,
            contentWindow: window,
            ownerDocument: document,
            firstHeader: 'h3',
            forcePlainText: true,
            placeholder: 'Type your text',
            secondHeader: 'h4',
            targetBlank: false,
            anchorTarget: false,
            anchorButton: false,
            anchorButtonClass: 'btn',
            extensions: {},
            activeButtonClass: 'medium-editor-button-active',
            firstButtonClass: 'medium-editor-button-first',
            lastButtonClass: 'medium-editor-button-last'
        },

        init: function (elements, options) {
            var uniqueId = 1;

            this.options = Util.defaults(options, this.defaults);
            this.setElementSelection(elements);
            if (this.elements.length === 0) {
                return;
            }

            if (!this.options.elementsContainer) {
                this.options.elementsContainer = this.options.ownerDocument.body;
            }

            while (this.options.elementsContainer.querySelector('#medium-editor-toolbar-' + uniqueId)) {
                uniqueId = uniqueId + 1;
            }

            this.id = uniqueId;

            return this.setup();
        },

        setup: function () {
            this.events = [];
            this.isActive = true;
            this.initThrottledMethods()
                .initCommands()
                .initElements()
                .bindSelect()
                .bindDragDrop()
                .bindPaste()
                .setPlaceholders()
                .bindElementActions()
                .bindWindowActions();
        },

        on: function (target, event, listener, useCapture) {
            target.addEventListener(event, listener, useCapture);
            this.events.push([target, event, listener, useCapture]);
        },

        off: function (target, event, listener, useCapture) {
            var index = this.indexOfListener(target, event, listener, useCapture),
                e;
            if (index !== -1) {
                e = this.events.splice(index, 1)[0];
                e[0].removeEventListener(e[1], e[2], e[3]);
            }
        },

        indexOfListener: function (target, event, listener, useCapture) {
            var i, n, item;
            for (i = 0, n = this.events.length; i < n; i = i + 1) {
                item = this.events[i];
                if (item[0] === target && item[1] === event && item[2] === listener && item[3] === useCapture) {
                    return i;
                }
            }
            return -1;
        },

        delay: function (fn) {
            var self = this;
            setTimeout(function () {
                if (self.isActive) {
                    fn();
                }
            }, this.options.delay);
        },

        removeAllEvents: function () {
            var e = this.events.pop();
            while (e) {
                e[0].removeEventListener(e[1], e[2], e[3]);
                e = this.events.pop();
            }
        },

        initThrottledMethods: function () {
            var self = this;

            // handleResize is throttled because:
            // - It will be called when the browser is resizing, which can fire many times very quickly
            // - For some event (like resize) a slight lag in UI responsiveness is OK and provides performance benefits
            this.handleResize = Util.throttle(function () {
                if (self.isActive) {
                    self.positionToolbarIfShown();
                }
            });

            // handleBlur is throttled because:
            // - This method could be called many times due to the type of event handlers that are calling it
            // - We want a slight delay so that other events in the stack can run, some of which may
            //   prevent the toolbar from being hidden (via this.keepToolbarAlive).
            this.handleBlur = Util.throttle(function () {
                if (self.isActive && !self.keepToolbarAlive) {
                    self.hideToolbarActions();
                }
            });

            return this;
        },

        initElements: function () {
            var i,
                addToolbar = false;
            for (i = 0; i < this.elements.length; i += 1) {
                if (!this.options.disableEditing && !this.elements[i].getAttribute('data-disable-editing')) {
                    this.elements[i].setAttribute('contentEditable', true);
                }
                if (!this.elements[i].getAttribute('data-placeholder')) {
                    this.elements[i].setAttribute('data-placeholder', this.options.placeholder);
                }
                this.elements[i].setAttribute('data-medium-element', true);
                this.elements[i].setAttribute('role', 'textbox');
                this.elements[i].setAttribute('aria-multiline', true);
                this.bindParagraphCreation(i);
                if (!this.options.disableToolbar && !this.elements[i].getAttribute('data-disable-toolbar')) {
                    addToolbar = true;
                }
            }
            // Init toolbar
            if (addToolbar) {
                this.initToolbar()
                    .setFirstAndLastButtons()
                    .bindAnchorPreview();
            }
            return this;
        },

        setElementSelection: function (selector) {
            if (!selector) {
                selector = [];
            }
            // If string, use as query selector
            if (typeof selector === 'string') {
                selector = this.options.ownerDocument.querySelectorAll(selector);
            }
            // If element, put into array
            if (Util.isElement(selector)) {
                selector = [selector];
            }
            // Convert NodeList (or other array like object) into an array
            this.elements = Array.prototype.slice.apply(selector);
        },

        bindBlur: function () {
            var self = this,
                blurFunction = function (e) {
                    var isDescendantOfEditorElements = false,
                        selection = self.options.contentWindow.getSelection(),
                        selRange = selection.isCollapsed ?
                                   null :
                                   Selection.getSelectedParentElement(selection.getRangeAt(0)),
                        i;

                    // This control was introduced also to avoid the toolbar
                    // to disapper when selecting from right to left and
                    // the selection ends at the beginning of the text.
                    for (i = 0; i < self.elements.length; i += 1) {
                        if (Util.isDescendant(self.elements[i], e.target)
                                || Util.isDescendant(self.elements[i], selRange)) {
                            isDescendantOfEditorElements = true;
                            break;
                        }
                    }
                    // If it's not part of the editor, or the toolbar
                    if (e.target !== self.toolbar
                            && self.elements.indexOf(e.target) === -1
                            && !isDescendantOfEditorElements
                            && !Util.isDescendant(self.toolbar, e.target)
                            && !Util.isDescendant(self.anchorPreview, e.target)) {

                        // Activate the placeholder
                        if (!self.options.disablePlaceholders) {
                            self.placeholderWrapper(e, self.elements[0]);
                        }

                        // Hide the toolbar after a small delay so we can prevent this on toolbar click
                        self.handleBlur();
                    }
                };

            // Hide the toolbar when focusing outside of the editor.
            this.on(this.options.ownerDocument.body, 'click', blurFunction, true);
            this.on(this.options.ownerDocument.body, 'focus', blurFunction, true);

            return this;
        },

        bindClick: function (i) {
            var self = this;

            this.on(this.elements[i], 'click', function () {
                if (!self.options.disablePlaceholders) {
                    // Remove placeholder
                    this.classList.remove('medium-editor-placeholder');
                }

                if (self.options.staticToolbar) {
                    self.setToolbarPosition();
                }
            });

            return this;
        },

        /**
         * This handles blur and keypress events on elements
         * Including Placeholders, and tooldbar hiding on blur
         */
        bindElementActions: function () {
            var i;

            for (i = 0; i < this.elements.length; i += 1) {

                if (!this.options.disablePlaceholders) {
                    // Active all of the placeholders
                    this.activatePlaceholder(this.elements[i]);
                }

                // Bind the return and tab keypress events
                this.bindReturn(i)
                    .bindKeydown(i)
                    .bindClick(i);
            }

            return this;
        },

        // Two functions to handle placeholders
        activatePlaceholder:  function (el) {
            if (!(el.querySelector('img')) &&
                    !(el.querySelector('blockquote')) &&
                    el.textContent.replace(/^\s+|\s+$/g, '') === '') {

                el.classList.add('medium-editor-placeholder');
            }
        },
        placeholderWrapper: function (evt, el) {
            el = el || evt.target;
            el.classList.remove('medium-editor-placeholder');
            if (evt.type !== 'keypress') {
                this.activatePlaceholder(el);
            }
        },

        serialize: function () {
            var i,
                elementid,
                content = {};
            for (i = 0; i < this.elements.length; i += 1) {
                elementid = (this.elements[i].id !== '') ? this.elements[i].id : 'element-' + i;
                content[elementid] = {
                    value: this.elements[i].innerHTML.trim()
                };
            }
            return content;
        },

        initExtension: function (extension, name) {
            if (extension.parent) {
                extension.base = this;
            }
            if (typeof extension.init === 'function') {
                extension.init(this);
            }
            if (!extension.name) {
                extension.name = name;
            }
            return extension;
        },

        initCommands: function () {
            var buttons = this.options.buttons,
                extensions = this.options.extensions,
                ext,
                name;
            this.commands = [];

            buttons.forEach(function (buttonName) {
                if (extensions[buttonName]) {
                    ext = this.initExtension(extensions[buttonName], buttonName);
                    this.commands.push(ext);
                } else if (buttonName === 'anchor') {
                    ext = this.initExtension(new AnchorExtension(), buttonName);
                    this.commands.push(ext);
                } else if (ButtonsData.hasOwnProperty(buttonName)) {
                    ext = new DefaultButton(ButtonsData[buttonName], this);
                    this.commands.push(ext);
                }
            }.bind(this));

            for (name in extensions) {
                if (extensions.hasOwnProperty(name) && buttons.indexOf(name) === -1) {
                    ext = this.initExtension(extensions[name], name);
                }
            }

            return this;
        },

        getExtensionByName: function (name) {
            var extension;
            if (this.commands && this.commands.length) {
                this.commands.forEach(function (ext) {
                    if (ext.name === name) {
                        extension = ext;
                    }
                });
            }
            return extension;
        },

        /**
         * Helper function to call a method with a number of parameters on all registered extensions.
         * The function assures that the function exists before calling.
         *
         * @param {string} funcName name of the function to call
         * @param [args] arguments passed into funcName
         */
        callExtensions: function (funcName) {
            if (arguments.length < 1) {
                return;
            }

            var args = Array.prototype.slice.call(arguments, 1),
                ext,
                name;

            for (name in this.options.extensions) {
                if (this.options.extensions.hasOwnProperty(name)) {
                    ext = this.options.extensions[name];
                    if (ext[funcName] !== undefined) {
                        ext[funcName].apply(ext, args);
                    }
                }
            }
            return this;
        },

        bindParagraphCreation: function (index) {
            var self = this;
            this.on(this.elements[index], 'keypress', function (e) {
                var node,
                    tagName;
                if (e.which === Util.keyCode.SPACE) {
                    node = Selection.getSelectionStart(self.options.ownerDocument);
                    tagName = node.tagName.toLowerCase();
                    if (tagName === 'a') {
                        self.options.ownerDocument.execCommand('unlink', false, null);
                    }
                }
            });

            this.on(this.elements[index], 'keyup', function (e) {
                var node = Selection.getSelectionStart(self.options.ownerDocument),
                    tagName,
                    editorElement;

                if (node && node.getAttribute('data-medium-element') && node.children.length === 0 && !(self.options.disableReturn || node.getAttribute('data-disable-return'))) {
                    self.options.ownerDocument.execCommand('formatBlock', false, 'p');
                }
                if (e.which === Util.keyCode.ENTER) {
                    node = Selection.getSelectionStart(self.options.ownerDocument);
                    tagName = node.tagName.toLowerCase();
                    editorElement = Selection.getSelectionElement(self.options.contentWindow);

                    if (!(self.options.disableReturn || editorElement.getAttribute('data-disable-return')) &&
                            tagName !== 'li' && !Util.isListItemChild(node)) {
                        if (!e.shiftKey) {

                            // paragraph creation should not be forced within a header tag
                            if (!/h\d/.test(tagName)) {
                                self.options.ownerDocument.execCommand('formatBlock', false, 'p');
                            }
                        }
                        if (tagName === 'a') {
                            self.options.ownerDocument.execCommand('unlink', false, null);
                        }
                    }
                }
            });
            return this;
        },

        bindReturn: function (index) {
            var self = this;
            this.on(this.elements[index], 'keypress', function (e) {
                if (e.which === Util.keyCode.ENTER) {
                    if (self.options.disableReturn || this.getAttribute('data-disable-return')) {
                        e.preventDefault();
                    } else if (self.options.disableDoubleReturn || this.getAttribute('data-disable-double-return')) {
                        var node = Selection.getSelectionStart(self.options.contentWindow);
                        if (node && node.textContent.trim() === '') {
                            e.preventDefault();
                        }
                    }
                }
            });
            return this;
        },

        bindKeydown: function (index) {
            var self = this;
            this.on(this.elements[index], 'keydown', function (e) {
                var node, tag, key;

                if (e.which === Util.keyCode.TAB) {
                    // Override tab only for pre nodes
                    node = Selection.getSelectionStart(self.options.ownerDocument);
                    tag = node && node.tagName.toLowerCase();

                    if (tag === 'pre') {
                        e.preventDefault();
                        self.options.ownerDocument.execCommand('insertHtml', null, '    ');
                    }

                    // Tab to indent list structures!
                    if (tag === 'li' || Util.isListItemChild(node)) {
                        e.preventDefault();

                        // If Shift is down, outdent, otherwise indent
                        if (e.shiftKey) {
                            self.options.ownerDocument.execCommand('outdent', e);
                        } else {
                            self.options.ownerDocument.execCommand('indent', e);
                        }
                    }
                } else if (e.which === Util.keyCode.BACKSPACE || e.which === Util.keyCode.DELETE || e.which === Util.keyCode.ENTER) {

                    // Bind keys which can create or destroy a block element: backspace, delete, return
                    self.onBlockModifier(e);

                } else if (e.ctrlKey || e.metaKey) {
                    key = String.fromCharCode(e.which || e.keyCode).toLowerCase();
                    self.commands.forEach(function (extension) {
                        if (extension.options.key && extension.options.key === key) {
                            extension.handleClick(e);
                        }
                    });
                }
            });
            return this;
        },

        onBlockModifier: function (e) {
            var range, sel, p, node = Selection.getSelectionStart(this.options.ownerDocument),
                tagName = node.tagName.toLowerCase(),
                isEmpty = /^(\s+|<br\/?>)?$/i,
                isHeader = /h\d/i;

            if ((e.which === Util.keyCode.BACKSPACE || e.which === Util.keyCode.ENTER)
                    && node.previousElementSibling
                    // in a header
                    && isHeader.test(tagName)
                    // at the very end of the block
                    && Selection.getCaretOffsets(node).left === 0) {
                if (e.which === Util.keyCode.BACKSPACE && isEmpty.test(node.previousElementSibling.innerHTML)) {
                    // backspacing the begining of a header into an empty previous element will
                    // change the tagName of the current node to prevent one
                    // instead delete previous node and cancel the event.
                    node.previousElementSibling.parentNode.removeChild(node.previousElementSibling);
                    e.preventDefault();
                } else if (e.which === Util.keyCode.ENTER) {
                    // hitting return in the begining of a header will create empty header elements before the current one
                    // instead, make "<p><br></p>" element, which are what happens if you hit return in an empty paragraph
                    p = this.options.ownerDocument.createElement('p');
                    p.innerHTML = '<br>';
                    node.previousElementSibling.parentNode.insertBefore(p, node);
                    e.preventDefault();
                }
            } else if (e.which === Util.keyCode.DELETE
                        && node.nextElementSibling
                        && node.previousElementSibling
                        // not in a header
                        && !isHeader.test(tagName)
                        // in an empty tag
                        && isEmpty.test(node.innerHTML)
                        // when the next tag *is* a header
                        && isHeader.test(node.nextElementSibling.tagName)) {
                // hitting delete in an empty element preceding a header, ex:
                //  <p>[CURSOR]</p><h1>Header</h1>
                // Will cause the h1 to become a paragraph.
                // Instead, delete the paragraph node and move the cursor to the begining of the h1

                // remove node and move cursor to start of header
                range = document.createRange();
                sel = window.getSelection();

                range.setStart(node.nextElementSibling, 0);
                range.collapse(true);

                sel.removeAllRanges();
                sel.addRange(range);

                node.previousElementSibling.parentNode.removeChild(node);

                e.preventDefault();
            }
        },

        initToolbar: function () {
            if (this.toolbar) {
                return this;
            }
            this.toolbar = this.createToolbar();
            this.keepToolbarAlive = false;
            this.toolbarActions = this.toolbar.querySelector('.medium-editor-toolbar-actions');
            this.anchorPreview = this.createAnchorPreview();

            return this;
        },

        createToolbar: function () {
            var toolbar = this.options.ownerDocument.createElement('div');
            toolbar.id = 'medium-editor-toolbar-' + this.id;
            toolbar.className = 'medium-editor-toolbar';

            if (this.options.staticToolbar) {
                toolbar.className += " static-toolbar";
            } else {
                toolbar.className += " stalker-toolbar";
            }

            toolbar.appendChild(this.toolbarButtons());

            // Add any forms that extensions may have
            this.commands.forEach(function (extension) {
                if (extension.hasForm) {
                    toolbar.appendChild(extension.getForm());
                }
            });

            this.options.elementsContainer.appendChild(toolbar);
            return toolbar;
        },

        //TODO: actionTemplate
        toolbarButtons: function () {
            var ul = this.options.ownerDocument.createElement('ul'),
                li,
                btn;

            ul.id = 'medium-editor-toolbar-actions' + this.id;
            ul.className = 'medium-editor-toolbar-actions clearfix';

            this.commands.forEach(function (extension) {
                if (typeof extension.getButton === 'function') {
                    btn = extension.getButton(this);
                    li = this.options.ownerDocument.createElement('li');
                    if (Util.isElement(btn)) {
                        li.appendChild(btn);
                    } else {
                        li.innerHTML = btn;
                    }
                    ul.appendChild(li);
                }
            }.bind(this));

            return ul;
        },

        bindSelect: function () {
            var i,
                blurHelper = function (event) {
                    // Do not close the toolbar when bluring the editable area and clicking into the anchor form
                    if (event &&
                            event.type &&
                            event.type.toLowerCase() === 'blur' &&
                            event.relatedTarget &&
                            Util.isDescendant(this.toolbar, event.relatedTarget)) {
                        return false;
                    }
                    this.checkSelection();
                }.bind(this),
                timeoutHelper = function () {
                    setTimeout(function () {
                        this.checkSelection();
                    }.bind(this), 0);
                }.bind(this);

            this.on(this.options.ownerDocument.documentElement, 'mouseup', this.checkSelection.bind(this));

            for (i = 0; i < this.elements.length; i += 1) {
                this.on(this.elements[i], 'keyup', this.checkSelection.bind(this));
                this.on(this.elements[i], 'blur', blurHelper);
                this.on(this.elements[i], 'click', timeoutHelper);
            }

            return this;
        },

        bindDragDrop: function () {
            var self = this, i, className, onDrag, onDrop, element;

            if (!self.options.imageDragging) {
                return this;
            }

            className = 'medium-editor-dragover';

            onDrag = function (e) {
                e.preventDefault();
                e.dataTransfer.dropEffect = "copy";

                if (e.type === "dragover") {
                    this.classList.add(className);
                } else {
                    this.classList.remove(className);
                }
            };

            onDrop = function (e) {
                var files;
                e.preventDefault();
                e.stopPropagation();
                files = Array.prototype.slice.call(e.dataTransfer.files, 0);
                files.some(function (file) {
                    if (file.type.match("image")) {
                        var fileReader, id;
                        fileReader = new FileReader();
                        fileReader.readAsDataURL(file);

                        id = 'medium-img-' + (+new Date());
                        Util.insertHTMLCommand(self.options.ownerDocument, '<img class="medium-image-loading" id="' + id + '" />');

                        fileReader.onload = function () {
                            var img = document.getElementById(id);
                            if (img) {
                                img.removeAttribute('id');
                                img.removeAttribute('class');
                                img.src = fileReader.result;
                            }
                        };
                    }
                });
                this.classList.remove(className);
            };

            for (i = 0; i < this.elements.length; i += 1) {
                element = this.elements[i];


                this.on(element, 'dragover', onDrag);
                this.on(element, 'dragleave', onDrag);
                this.on(element, 'drop', onDrop);
            }
            return this;
        },

        stopSelectionUpdates: function () {
            this.preventSelectionUpdates = true;
        },

        startSelectionUpdates: function () {
            this.preventSelectionUpdates = false;
        },

        checkSelection: function () {
            var newSelection,
                selectionElement;

            if (!this.preventSelectionUpdates &&
                    this.keepToolbarAlive !== true &&
                    !this.options.disableToolbar) {

                newSelection = this.options.contentWindow.getSelection();
                if ((!this.options.updateOnEmptySelection && newSelection.toString().trim() === '') ||
                        (this.options.allowMultiParagraphSelection === false && this.multipleBlockElementsSelected()) ||
                        Selection.selectionInContentEditableFalse(this.options.contentWindow)) {
                    if (!this.options.staticToolbar) {
                        this.hideToolbarActions();
                    } else {
                        this.showAndUpdateToolbar();
                    }

                } else {
                    selectionElement = Selection.getSelectionElement(this.options.contentWindow);
                    if (!selectionElement || selectionElement.getAttribute('data-disable-toolbar')) {
                        if (!this.options.staticToolbar) {
                            this.hideToolbarActions();
                        }
                    } else {
                        this.checkSelectionElement(newSelection, selectionElement);
                    }
                }
            }
            return this;
        },

        // Checks for existance of multiple block elements in the current selection
        multipleBlockElementsSelected: function () {
            /*jslint regexp: true*/
            var selectionHtml = Selection.getSelectionHtml.call(this).replace(/<[\S]+><\/[\S]+>/gim, ''),
                hasMultiParagraphs = selectionHtml.match(/<(p|h[1-6]|blockquote)[^>]*>/g);
            /*jslint regexp: false*/

            return !!hasMultiParagraphs && hasMultiParagraphs.length > 1;
        },

        checkSelectionElement: function (newSelection, selectionElement) {
            var i,
                adjacentNode,
                offset = 0,
                newRange;
            this.selection = newSelection;
            this.selectionRange = this.selection.getRangeAt(0);

            /*
            * In firefox, there are cases (ie doubleclick of a word) where the selectionRange start
            * will be at the very end of an element.  In other browsers, the selectionRange start
            * would instead be at the very beginning of an element that actually has content.
            * example:
            *   <span>foo</span><span>bar</span>
            *
            * If the text 'bar' is selected, most browsers will have the selectionRange start at the beginning
            * of the 'bar' span.  However, there are cases where firefox will have the selectionRange start
            * at the end of the 'foo' span.  The contenteditable behavior will be ok, but if there are any
            * properties on the 'bar' span, they won't be reflected accurately in the toolbar
            * (ie 'Bold' button wouldn't be active)
            *
            * So, for cases where the selectionRange start is at the end of an element/node, find the next
            * adjacent text node that actually has content in it, and move the selectionRange start there.
            */
            if (this.options.standardizeSelectionStart &&
                    this.selectionRange.startContainer.nodeValue &&
                    (this.selectionRange.startOffset === this.selectionRange.startContainer.nodeValue.length)) {
                adjacentNode = Util.findAdjacentTextNodeWithContent(Selection.getSelectionElement(this.options.contentWindow), this.selectionRange.startContainer, this.options.ownerDocument);
                if (adjacentNode) {
                    offset = 0;
                    while (adjacentNode.nodeValue.substr(offset, 1).trim().length === 0) {
                        offset = offset + 1;
                    }
                    newRange = this.options.ownerDocument.createRange();
                    newRange.setStart(adjacentNode, offset);
                    newRange.setEnd(this.selectionRange.endContainer, this.selectionRange.endOffset);
                    this.selection.removeAllRanges();
                    this.selection.addRange(newRange);
                    this.selectionRange = newRange;
                }
            }

            for (i = 0; i < this.elements.length; i += 1) {
                if (this.elements[i] === selectionElement) {
                    this.showAndUpdateToolbar();
                    return;
                }
            }

            if (!this.options.staticToolbar) {
                this.hideToolbarActions();
            }
        },

        showAndUpdateToolbar: function () {
            this.setToolbarButtonStates()
                .setToolbarPosition()
                .showToolbarDefaultActions();
        },

        setToolbarPosition: function () {
            // document.documentElement for IE 9
            var scrollTop = (this.options.ownerDocument.documentElement && this.options.ownerDocument.documentElement.scrollTop) || this.options.ownerDocument.body.scrollTop,
                selection = this.options.contentWindow.getSelection(),
                windowWidth = this.options.contentWindow.innerWidth,
                container = Selection.getSelectionElement(this.options.contentWindow),
                buttonHeight = 50,
                toolbarWidth,
                toolbarHeight,
                halfOffsetWidth,
                defaultLeft,
                containerRect,
                containerTop,
                containerCenter,
                range,
                boundary,
                middleBoundary,
                targetLeft;

            // If there isn't a valid selection, bail
            if (!container || !this.options.contentWindow.getSelection().focusNode) {
                return this;
            }

            // If the container isn't part of this medium-editor instance, bail
            if (this.elements.indexOf(container) === -1) {
                return this;
            }

            // Calculate container dimensions
            containerRect = container.getBoundingClientRect();
            containerTop = containerRect.top + scrollTop;
            containerCenter = (containerRect.left + (containerRect.width / 2));

            // position the toolbar at left 0, so we can get the real width of the toolbar
            this.toolbar.style.left = '0';
            toolbarWidth = this.toolbar.offsetWidth;
            toolbarHeight = this.toolbar.offsetHeight;
            halfOffsetWidth = toolbarWidth / 2;
            defaultLeft = this.options.diffLeft - halfOffsetWidth;

            if (this.options.staticToolbar) {
                this.showToolbar();

                if (this.options.stickyToolbar) {
                    // If it's beyond the height of the editor, position it at the bottom of the editor
                    if (scrollTop > (containerTop + container.offsetHeight - toolbarHeight)) {
                        this.toolbar.style.top = (containerTop + container.offsetHeight - toolbarHeight) + 'px';
                        this.toolbar.classList.remove('sticky-toolbar');

                    // Stick the toolbar to the top of the window
                    } else if (scrollTop > (containerTop - toolbarHeight)) {
                        this.toolbar.classList.add('sticky-toolbar');
                        this.toolbar.style.top = "0px";

                    // Normal static toolbar position
                    } else {
                        this.toolbar.classList.remove('sticky-toolbar');
                        this.toolbar.style.top = containerTop - toolbarHeight + "px";
                    }
                } else {
                    this.toolbar.style.top = containerTop - toolbarHeight + "px";
                }

                if (this.options.toolbarAlign === 'left') {
                    targetLeft = containerRect.left;
                } else if (this.options.toolbarAlign === 'center') {
                    targetLeft = containerCenter - halfOffsetWidth;
                } else if (this.options.toolbarAlign === 'right') {
                    targetLeft = containerRect.right - toolbarWidth;
                }

                if (targetLeft < 0) {
                    targetLeft = 0;
                } else if ((targetLeft + toolbarWidth) > windowWidth) {
                    targetLeft = windowWidth - toolbarWidth;
                }

                this.toolbar.style.left = targetLeft + 'px';

            } else if (!selection.isCollapsed) {
                this.showToolbar();

                range = selection.getRangeAt(0);
                boundary = range.getBoundingClientRect();
                middleBoundary = (boundary.left + boundary.right) / 2;

                if (boundary.top < buttonHeight) {
                    this.toolbar.classList.add('medium-toolbar-arrow-over');
                    this.toolbar.classList.remove('medium-toolbar-arrow-under');
                    this.toolbar.style.top = buttonHeight + boundary.bottom - this.options.diffTop + this.options.contentWindow.pageYOffset - toolbarHeight + 'px';
                } else {
                    this.toolbar.classList.add('medium-toolbar-arrow-under');
                    this.toolbar.classList.remove('medium-toolbar-arrow-over');
                    this.toolbar.style.top = boundary.top + this.options.diffTop + this.options.contentWindow.pageYOffset - toolbarHeight + 'px';
                }
                if (middleBoundary < halfOffsetWidth) {
                    this.toolbar.style.left = defaultLeft + halfOffsetWidth + 'px';
                } else if ((windowWidth - middleBoundary) < halfOffsetWidth) {
                    this.toolbar.style.left = windowWidth + defaultLeft - halfOffsetWidth + 'px';
                } else {
                    this.toolbar.style.left = defaultLeft + middleBoundary + 'px';
                }
            }

            this.hideAnchorPreview();

            return this;
        },

        setToolbarButtonStates: function () {
            this.commands.forEach(function (extension) {
                if (typeof extension.isActive === 'function') {
                    extension.setInactive();
                }
            }.bind(this));
            this.checkActiveButtons();
            return this;
        },

        checkActiveButtons: function () {
            var elements = Array.prototype.slice.call(this.elements),
                manualStateChecks = [],
                queryState = null,
                parentNode,
                checkExtension = function (extension) {
                    if (typeof extension.checkState === 'function') {
                        extension.checkState(parentNode);
                    } else if (typeof extension.isActive === 'function' &&
                               typeof extension.isAlreadyApplied === 'function') {
                        if (!extension.isActive() && extension.isAlreadyApplied(parentNode)) {
                            extension.setActive();
                        }
                    }
                };

            if (!this.selectionRange) {
                return;
            }
            parentNode = Selection.getSelectedParentElement(this.selectionRange);

            // Loop through all commands
            this.commands.forEach(function (command) {
                // For those commands where we can use document.queryCommandState(), do so
                if (typeof command.queryCommandState === 'function') {
                    queryState = command.queryCommandState();
                    // If queryCommandState returns a valid value, we can trust the browser
                    // and don't need to do our manual checks
                    if (queryState !== null) {
                        if (queryState) {
                            command.setActive();
                        }
                        return;
                    }
                }
                // We can't use queryCommandState for this command, so add to manualStateChecks
                manualStateChecks.push(command);
            });

            // Climb up the DOM and do manual checks for whether a certain command is currently enabled for this node
            while (parentNode.tagName !== undefined && Util.parentElements.indexOf(parentNode.tagName.toLowerCase) === -1) {
                manualStateChecks.forEach(checkExtension.bind(this));

                // we can abort the search upwards if we leave the contentEditable element
                if (elements.indexOf(parentNode) !== -1) {
                    break;
                }
                parentNode = parentNode.parentNode;
            }
        },

        setFirstAndLastButtons: function () {
            var buttons = this.toolbar.querySelectorAll('button');
            if (buttons.length > 0) {
                buttons[0].className += ' ' + this.options.firstButtonClass;
                buttons[buttons.length - 1].className += ' ' + this.options.lastButtonClass;
            }
            return this;
        },

        // Wrapper around document.queryCommandState for checking whether an action has already
        // been applied to the current selection
        queryCommandState: function (action) {
            var fullAction = /^full-(.+)$/gi,
                match,
                queryState = null;

            // Actions starting with 'full-' need to be modified since this is a medium-editor concept
            match = fullAction.exec(action);
            if (match) {
                action = match[1];
            }

            try {
                queryState = this.options.ownerDocument.queryCommandState(action);
            } catch (exc) {
                queryState = null;
            }

            return queryState;
        },

        execAction: function (action, opts) {
            /*jslint regexp: true*/
            var fullAction = /^full-(.+)$/gi,
                match,
                result;
            /*jslint regexp: false*/

            // Actions starting with 'full-' should be applied to to the entire contents of the editable element
            // (ie full-bold, full-append-pre, etc.)
            match = fullAction.exec(action);
            if (match) {
                // Store the current selection to be restored after applying the action
                this.saveSelection();
                // Select all of the contents before calling the action
                this.selectAllContents();
                result = this.execActionInternal(match[1], opts);
                // Restore the previous selection
                this.restoreSelection();
            } else {
                result = this.execActionInternal(action, opts);
            }

            this.checkSelection();
            return result;
        },

        execActionInternal: function (action, opts) {
            /*jslint regexp: true*/
            var appendAction = /^append-(.+)$/gi,
                match;
            /*jslint regexp: false*/

            // Actions starting with 'append-' should attempt to format a block of text ('formatBlock') using a specific
            // type of block element (ie append-blockquote, append-h1, append-pre, etc.)
            match = appendAction.exec(action);
            if (match) {
                return this.execFormatBlock(match[1]);
            }

            if (action === 'createLink') {
                return this.createLink(opts);
            }

            if (action === 'image') {
                return this.options.ownerDocument.execCommand('insertImage', false, this.options.contentWindow.getSelection());
            }

            return this.options.ownerDocument.execCommand(action, false, null);
        },

        getSelectedParentElement: function () {
            return Selection.getSelectedParentElement();
        },

        execFormatBlock: function (el) {
            var selectionData = Selection.getSelectionData(this.selection.anchorNode);
            // FF handles blockquote differently on formatBlock
            // allowing nesting, we need to use outdent
            // https://developer.mozilla.org/en-US/docs/Rich-Text_Editing_in_Mozilla
            if (el === 'blockquote' && selectionData.el &&
                    selectionData.el.parentNode.tagName.toLowerCase() === 'blockquote') {
                return this.options.ownerDocument.execCommand('outdent', false, null);
            }
            if (selectionData.tagName === el) {
                el = 'p';
            }
            // When IE we need to add <> to heading elements and
            //  blockquote needs to be called as indent
            // http://stackoverflow.com/questions/10741831/execcommand-formatblock-headings-in-ie
            // http://stackoverflow.com/questions/1816223/rich-text-editor-with-blockquote-function/1821777#1821777
            if (Util.isIE) {
                if (el === 'blockquote') {
                    return this.options.ownerDocument.execCommand('indent', false, el);
                }
                el = '<' + el + '>';
            }
            return this.options.ownerDocument.execCommand('formatBlock', false, el);
        },

        isToolbarDefaultActionsShown: function () {
            return !!this.toolbarActions && this.toolbarActions.style.display === 'block';
        },

        hideToolbarDefaultActions: function () {
            if (this.toolbarActions && this.isToolbarDefaultActionsShown()) {
                this.commands.forEach(function (extension) {
                    if (extension.onHide && typeof extension.onHide === 'function') {
                        extension.onHide();
                    }
                });
                this.toolbarActions.style.display = 'none';
            }
        },

        showToolbarDefaultActions: function () {
            this.hideExtensionForms();

            if (this.toolbarActions && !this.isToolbarDefaultActionsShown()) {
                this.toolbarActions.style.display = 'block';
            }

            this.keepToolbarAlive = false;
            // Using setTimeout + options.delay because:
            // We will actually be displaying the toolbar, which should be controlled by options.delay
            this.delay(function () {
                this.showToolbar();
            }.bind(this));

            return this;
        },

        hideExtensionForms: function () {
            // Hide all extension forms
            this.commands.forEach(function (extension) {
                if (extension.hasForm && extension.isDisplayed()) {
                    extension.hideForm();
                }
            });
        },

        isToolbarShown: function () {
            return this.toolbar && this.toolbar.classList.contains('medium-editor-toolbar-active');
        },

        showToolbar: function () {
            if (this.toolbar && !this.isToolbarShown()) {
                this.toolbar.classList.add('medium-editor-toolbar-active');
                if (typeof this.options.onShowToolbar === 'function') {
                    this.options.onShowToolbar();
                }
            }
        },

        hideToolbar: function () {
            if (this.isToolbarShown()) {
                this.toolbar.classList.remove('medium-editor-toolbar-active');
                if (typeof this.options.onHideToolbar === 'function') {
                    this.options.onHideToolbar();
                }
            }
        },

        hideToolbarActions: function () {
            this.commands.forEach(function (extension) {
                if (extension.onHide && typeof extension.onHide === 'function') {
                    extension.onHide();
                }
            });
            this.keepToolbarAlive = false;
            this.hideToolbar();
        },

        selectAllContents: function () {
            var range = this.options.ownerDocument.createRange(),
                sel = this.options.contentWindow.getSelection(),
                currNode = Selection.getSelectionElement(this.options.contentWindow);

            if (currNode) {
                // Move to the lowest descendant node that still selects all of the contents
                while (currNode.children.length === 1) {
                    currNode = currNode.children[0];
                }

                range.selectNodeContents(currNode);
                sel.removeAllRanges();
                sel.addRange(range);
            }
        },

        // http://stackoverflow.com/questions/17678843/cant-restore-selection-after-html-modify-even-if-its-the-same-html
        // Tim Down
        // TODO: move to selection.js and clean up old methods there
        saveSelection: function () {
            this.selectionState = null;

            var selection = this.options.contentWindow.getSelection(),
                range,
                preSelectionRange,
                start,
                editableElementIndex = -1;

            if (selection.rangeCount > 0) {
                range = selection.getRangeAt(0);
                preSelectionRange = range.cloneRange();

                // Find element current selection is inside
                this.elements.forEach(function (el, index) {
                    if (el === range.startContainer || Util.isDescendant(el, range.startContainer)) {
                        editableElementIndex = index;
                        return false;
                    }
                });

                if (editableElementIndex > -1) {
                    preSelectionRange.selectNodeContents(this.elements[editableElementIndex]);
                    preSelectionRange.setEnd(range.startContainer, range.startOffset);
                    start = preSelectionRange.toString().length;

                    this.selectionState = {
                        start: start,
                        end: start + range.toString().length,
                        editableElementIndex: editableElementIndex
                    };
                }
            }
        },

        // http://stackoverflow.com/questions/17678843/cant-restore-selection-after-html-modify-even-if-its-the-same-html
        // Tim Down
        // TODO: move to selection.js and clean up old methods there
        restoreSelection: function () {
            if (!this.selectionState) {
                return;
            }

            var editableElement = this.elements[this.selectionState.editableElementIndex],
                charIndex = 0,
                range = this.options.ownerDocument.createRange(),
                nodeStack = [editableElement],
                node,
                foundStart = false,
                stop = false,
                i,
                sel,
                nextCharIndex;

            range.setStart(editableElement, 0);
            range.collapse(true);

            node = nodeStack.pop();
            while (!stop && node) {
                if (node.nodeType === 3) {
                    nextCharIndex = charIndex + node.length;
                    if (!foundStart && this.selectionState.start >= charIndex && this.selectionState.start <= nextCharIndex) {
                        range.setStart(node, this.selectionState.start - charIndex);
                        foundStart = true;
                    }
                    if (foundStart && this.selectionState.end >= charIndex && this.selectionState.end <= nextCharIndex) {
                        range.setEnd(node, this.selectionState.end - charIndex);
                        stop = true;
                    }
                    charIndex = nextCharIndex;
                } else {
                    i = node.childNodes.length - 1;
                    while (i >= 0) {
                        nodeStack.push(node.childNodes[i]);
                        i -= 1;
                    }
                }
                if (!stop) {
                    node = nodeStack.pop();
                }
            }

            sel = this.options.contentWindow.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
        },

        hideAnchorPreview: function () {
            this.anchorPreview.classList.remove('medium-editor-anchor-preview-active');
        },

        // TODO: break method
        showAnchorPreview: function (anchorEl) {
            if (this.anchorPreview.classList.contains('medium-editor-anchor-preview-active')
                    || anchorEl.getAttribute('data-disable-preview')) {
                return true;
            }

            var self = this,
                buttonHeight = 40,
                boundary = anchorEl.getBoundingClientRect(),
                middleBoundary = (boundary.left + boundary.right) / 2,
                halfOffsetWidth,
                defaultLeft;

            self.anchorPreview.querySelector('i').textContent = anchorEl.attributes.href.value;
            halfOffsetWidth = self.anchorPreview.offsetWidth / 2;
            defaultLeft = self.options.diffLeft - halfOffsetWidth;

            self.observeAnchorPreview(anchorEl);

            self.anchorPreview.classList.add('medium-toolbar-arrow-over');
            self.anchorPreview.classList.remove('medium-toolbar-arrow-under');
            self.anchorPreview.style.top = Math.round(buttonHeight + boundary.bottom - self.options.diffTop + this.options.contentWindow.pageYOffset - self.anchorPreview.offsetHeight) + 'px';
            if (middleBoundary < halfOffsetWidth) {
                self.anchorPreview.style.left = defaultLeft + halfOffsetWidth + 'px';
            } else if ((this.options.contentWindow.innerWidth - middleBoundary) < halfOffsetWidth) {
                self.anchorPreview.style.left = this.options.contentWindow.innerWidth + defaultLeft - halfOffsetWidth + 'px';
            } else {
                self.anchorPreview.style.left = defaultLeft + middleBoundary + 'px';
            }

            if (this.anchorPreview && !this.anchorPreview.classList.contains('medium-editor-anchor-preview-active')) {
                this.anchorPreview.classList.add('medium-editor-anchor-preview-active');
            }

            return this;
        },

        // TODO: break method
        observeAnchorPreview: function (anchorEl) {
            var self = this,
                lastOver = (new Date()).getTime(),
                over = true,
                stamp = function () {
                    lastOver = (new Date()).getTime();
                    over = true;
                },
                unstamp = function (e) {
                    if (!e.relatedTarget || !/anchor-preview/.test(e.relatedTarget.className)) {
                        over = false;
                    }
                },
                interval_timer = setInterval(function () {
                    if (over) {
                        return true;
                    }
                    var durr = (new Date()).getTime() - lastOver;
                    if (durr > self.options.anchorPreviewHideDelay) {
                        // hide the preview 1/2 second after mouse leaves the link
                        self.hideAnchorPreview();

                        // cleanup
                        clearInterval(interval_timer);
                        self.off(self.anchorPreview, 'mouseover', stamp);
                        self.off(self.anchorPreview, 'mouseout', unstamp);
                        self.off(anchorEl, 'mouseover', stamp);
                        self.off(anchorEl, 'mouseout', unstamp);

                    }
                }, 200);

            this.on(self.anchorPreview, 'mouseover', stamp);
            this.on(self.anchorPreview, 'mouseout', unstamp);
            this.on(anchorEl, 'mouseover', stamp);
            this.on(anchorEl, 'mouseout', unstamp);
        },

        createAnchorPreview: function () {
            var self = this,
                anchorPreview = this.options.ownerDocument.createElement('div');

            anchorPreview.id = 'medium-editor-anchor-preview-' + this.id;
            anchorPreview.className = 'medium-editor-anchor-preview';
            anchorPreview.innerHTML = this.anchorPreviewTemplate();
            this.options.elementsContainer.appendChild(anchorPreview);

            this.on(anchorPreview, 'click', function () {
                self.anchorPreviewClickHandler();
            });

            return anchorPreview;
        },

        anchorPreviewTemplate: function () {
            return '<div class="medium-editor-toolbar-anchor-preview" id="medium-editor-toolbar-anchor-preview">' +
                '    <i class="medium-editor-toolbar-anchor-preview-inner"></i>' +
                '</div>';
        },

        anchorPreviewClickHandler: function (event) {
            var range,
                sel,
                anchorExtension = this.getExtensionByName('anchor');

            if (anchorExtension && this.activeAnchor) {
                range = this.options.ownerDocument.createRange();
                range.selectNodeContents(this.activeAnchor);

                sel = this.options.contentWindow.getSelection();
                sel.removeAllRanges();
                sel.addRange(range);
                // Using setTimeout + options.delay because:
                // We may actually be displaying the anchor form, which should be controlled by options.delay
                this.delay(function () {
                    if (this.activeAnchor) {
                        anchorExtension.showForm(this.activeAnchor.attributes.href.value);
                    }
                    this.keepToolbarAlive = false;
                }.bind(this));
            }

            this.hideAnchorPreview();
        },

        editorAnchorObserver: function (e) {
            var self = this,
                overAnchor = true,
                leaveAnchor = function () {
                    // mark the anchor as no longer hovered, and stop listening
                    overAnchor = false;
                    self.off(self.activeAnchor, 'mouseout', leaveAnchor);
                };

            if (e.target && e.target.tagName.toLowerCase() === 'a') {

                // Detect empty href attributes
                // The browser will make href="" or href="#top"
                // into absolute urls when accessed as e.targed.href, so check the html
                if (!/href=["']\S+["']/.test(e.target.outerHTML) || /href=["']#\S+["']/.test(e.target.outerHTML)) {
                    return true;
                }

                // only show when hovering on anchors
                if (this.isToolbarShown()) {
                    // only show when toolbar is not present
                    return true;
                }
                this.activeAnchor = e.target;
                this.on(this.activeAnchor, 'mouseout', leaveAnchor);
                // Using setTimeout + options.delay because:
                // - We're going to show the anchor preview according to the configured delay
                //   if the mouse has not left the anchor tag in that time
                this.delay(function () {
                    if (overAnchor) {
                        self.showAnchorPreview(e.target);
                    }
                });
            }
        },

        bindAnchorPreview: function (index) {
            var i, self = this;
            this.editorAnchorObserverWrapper = function (e) {
                self.editorAnchorObserver(e);
            };
            for (i = 0; i < this.elements.length; i += 1) {
                this.on(this.elements[i], 'mouseover', this.editorAnchorObserverWrapper);
            }
            return this;
        },

        createLink: function (opts) {
            var customEvent,
                i;

            if (opts.url && opts.url.trim().length > 0) {
                this.options.ownerDocument.execCommand('createLink', false, opts.url);

                if (this.options.targetBlank || opts.target === '_blank') {
                    Util.setTargetBlank(Selection.getSelectionStart(this.options.ownerDocument));
                }

                if (opts.buttonClass) {
                    this.setButtonClass(opts.buttonClass);
                }
            }

            if (this.options.targetBlank || opts.target === "_blank" || opts.buttonClass) {
                customEvent = this.options.ownerDocument.createEvent("HTMLEvents");
                customEvent.initEvent("input", true, true, this.options.contentWindow);
                for (i = 0; i < this.elements.length; i += 1) {
                    this.elements[i].dispatchEvent(customEvent);
                }
            }
        },

        setButtonClass: function (buttonClass) {
            var el = Selection.getSelectionStart(this.options.ownerDocument),
                classes = buttonClass.split(' '),
                i,
                j;
            if (el.tagName.toLowerCase() === 'a') {
                for (j = 0; j < classes.length; j += 1) {
                    el.classList.add(classes[j]);
                }
            } else {
                el = el.getElementsByTagName('a');
                for (i = 0; i < el.length; i += 1) {
                    for (j = 0; j < classes.length; j += 1) {
                        el[i].classList.add(classes[j]);
                    }
                }
            }
        },

        positionToolbarIfShown: function () {
            if (this.isToolbarShown()) {
                this.setToolbarPosition();
            }
        },

        bindWindowActions: function () {
            var self = this;

            // Add a scroll event for sticky toolbar
            if (this.options.staticToolbar && this.options.stickyToolbar) {
                // On scroll, re-position the toolbar
                this.on(this.options.contentWindow, 'scroll', function () {
                    self.positionToolbarIfShown();
                }, true);
            }

            this.on(this.options.contentWindow, 'resize', function () {
                self.handleResize();
            });

            this.bindBlur();

            return this;
        },

        activate: function () {
            if (this.isActive) {
                return;
            }

            this.setup();
        },

        // TODO: break method
        deactivate: function () {
            var i;
            if (!this.isActive) {
                return;
            }
            this.isActive = false;

            if (this.toolbar !== undefined) {
                this.options.elementsContainer.removeChild(this.anchorPreview);
                this.options.elementsContainer.removeChild(this.toolbar);
                delete this.toolbar;
                delete this.anchorPreview;
            }

            for (i = 0; i < this.elements.length; i += 1) {
                this.elements[i].removeAttribute('contentEditable');
                this.elements[i].removeAttribute('data-medium-element');
            }

            this.commands.forEach(function (extension) {
                if (typeof extension.deactivate === 'function') {
                    extension.deactivate();
                }
            }.bind(this));

            this.removeAllEvents();
        },

        bindPaste: function () {
            var i, self = this;
            this.pasteWrapper = function (e) {
                pasteHandler.handlePaste(this, e, self.options);
            };
            for (i = 0; i < this.elements.length; i += 1) {
                this.on(this.elements[i], 'paste', this.pasteWrapper);
            }
            return this;
        },

        setPlaceholders: function () {
            if (!this.options.disablePlaceholders && this.elements && this.elements.length) {
                this.elements.forEach(function (el) {
                    this.activatePlaceholder(el);
                    this.on(el, 'blur', this.placeholderWrapper.bind(this));
                    this.on(el, 'keypress', this.placeholderWrapper.bind(this));
                }.bind(this));
            }

            return this;
        },

        cleanPaste: function (text) {
            pasteHandler.cleanPaste(text, this.options);
        },

        pasteHTML: function (html) {
            pasteHandler.pasteHTML(html, this.options.ownerDocument);
        }
    };

}());

    return MediumEditor;
}()));/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/*  Coordinate transformations, lat/Long WGS-84 <=> OSGB36  (c) Chris Veness 2005-2012            */
/*   - www.movable-type.co.uk/scripts/coordtransform.js                                           */
/*   - www.movable-type.co.uk/scripts/latlong-convert-coords.html                                 */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */


/**
 * @requires LatLon
 */
 
 
var CoordTransform = {};   // CoordTransform namespace, representing static class


// ellipse parameters
CoordTransform.ellipse = { 
  WGS84:        { a: 6378137,     b: 6356752.3142,   f: 1/298.257223563 },
  GRS80:        { a: 6378137,     b: 6356752.314140, f: 1/298.257222101 },
  Airy1830:     { a: 6377563.396, b: 6356256.910,    f: 1/299.3249646   }, 
  AiryModified: { a: 6377340.189, b: 6356034.448,    f: 1/299.32496     }, 
  Intl1924:     { a: 6378388.000, b: 6356911.946,    f: 1/297.0         }
};


// helmert transform parameters from WGS84 to other datums
CoordTransform.datumTransform = { 
  toOSGB36:  { tx: -446.448,  ty:  125.157,   tz: -542.060,  // m
               rx:   -0.1502, ry:   -0.2470,  rz:   -0.8421, // sec
                s:   20.4894 },                              // ppm
  toED50:    { tx:   89.5,    ty:   93.8,     tz:  123.1,    // m
               rx:    0.0,    ry:    0.0,     rz:    0.156,  // sec
                s:   -1.2 },                                 // ppm
  toIrl1975: { tx: -482.530,  ty:  130.596,   tz: -564.557,  // m
               rx:   -1.042,  ry:   -0.214,   rz:   -0.631,  // sec
                s:   -8.150 } };                             // ppm
  // ED50: og.decc.gov.uk/en/olgs/cms/pons_and_cop/pons/pon4/pon4.aspx
  // strictly, Ireland 1975 is from ETRF89: qv 
  // www.osi.ie/OSI/media/OSI/Content/Publications/transformations_booklet.pdf
  // www.ordnancesurvey.co.uk/oswebsite/gps/information/coordinatesystemsinfo/guidecontents/guide6.html#6.5

               
/**
 * Convert lat/lon point in OSGB36 to WGS84
 *
 * @param  {LatLon} pOSGB36: lat/lon in OSGB36 reference frame
 * @return {LatLon} lat/lon point in WGS84 reference frame
 */
CoordTransform.convertOSGB36toWGS84 = function(pOSGB36) {
  var eAiry1830 = CoordTransform.ellipse.Airy1830;
  var eWGS84 = CoordTransform.ellipse.WGS84;
  var txToOSGB36 = CoordTransform.datumTransform.toOSGB36;
  var txFromOSGB36 = {};  // negate the 'to' transform to get the 'from'
  for (var param in txToOSGB36) txFromOSGB36[param] = -txToOSGB36[param];
  var pWGS84 = CoordTransform.convertEllipsoid(pOSGB36, eAiry1830, txFromOSGB36, eWGS84);
  return pWGS84;
}


/**
 * Convert lat/lon point in WGS84 to OSGB36
 *
 * @param  {LatLon} pWGS84: lat/lon in WGS84 reference frame
 * @return {LatLon} lat/lon point in OSGB36 reference frame
 */
CoordTransform.convertWGS84toOSGB36 = function(pWGS84) {
  var eWGS84 = CoordTransform.ellipse.WGS84;
  var eAiry1830 = CoordTransform.ellipse.Airy1830;
  var txToOSGB36 = CoordTransform.datumTransform.toOSGB36;
  var pOSGB36 = CoordTransform.convertEllipsoid(pWGS84, eWGS84, txToOSGB36, eAiry1830);
  return pOSGB36;
}


/**
 * Convert lat/lon from one ellipsoidal model to another
 *
 * q.v. Ordnance Survey 'A guide to coordinate systems in Great Britain' Section 6
 *      www.ordnancesurvey.co.uk/oswebsite/gps/docs/A_Guide_to_Coordinate_Systems_in_Great_Britain.pdf
 *
 * @private
 * @param {LatLon}   point: lat/lon in source reference frame
 * @param {Number[]} e1:    source ellipse parameters
 * @param {Number[]} t:     Helmert transform parameters
 * @param {Number[]} e1:    target ellipse parameters
 * @return {Coord} lat/lon in target reference frame
 */
CoordTransform.convertEllipsoid = function(point, e1, t, e2) {

  // -- 1: convert polar to cartesian coordinates (using ellipse 1)

  var lat = point.lat().toRad(); 
  var lon = point.lon().toRad(); 

  var a = e1.a, b = e1.b;
  
  var sinPhi = Math.sin(lat);
  var cosPhi = Math.cos(lat);
  var sinLambda = Math.sin(lon);
  var cosLambda = Math.cos(lon);
  var H = 24.7;  // for the moment

  var eSq = (a*a - b*b) / (a*a);
  var nu = a / Math.sqrt(1 - eSq*sinPhi*sinPhi);

  var x1 = (nu+H) * cosPhi * cosLambda;
  var y1 = (nu+H) * cosPhi * sinLambda;
  var z1 = ((1-eSq)*nu + H) * sinPhi;


  // -- 2: apply helmert transform using appropriate params
  
  var tx = t.tx, ty = t.ty, tz = t.tz;
  var rx = (t.rx/3600).toRad();  // normalise seconds to radians
  var ry = (t.ry/3600).toRad();
  var rz = (t.rz/3600).toRad();
  var s1 = t.s/1e6 + 1;          // normalise ppm to (s+1)

  // apply transform
  var x2 = tx + x1*s1 - y1*rz + z1*ry;
  var y2 = ty + x1*rz + y1*s1 - z1*rx;
  var z2 = tz - x1*ry + y1*rx + z1*s1;


  // -- 3: convert cartesian to polar coordinates (using ellipse 2)

  a = e2.a, b = e2.b;
  var precision = 4 / a;  // results accurate to around 4 metres

  eSq = (a*a - b*b) / (a*a);
  var p = Math.sqrt(x2*x2 + y2*y2);
  var phi = Math.atan2(z2, p*(1-eSq)), phiP = 2*Math.PI;
  while (Math.abs(phi-phiP) > precision) {
    nu = a / Math.sqrt(1 - eSq*Math.sin(phi)*Math.sin(phi));
    phiP = phi;
    phi = Math.atan2(z2 + eSq*nu*Math.sin(phi), p);
  }
  var lambda = Math.atan2(y2, x2);
  H = p/Math.cos(phi) - nu;

  return new LatLon(phi.toDeg(), lambda.toDeg(), H);
}


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
;
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/*  Latitude/longitude spherical geodesy formulae & scripts (c) Chris Veness 2002-2012            */
/*   - www.movable-type.co.uk/scripts/latlong.html                                                */
/*                                                                                                */
/*  Sample usage:                                                                                 */
/*    var p1 = new LatLon(51.5136, -0.0983);                                                      */
/*    var p2 = new LatLon(51.4778, -0.0015);                                                      */
/*    var dist = p1.distanceTo(p2);          // in km                                             */
/*    var brng = p1.bearingTo(p2);           // in degrees clockwise from north                   */
/*    ... etc                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/*  Note that minimal error checking is performed in this example code!                           */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */


/**
 * @requires Geo
 */
 
 
/**
 * Creates a point on the earth's surface at the supplied latitude / longitude
 *
 * @constructor
 * @param {Number} lat: latitude in numeric degrees
 * @param {Number} lon: longitude in numeric degrees
 * @param {Number} [rad=6371]: radius of earth if different value is required from standard 6,371km
 */
function LatLon(lat, lon, rad) {
  if (typeof(rad) == 'undefined') rad = 6371;  // earth's mean radius in km
  // only accept numbers or valid numeric strings
  this._lat = typeof(lat)=='number' ? lat : typeof(lat)=='string' && lat.trim()!='' ? +lat : NaN;
  this._lon = typeof(lon)=='number' ? lon : typeof(lon)=='string' && lon.trim()!='' ? +lon : NaN;
  this._radius = typeof(rad)=='number' ? rad : typeof(rad)=='string' && trim(lon)!='' ? +rad : NaN;
}


/**
 * Returns the distance from this point to the supplied point, in km 
 * (using Haversine formula)
 *
 * from: Haversine formula - R. W. Sinnott, "Virtues of the Haversine",
 *       Sky and Telescope, vol 68, no 2, 1984
 *
 * @param   {LatLon} point: Latitude/longitude of destination point
 * @param   {Number} [precision=4]: no of significant digits to use for returned value
 * @returns {Number} Distance in km between this point and destination point
 */
LatLon.prototype.distanceTo = function(point, precision) {
  // default 4 sig figs reflects typical 0.3% accuracy of spherical model
  if (typeof precision == 'undefined') precision = 4;
  
  var R = this._radius;
  var lat1 = this._lat.toRad(), lon1 = this._lon.toRad();
  var lat2 = point._lat.toRad(), lon2 = point._lon.toRad();
  var dLat = lat2 - lat1;
  var dLon = lon2 - lon1;

  var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
          Math.cos(lat1) * Math.cos(lat2) * 
          Math.sin(dLon/2) * Math.sin(dLon/2);
  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  var d = R * c;
  return d.toPrecisionFixed(precision);
}


/**
 * Returns the (initial) bearing from this point to the supplied point, in degrees
 *   see http://williams.best.vwh.net/avform.htm#Crs
 *
 * @param   {LatLon} point: Latitude/longitude of destination point
 * @returns {Number} Initial bearing in degrees from North
 */
LatLon.prototype.bearingTo = function(point) {
  var lat1 = this._lat.toRad(), lat2 = point._lat.toRad();
  var dLon = (point._lon-this._lon).toRad();

  var y = Math.sin(dLon) * Math.cos(lat2);
  var x = Math.cos(lat1)*Math.sin(lat2) -
          Math.sin(lat1)*Math.cos(lat2)*Math.cos(dLon);
  var brng = Math.atan2(y, x);
  
  return (brng.toDeg()+360) % 360;
}


/**
 * Returns final bearing arriving at supplied destination point from this point; the final bearing 
 * will differ from the initial bearing by varying degrees according to distance and latitude
 *
 * @param   {LatLon} point: Latitude/longitude of destination point
 * @returns {Number} Final bearing in degrees from North
 */
LatLon.prototype.finalBearingTo = function(point) {
  // get initial bearing from supplied point back to this point...
  var lat1 = point._lat.toRad(), lat2 = this._lat.toRad();
  var dLon = (this._lon-point._lon).toRad();

  var y = Math.sin(dLon) * Math.cos(lat2);
  var x = Math.cos(lat1)*Math.sin(lat2) -
          Math.sin(lat1)*Math.cos(lat2)*Math.cos(dLon);
  var brng = Math.atan2(y, x);
          
  // ... & reverse it by adding 180°
  return (brng.toDeg()+180) % 360;
}


/**
 * Returns the midpoint between this point and the supplied point.
 *   see http://mathforum.org/library/drmath/view/51822.html for derivation
 *
 * @param   {LatLon} point: Latitude/longitude of destination point
 * @returns {LatLon} Midpoint between this point and the supplied point
 */
LatLon.prototype.midpointTo = function(point) {
  lat1 = this._lat.toRad(), lon1 = this._lon.toRad();
  lat2 = point._lat.toRad();
  var dLon = (point._lon-this._lon).toRad();

  var Bx = Math.cos(lat2) * Math.cos(dLon);
  var By = Math.cos(lat2) * Math.sin(dLon);

  lat3 = Math.atan2(Math.sin(lat1)+Math.sin(lat2),
                    Math.sqrt( (Math.cos(lat1)+Bx)*(Math.cos(lat1)+Bx) + By*By) );
  lon3 = lon1 + Math.atan2(By, Math.cos(lat1) + Bx);
  lon3 = (lon3+3*Math.PI) % (2*Math.PI) - Math.PI;  // normalise to -180..+180º
  
  return new LatLon(lat3.toDeg(), lon3.toDeg());
}


/**
 * Returns the destination point from this point having travelled the given distance (in km) on the 
 * given initial bearing (bearing may vary before destination is reached)
 *
 *   see http://williams.best.vwh.net/avform.htm#LL
 *
 * @param   {Number} brng: Initial bearing in degrees
 * @param   {Number} dist: Distance in km
 * @returns {LatLon} Destination point
 */
LatLon.prototype.destinationPoint = function(brng, dist) {
  dist = typeof(dist)=='number' ? dist : typeof(dist)=='string' && dist.trim()!='' ? +dist : NaN;
  dist = dist/this._radius;  // convert dist to angular distance in radians
  brng = brng.toRad();  // 
  var lat1 = this._lat.toRad(), lon1 = this._lon.toRad();

  var lat2 = Math.asin( Math.sin(lat1)*Math.cos(dist) + 
                        Math.cos(lat1)*Math.sin(dist)*Math.cos(brng) );
  var lon2 = lon1 + Math.atan2(Math.sin(brng)*Math.sin(dist)*Math.cos(lat1), 
                               Math.cos(dist)-Math.sin(lat1)*Math.sin(lat2));
  lon2 = (lon2+3*Math.PI) % (2*Math.PI) - Math.PI;  // normalise to -180..+180º

  return new LatLon(lat2.toDeg(), lon2.toDeg());
}


/**
 * Returns the point of intersection of two paths defined by point and bearing
 *
 *   see http://williams.best.vwh.net/avform.htm#Intersection
 *
 * @param   {LatLon} p1: First point
 * @param   {Number} brng1: Initial bearing from first point
 * @param   {LatLon} p2: Second point
 * @param   {Number} brng2: Initial bearing from second point
 * @returns {LatLon} Destination point (null if no unique intersection defined)
 */
LatLon.intersection = function(p1, brng1, p2, brng2) {
  brng1 = typeof brng1 == 'number' ? brng1 : typeof brng1 == 'string' && trim(brng1)!='' ? +brng1 : NaN;
  brng2 = typeof brng2 == 'number' ? brng2 : typeof brng2 == 'string' && trim(brng2)!='' ? +brng2 : NaN;
  lat1 = p1._lat.toRad(), lon1 = p1._lon.toRad();
  lat2 = p2._lat.toRad(), lon2 = p2._lon.toRad();
  brng13 = brng1.toRad(), brng23 = brng2.toRad();
  dLat = lat2-lat1, dLon = lon2-lon1;
  
  dist12 = 2*Math.asin( Math.sqrt( Math.sin(dLat/2)*Math.sin(dLat/2) + 
    Math.cos(lat1)*Math.cos(lat2)*Math.sin(dLon/2)*Math.sin(dLon/2) ) );
  if (dist12 == 0) return null;
  
  // initial/final bearings between points
  brngA = Math.acos( ( Math.sin(lat2) - Math.sin(lat1)*Math.cos(dist12) ) / 
    ( Math.sin(dist12)*Math.cos(lat1) ) );
  if (isNaN(brngA)) brngA = 0;  // protect against rounding
  brngB = Math.acos( ( Math.sin(lat1) - Math.sin(lat2)*Math.cos(dist12) ) / 
    ( Math.sin(dist12)*Math.cos(lat2) ) );
  
  if (Math.sin(lon2-lon1) > 0) {
    brng12 = brngA;
    brng21 = 2*Math.PI - brngB;
  } else {
    brng12 = 2*Math.PI - brngA;
    brng21 = brngB;
  }
  
  alpha1 = (brng13 - brng12 + Math.PI) % (2*Math.PI) - Math.PI;  // angle 2-1-3
  alpha2 = (brng21 - brng23 + Math.PI) % (2*Math.PI) - Math.PI;  // angle 1-2-3
  
  if (Math.sin(alpha1)==0 && Math.sin(alpha2)==0) return null;  // infinite intersections
  if (Math.sin(alpha1)*Math.sin(alpha2) < 0) return null;       // ambiguous intersection
  
  //alpha1 = Math.abs(alpha1);
  //alpha2 = Math.abs(alpha2);
  // ... Ed Williams takes abs of alpha1/alpha2, but seems to break calculation?
  
  alpha3 = Math.acos( -Math.cos(alpha1)*Math.cos(alpha2) + 
                       Math.sin(alpha1)*Math.sin(alpha2)*Math.cos(dist12) );
  dist13 = Math.atan2( Math.sin(dist12)*Math.sin(alpha1)*Math.sin(alpha2), 
                       Math.cos(alpha2)+Math.cos(alpha1)*Math.cos(alpha3) )
  lat3 = Math.asin( Math.sin(lat1)*Math.cos(dist13) + 
                    Math.cos(lat1)*Math.sin(dist13)*Math.cos(brng13) );
  dLon13 = Math.atan2( Math.sin(brng13)*Math.sin(dist13)*Math.cos(lat1), 
                       Math.cos(dist13)-Math.sin(lat1)*Math.sin(lat3) );
  lon3 = lon1+dLon13;
  lon3 = (lon3+3*Math.PI) % (2*Math.PI) - Math.PI;  // normalise to -180..+180º
  
  return new LatLon(lat3.toDeg(), lon3.toDeg());
}


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

/**
 * Returns the distance from this point to the supplied point, in km, travelling along a rhumb line
 *
 *   see http://williams.best.vwh.net/avform.htm#Rhumb
 *
 * @param   {LatLon} point: Latitude/longitude of destination point
 * @returns {Number} Distance in km between this point and destination point
 */
LatLon.prototype.rhumbDistanceTo = function(point) {
  var R = this._radius;
  var lat1 = this._lat.toRad(), lat2 = point._lat.toRad();
  var dLat = (point._lat-this._lat).toRad();
  var dLon = Math.abs(point._lon-this._lon).toRad();
  
  var dPhi = Math.log(Math.tan(lat2/2+Math.PI/4)/Math.tan(lat1/2+Math.PI/4));
  var q = (isFinite(dLat/dPhi)) ? dLat/dPhi : Math.cos(lat1);  // E-W line gives dPhi=0
  
  // if dLon over 180° take shorter rhumb across anti-meridian:
  if (Math.abs(dLon) > Math.PI) {
    dLon = dLon>0 ? -(2*Math.PI-dLon) : (2*Math.PI+dLon);
  }
  
  var dist = Math.sqrt(dLat*dLat + q*q*dLon*dLon) * R; 
  
  return dist.toPrecisionFixed(4);  // 4 sig figs reflects typical 0.3% accuracy of spherical model
}

/**
 * Returns the bearing from this point to the supplied point along a rhumb line, in degrees
 *
 * @param   {LatLon} point: Latitude/longitude of destination point
 * @returns {Number} Bearing in degrees from North
 */
LatLon.prototype.rhumbBearingTo = function(point) {
  var lat1 = this._lat.toRad(), lat2 = point._lat.toRad();
  var dLon = (point._lon-this._lon).toRad();
  
  var dPhi = Math.log(Math.tan(lat2/2+Math.PI/4)/Math.tan(lat1/2+Math.PI/4));
  if (Math.abs(dLon) > Math.PI) dLon = dLon>0 ? -(2*Math.PI-dLon) : (2*Math.PI+dLon);
  var brng = Math.atan2(dLon, dPhi);
  
  return (brng.toDeg()+360) % 360;
}

/**
 * Returns the destination point from this point having travelled the given distance (in km) on the 
 * given bearing along a rhumb line
 *
 * @param   {Number} brng: Bearing in degrees from North
 * @param   {Number} dist: Distance in km
 * @returns {LatLon} Destination point
 */
LatLon.prototype.rhumbDestinationPoint = function(brng, dist) {
  var R = this._radius;
  var d = parseFloat(dist)/R;  // d = angular distance covered on earth’s surface
  var lat1 = this._lat.toRad(), lon1 = this._lon.toRad();
  brng = brng.toRad();

  var dLat = d*Math.cos(brng);
  // nasty kludge to overcome ill-conditioned results around parallels of latitude:
  if (Math.abs(dLat) < 1e-10) dLat = 0; // dLat < 1 mm
  
  var lat2 = lat1 + dLat;
  var dPhi = Math.log(Math.tan(lat2/2+Math.PI/4)/Math.tan(lat1/2+Math.PI/4));
  var q = (isFinite(dLat/dPhi)) ? dLat/dPhi : Math.cos(lat1);  // E-W line gives dPhi=0
  var dLon = d*Math.sin(brng)/q;
  
  // check for some daft bugger going past the pole, normalise latitude if so
  if (Math.abs(lat2) > Math.PI/2) lat2 = lat2>0 ? Math.PI-lat2 : -Math.PI-lat2;
  
  lon2 = (lon1+dLon+3*Math.PI)%(2*Math.PI) - Math.PI;
 
  return new LatLon(lat2.toDeg(), lon2.toDeg());
}

/**
 * Returns the loxodromic midpoint (along a rhumb line) between this point and the supplied point.
 *   see http://mathforum.org/kb/message.jspa?messageID=148837
 *
 * @param   {LatLon} point: Latitude/longitude of destination point
 * @returns {LatLon} Midpoint between this point and the supplied point
 */
LatLon.prototype.rhumbMidpointTo = function(point) {
  lat1 = this._lat.toRad(), lon1 = this._lon.toRad();
  lat2 = point._lat.toRad(), lon2 = point._lon.toRad();
  
  if (Math.abs(lon2-lon1) > Math.PI) lon1 += 2*Math.PI; // crossing anti-meridian
  
  var lat3 = (lat1+lat2)/2;
  var f1 = Math.tan(Math.PI/4 + lat1/2);
  var f2 = Math.tan(Math.PI/4 + lat2/2);
  var f3 = Math.tan(Math.PI/4 + lat3/2);
  var lon3 = ( (lon2-lon1)*Math.log(f3) + lon1*Math.log(f2) - lon2*Math.log(f1) ) / Math.log(f2/f1);
  
  if (!isFinite(lon3)) lon3 = (lon1+lon2)/2; // parallel of latitude
  
  lon3 = (lon3+3*Math.PI) % (2*Math.PI) - Math.PI;  // normalise to -180..+180º
  
  return new LatLon(lat3.toDeg(), lon3.toDeg());
}


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */


/**
 * Returns the latitude of this point; signed numeric degrees if no format, otherwise format & dp 
 * as per Geo.toLat()
 *
 * @param   {String} [format]: Return value as 'd', 'dm', 'dms'
 * @param   {Number} [dp=0|2|4]: No of decimal places to display
 * @returns {Number|String} Numeric degrees if no format specified, otherwise deg/min/sec
 */
LatLon.prototype.lat = function(format, dp) {
  if (typeof format == 'undefined') return this._lat;
  
  return Geo.toLat(this._lat, format, dp);
}

/**
 * Returns the longitude of this point; signed numeric degrees if no format, otherwise format & dp 
 * as per Geo.toLon()
 *
 * @param   {String} [format]: Return value as 'd', 'dm', 'dms'
 * @param   {Number} [dp=0|2|4]: No of decimal places to display
 * @returns {Number|String} Numeric degrees if no format specified, otherwise deg/min/sec
 */
LatLon.prototype.lon = function(format, dp) {
  if (typeof format == 'undefined') return this._lon;
  
  return Geo.toLon(this._lon, format, dp);
}

/**
 * Returns a string representation of this point; format and dp as per lat()/lon()
 *
 * @param   {String} [format]: Return value as 'd', 'dm', 'dms'
 * @param   {Number} [dp=0|2|4]: No of decimal places to display
 * @returns {String} Comma-separated latitude/longitude
 */
LatLon.prototype.toString = function(format, dp) {
  if (typeof format == 'undefined') format = 'dms';
  
  return Geo.toLat(this._lat, format, dp) + ', ' + Geo.toLon(this._lon, format, dp);
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

// ---- extend Number object with methods for converting degrees/radians

/** Converts numeric degrees to radians */
if (typeof Number.prototype.toRad == 'undefined') {
  Number.prototype.toRad = function() {
    return this * Math.PI / 180;
  }
}

/** Converts radians to numeric (signed) degrees */
if (typeof Number.prototype.toDeg == 'undefined') {
  Number.prototype.toDeg = function() {
    return this * 180 / Math.PI;
  }
}

/** 
 * Formats the significant digits of a number, using only fixed-point notation (no exponential)
 * 
 * @param   {Number} precision: Number of significant digits to appear in the returned string
 * @returns {String} A string representation of number which contains precision significant digits
 */
if (typeof Number.prototype.toPrecisionFixed == 'undefined') {
  Number.prototype.toPrecisionFixed = function(precision) {
    
    // use standard toPrecision method
    var n = this.toPrecision(precision);
    
    // ... but replace +ve exponential format with trailing zeros
    n = n.replace(/(.+)e\+(.+)/, function(n, sig, exp) {
      sig = sig.replace(/\./, '');       // remove decimal from significand
      l = sig.length - 1;
      while (exp-- > l) sig = sig + '0'; // append zeros from exponent
      return sig;
    });
    
    // ... and replace -ve exponential format with leading zeros
    n = n.replace(/(.+)e-(.+)/, function(n, sig, exp) {
      sig = sig.replace(/\./, '');       // remove decimal from significand
      while (exp-- > 1) sig = '0' + sig; // prepend zeros from exponent
      return '0.' + sig;
    });
    
    return n;
  }
}

/** Trims whitespace from string (q.v. blog.stevenlevithan.com/archives/faster-trim-javascript) */
if (typeof String.prototype.trim == 'undefined') {
  String.prototype.trim = function() {
    return String(this).replace(/^\s\s*/, '').replace(/\s\s*$/, '');
  }
}


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
if (!window.console) window.console = { log: function() {} };/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/*  Ordnance Survey Grid Reference functions  (c) Chris Veness 2005-2012                          */
/*   - www.movable-type.co.uk/scripts/gridref.js                                                  */
/*   - www.movable-type.co.uk/scripts/latlon-gridref.html                                         */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */


/**
 * @requires LatLon
 */
 
 
/**
 * Creates a OsGridRef object
 *
 * @constructor
 * @param {Number} easting:  Easting in metres from OS false origin
 * @param {Number} northing: Northing in metres from OS false origin
 */
function OsGridRef(easting, northing) {
  this.easting = parseInt(easting, 10);
  this.northing = parseInt(northing, 10);
}


/**
 * Convert (OSGB36) latitude/longitude to Ordnance Survey grid reference easting/northing coordinate
 *
 * @param {LatLon} point: OSGB36 latitude/longitude
 * @return {OsGridRef} OS Grid Reference easting/northing
 */
OsGridRef.latLongToOsGrid = function(point) {
  var lat = point.lat().toRad(); 
  var lon = point.lon().toRad(); 
  
  var a = 6377563.396, b = 6356256.910;          // Airy 1830 major & minor semi-axes
  var F0 = 0.9996012717;                         // NatGrid scale factor on central meridian
  var lat0 = (49).toRad(), lon0 = (-2).toRad();  // NatGrid true origin is 49ºN,2ºW
  var N0 = -100000, E0 = 400000;                 // northing & easting of true origin, metres
  var e2 = 1 - (b*b)/(a*a);                      // eccentricity squared
  var n = (a-b)/(a+b), n2 = n*n, n3 = n*n*n;

  var cosLat = Math.cos(lat), sinLat = Math.sin(lat);
  var nu = a*F0/Math.sqrt(1-e2*sinLat*sinLat);              // transverse radius of curvature
  var rho = a*F0*(1-e2)/Math.pow(1-e2*sinLat*sinLat, 1.5);  // meridional radius of curvature
  var eta2 = nu/rho-1;

  var Ma = (1 + n + (5/4)*n2 + (5/4)*n3) * (lat-lat0);
  var Mb = (3*n + 3*n*n + (21/8)*n3) * Math.sin(lat-lat0) * Math.cos(lat+lat0);
  var Mc = ((15/8)*n2 + (15/8)*n3) * Math.sin(2*(lat-lat0)) * Math.cos(2*(lat+lat0));
  var Md = (35/24)*n3 * Math.sin(3*(lat-lat0)) * Math.cos(3*(lat+lat0));
  var M = b * F0 * (Ma - Mb + Mc - Md);              // meridional arc

  var cos3lat = cosLat*cosLat*cosLat;
  var cos5lat = cos3lat*cosLat*cosLat;
  var tan2lat = Math.tan(lat)*Math.tan(lat);
  var tan4lat = tan2lat*tan2lat;

  var I = M + N0;
  var II = (nu/2)*sinLat*cosLat;
  var III = (nu/24)*sinLat*cos3lat*(5-tan2lat+9*eta2);
  var IIIA = (nu/720)*sinLat*cos5lat*(61-58*tan2lat+tan4lat);
  var IV = nu*cosLat;
  var V = (nu/6)*cos3lat*(nu/rho-tan2lat);
  var VI = (nu/120) * cos5lat * (5 - 18*tan2lat + tan4lat + 14*eta2 - 58*tan2lat*eta2);

  var dLon = lon-lon0;
  var dLon2 = dLon*dLon, dLon3 = dLon2*dLon, dLon4 = dLon3*dLon, dLon5 = dLon4*dLon, dLon6 = dLon5*dLon;

  var N = I + II*dLon2 + III*dLon4 + IIIA*dLon6;
  var E = E0 + IV*dLon + V*dLon3 + VI*dLon5;

  return new OsGridRef(E, N);
}


/**
 * Convert Ordnance Survey grid reference easting/northing coordinate to (OSGB36) latitude/longitude
 *
 * @param {OsGridRef} easting/northing to be converted to latitude/longitude
 * @return {LatLon} latitude/longitude (in OSGB36) of supplied grid reference
 */
OsGridRef.osGridToLatLong = function(gridref) {
  var E = gridref.easting;
  var N = gridref.northing;

  var a = 6377563.396, b = 6356256.910;              // Airy 1830 major & minor semi-axes
  var F0 = 0.9996012717;                             // NatGrid scale factor on central meridian
  var lat0 = 49*Math.PI/180, lon0 = -2*Math.PI/180;  // NatGrid true origin
  var N0 = -100000, E0 = 400000;                     // northing & easting of true origin, metres
  var e2 = 1 - (b*b)/(a*a);                          // eccentricity squared
  var n = (a-b)/(a+b), n2 = n*n, n3 = n*n*n;

  var lat=lat0, M=0;
  do {
    lat = (N-N0-M)/(a*F0) + lat;

    var Ma = (1 + n + (5/4)*n2 + (5/4)*n3) * (lat-lat0);
    var Mb = (3*n + 3*n*n + (21/8)*n3) * Math.sin(lat-lat0) * Math.cos(lat+lat0);
    var Mc = ((15/8)*n2 + (15/8)*n3) * Math.sin(2*(lat-lat0)) * Math.cos(2*(lat+lat0));
    var Md = (35/24)*n3 * Math.sin(3*(lat-lat0)) * Math.cos(3*(lat+lat0));
    M = b * F0 * (Ma - Mb + Mc - Md);                // meridional arc

  } while (N-N0-M >= 0.00001);  // ie until < 0.01mm

  var cosLat = Math.cos(lat), sinLat = Math.sin(lat);
  var nu = a*F0/Math.sqrt(1-e2*sinLat*sinLat);              // transverse radius of curvature
  var rho = a*F0*(1-e2)/Math.pow(1-e2*sinLat*sinLat, 1.5);  // meridional radius of curvature
  var eta2 = nu/rho-1;

  var tanLat = Math.tan(lat);
  var tan2lat = tanLat*tanLat, tan4lat = tan2lat*tan2lat, tan6lat = tan4lat*tan2lat;
  var secLat = 1/cosLat;
  var nu3 = nu*nu*nu, nu5 = nu3*nu*nu, nu7 = nu5*nu*nu;
  var VII = tanLat/(2*rho*nu);
  var VIII = tanLat/(24*rho*nu3)*(5+3*tan2lat+eta2-9*tan2lat*eta2);
  var IX = tanLat/(720*rho*nu5)*(61+90*tan2lat+45*tan4lat);
  var X = secLat/nu;
  var XI = secLat/(6*nu3)*(nu/rho+2*tan2lat);
  var XII = secLat/(120*nu5)*(5+28*tan2lat+24*tan4lat);
  var XIIA = secLat/(5040*nu7)*(61+662*tan2lat+1320*tan4lat+720*tan6lat);

  var dE = (E-E0), dE2 = dE*dE, dE3 = dE2*dE, dE4 = dE2*dE2, dE5 = dE3*dE2, dE6 = dE4*dE2, dE7 = dE5*dE2;
  lat = lat - VII*dE2 + VIII*dE4 - IX*dE6;
  var lon = lon0 + X*dE - XI*dE3 + XII*dE5 - XIIA*dE7;
  
  return new LatLon(lat.toDeg(), lon.toDeg());
}


/**
 * Converts standard grid reference ('SU387148') to fully numeric ref ([438700,114800]);
 *   returned co-ordinates are in metres, centred on supplied grid square;
 *
 * @param {String} gridref: Standard format OS grid reference
 * @returns {OsGridRef}     Numeric version of grid reference in metres from false origin
 */
OsGridRef.parse = function(gridref) {
  gridref = gridref.trim();
  // get numeric values of letter references, mapping A->0, B->1, C->2, etc:
  var l1 = gridref.toUpperCase().charCodeAt(0) - 'A'.charCodeAt(0);
  var l2 = gridref.toUpperCase().charCodeAt(1) - 'A'.charCodeAt(0);
  // shuffle down letters after 'I' since 'I' is not used in grid:
  if (l1 > 7) l1--;
  if (l2 > 7) l2--;

  // convert grid letters into 100km-square indexes from false origin (grid square SV):
  var e = ((l1-2)%5)*5 + (l2%5);
  var n = (19-Math.floor(l1/5)*5) - Math.floor(l2/5);
  if (e<0 || e>6 || n<0 || n>12) return new OsGridRef(NaN, NaN);

  // skip grid letters to get numeric part of ref, stripping any spaces:
  gridref = gridref.slice(2).replace(/ /g,'');

  // append numeric part of references to grid index:
  e += gridref.slice(0, gridref.length/2);
  n += gridref.slice(gridref.length/2);

  // normalise to 1m grid, rounding up to centre of grid square:
  switch (gridref.length) {
    case 0: e += '50000'; n += '50000'; break;
    case 2: e += '5000'; n += '5000'; break;
    case 4: e += '500'; n += '500'; break;
    case 6: e += '50'; n += '50'; break;
    case 8: e += '5'; n += '5'; break;
    case 10: break; // 10-digit refs are already 1m
    default: return new OsGridRef(NaN, NaN);
  }

  return new OsGridRef(e, n);
}


/**
 * Converts this numeric grid reference to standard OS grid reference
 *
 * @param {Number} [digits=6] Precision of returned grid reference (6 digits = metres)
 * @return {String)           This grid reference in standard format
 */
OsGridRef.prototype.toString = function(digits) {
  digits = (typeof digits == 'undefined') ? 10 : digits;
  e = this.easting, n = this.northing;
  if (e==NaN || n==NaN) return '??';
  
  // get the 100km-grid indices
  var e100k = Math.floor(e/100000), n100k = Math.floor(n/100000);
  
  if (e100k<0 || e100k>6 || n100k<0 || n100k>12) return '';

  // translate those into numeric equivalents of the grid letters
  var l1 = (19-n100k) - (19-n100k)%5 + Math.floor((e100k+10)/5);
  var l2 = (19-n100k)*5%25 + e100k%5;

  // compensate for skipped 'I' and build grid letter-pairs
  if (l1 > 7) l1++;
  if (l2 > 7) l2++;
  var letPair = String.fromCharCode(l1+'A'.charCodeAt(0), l2+'A'.charCodeAt(0));

  // strip 100km-grid indices from easting & northing, and reduce precision
  e = Math.floor((e%100000)/Math.pow(10,5-digits/2));
  n = Math.floor((n%100000)/Math.pow(10,5-digits/2));

  var gridRef = letPair + ' ' + e.padLz(digits/2) + ' ' + n.padLz(digits/2);

  return gridRef;
}


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

/** Trims whitespace from string (q.v. blog.stevenlevithan.com/archives/faster-trim-javascript) */
if (typeof String.prototype.trim == 'undefined') {
  String.prototype.trim = function() {
    return this.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
  }
}

/** Pads a number with sufficient leading zeros to make it w chars wide */
if (typeof String.prototype.padLz == 'undefined') {
  Number.prototype.padLz = function(w) {
    var n = this.toString();
    var l = n.length;
    for (var i=0; i<w-l; i++) n = '0' + n;
    return n;
  }
}


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
;
/*!
	Papa Parse
	v4.1.0
	https://github.com/mholt/PapaParse
*/
(function(global)
{
	"use strict";

	var IS_WORKER = !global.document, LOADED_SYNC = false, AUTO_SCRIPT_PATH;
	var workers = {}, workerIdCounter = 0;

	global.Papa = {};

	global.Papa.parse = CsvToJson;
	global.Papa.unparse = JsonToCsv;

	global.Papa.RECORD_SEP = String.fromCharCode(30);
	global.Papa.UNIT_SEP = String.fromCharCode(31);
	global.Papa.BYTE_ORDER_MARK = "\ufeff";
	global.Papa.BAD_DELIMITERS = ["\r", "\n", "\"", global.Papa.BYTE_ORDER_MARK];
	global.Papa.WORKERS_SUPPORTED = !!global.Worker;
	global.Papa.SCRIPT_PATH = null;	// Must be set manually if using workers and Papa Parse is loaded asynchronously

	// Configurable chunk sizes for local and remote files, respectively
	global.Papa.LocalChunkSize = 1024 * 1024 * 10;	// 10 MB
	global.Papa.RemoteChunkSize = 1024 * 1024 * 5;	// 5 MB
	global.Papa.DefaultDelimiter = ",";				// Used if not specified and detection fails

	// Exposed for testing and development only
	global.Papa.Parser = Parser;
	global.Papa.ParserHandle = ParserHandle;
	global.Papa.NetworkStreamer = NetworkStreamer;
	global.Papa.FileStreamer = FileStreamer;
	global.Papa.StringStreamer = StringStreamer;

	if (global.jQuery)
	{
		var $ = global.jQuery;
		$.fn.parse = function(options)
		{
			var config = options.config || {};
			var queue = [];

			this.each(function(idx)
			{
				var supported = $(this).prop('tagName').toUpperCase() == "INPUT"
								&& $(this).attr('type').toLowerCase() == "file"
								&& global.FileReader;

				if (!supported || !this.files || this.files.length == 0)
					return true;	// continue to next input element

				for (var i = 0; i < this.files.length; i++)
				{
					queue.push({
						file: this.files[i],
						inputElem: this,
						instanceConfig: $.extend({}, config)
					});
				}
			});

			parseNextFile();	// begin parsing
			return this;		// maintains chainability


			function parseNextFile()
			{
				if (queue.length == 0)
				{
					if (isFunction(options.complete))
						options.complete();
					return;
				}

				var f = queue[0];

				if (isFunction(options.before))
				{
					var returned = options.before(f.file, f.inputElem);

					if (typeof returned === 'object')
					{
						if (returned.action == "abort")
						{
							error("AbortError", f.file, f.inputElem, returned.reason);
							return;	// Aborts all queued files immediately
						}
						else if (returned.action == "skip")
						{
							fileComplete();	// parse the next file in the queue, if any
							return;
						}
						else if (typeof returned.config === 'object')
							f.instanceConfig = $.extend(f.instanceConfig, returned.config);
					}
					else if (returned == "skip")
					{
						fileComplete();	// parse the next file in the queue, if any
						return;
					}
				}

				// Wrap up the user's complete callback, if any, so that ours also gets executed
				var userCompleteFunc = f.instanceConfig.complete;
				f.instanceConfig.complete = function(results)
				{
					if (isFunction(userCompleteFunc))
						userCompleteFunc(results, f.file, f.inputElem);
					fileComplete();
				};

				Papa.parse(f.file, f.instanceConfig);
			}

			function error(name, file, elem, reason)
			{
				if (isFunction(options.error))
					options.error({name: name}, file, elem, reason);
			}

			function fileComplete()
			{
				queue.splice(0, 1);
				parseNextFile();
			}
		}
	}


	if (IS_WORKER)
	{
		global.onmessage = workerThreadReceivedMessage;
	}
	else if (Papa.WORKERS_SUPPORTED)
	{
		AUTO_SCRIPT_PATH = getScriptPath();

		// Check if the script was loaded synchronously
		if (!document.body)
		{
			// Body doesn't exist yet, must be synchronous
			LOADED_SYNC = true;
		}
		else
		{
			document.addEventListener('DOMContentLoaded', function () {
				LOADED_SYNC = true;
			}, true);
		}
	}




	function CsvToJson(_input, _config)
	{
		_config = _config || {};

		if (_config.worker && Papa.WORKERS_SUPPORTED)
		{
			var w = newWorker();

			w.userStep = _config.step;
			w.userChunk = _config.chunk;
			w.userComplete = _config.complete;
			w.userError = _config.error;

			_config.step = isFunction(_config.step);
			_config.chunk = isFunction(_config.chunk);
			_config.complete = isFunction(_config.complete);
			_config.error = isFunction(_config.error);
			delete _config.worker;	// prevent infinite loop

			w.postMessage({
				input: _input,
				config: _config,
				workerId: w.id
			});

			return;
		}

		var streamer = null;
		if (typeof _input === 'string')
		{
			if (_config.download)
				streamer = new NetworkStreamer(_config);
			else
				streamer = new StringStreamer(_config);
		}
		else if ((global.File && _input instanceof File) || _input instanceof Object)	// ...Safari. (see issue #106)
			streamer = new FileStreamer(_config);

		return streamer.stream(_input);
	}






	function JsonToCsv(_input, _config)
	{
		var _output = "";
		var _fields = [];

		// Default configuration
		var _quotes = false;	// whether to surround every datum with quotes
		var _delimiter = ",";	// delimiting character
		var _newline = "\r\n";	// newline character(s)

		unpackConfig();

		if (typeof _input === 'string')
			_input = JSON.parse(_input);

		if (_input instanceof Array)
		{
			if (!_input.length || _input[0] instanceof Array)
				return serialize(null, _input);
			else if (typeof _input[0] === 'object')
				return serialize(objectKeys(_input[0]), _input);
		}
		else if (typeof _input === 'object')
		{
			if (typeof _input.data === 'string')
				_input.data = JSON.parse(_input.data);

			if (_input.data instanceof Array)
			{
				if (!_input.fields)
					_input.fields = _input.data[0] instanceof Array
									? _input.fields
									: objectKeys(_input.data[0]);

				if (!(_input.data[0] instanceof Array) && typeof _input.data[0] !== 'object')
					_input.data = [_input.data];	// handles input like [1,2,3] or ["asdf"]
			}

			return serialize(_input.fields || [], _input.data || []);
		}

		// Default (any valid paths should return before this)
		throw "exception: Unable to serialize unrecognized input";


		function unpackConfig()
		{
			if (typeof _config !== 'object')
				return;

			if (typeof _config.delimiter === 'string'
				&& _config.delimiter.length == 1
				&& global.Papa.BAD_DELIMITERS.indexOf(_config.delimiter) == -1)
			{
				_delimiter = _config.delimiter;
			}

			if (typeof _config.quotes === 'boolean'
				|| _config.quotes instanceof Array)
				_quotes = _config.quotes;

			if (typeof _config.newline === 'string')
				_newline = _config.newline;
		}


		// Turns an object's keys into an array
		function objectKeys(obj)
		{
			if (typeof obj !== 'object')
				return [];
			var keys = [];
			for (var key in obj)
				keys.push(key);
			return keys;
		}

		// The double for loop that iterates the data and writes out a CSV string including header row
		function serialize(fields, data)
		{
			var csv = "";

			if (typeof fields === 'string')
				fields = JSON.parse(fields);
			if (typeof data === 'string')
				data = JSON.parse(data);

			var hasHeader = fields instanceof Array && fields.length > 0;
			var dataKeyedByField = !(data[0] instanceof Array);

			// If there a header row, write it first
			if (hasHeader)
			{
				for (var i = 0; i < fields.length; i++)
				{
					if (i > 0)
						csv += _delimiter;
					csv += safe(fields[i], i);
				}
				if (data.length > 0)
					csv += _newline;
			}

			// Then write out the data
			for (var row = 0; row < data.length; row++)
			{
				var maxCol = hasHeader ? fields.length : data[row].length;

				for (var col = 0; col < maxCol; col++)
				{
					if (col > 0)
						csv += _delimiter;
					var colIdx = hasHeader && dataKeyedByField ? fields[col] : col;
					csv += safe(data[row][colIdx], col);
				}

				if (row < data.length - 1)
					csv += _newline;
			}

			return csv;
		}

		// Encloses a value around quotes if needed (makes a value safe for CSV insertion)
		function safe(str, col)
		{
			if (typeof str === "undefined" || str === null)
				return "";

			str = str.toString().replace(/"/g, '""');

			var needsQuotes = (typeof _quotes === 'boolean' && _quotes)
							|| (_quotes instanceof Array && _quotes[col])
							|| hasAny(str, global.Papa.BAD_DELIMITERS)
							|| str.indexOf(_delimiter) > -1
							|| str.charAt(0) == ' '
							|| str.charAt(str.length - 1) == ' ';

			return needsQuotes ? '"' + str + '"' : str;
		}

		function hasAny(str, substrings)
		{
			for (var i = 0; i < substrings.length; i++)
				if (str.indexOf(substrings[i]) > -1)
					return true;
			return false;
		}
	}

	// ChunkStreamer is the base prototype for various streamer implementations.
	function ChunkStreamer(config)
	{
		this._handle = null;
		this._paused = false;
		this._finished = false;
		this._input = null;
		this._baseIndex = 0;
		this._partialLine = "";
		this._rowCount = 0;
		this._start = 0;
		this._nextChunk = null;
		replaceConfig.call(this, config);

		this.parseChunk = function(chunk)
		{
			// Rejoin the line we likely just split in two by chunking the file
			var aggregate = this._partialLine + chunk;
			this._partialLine = "";

			var results = this._handle.parse(aggregate, this._baseIndex, !this._finished);
			
			if (this._handle.paused())
				return;
			
			var lastIndex = results.meta.cursor;
			
			if (!this._finished)
			{
				this._partialLine = aggregate.substring(lastIndex - this._baseIndex);
				this._baseIndex = lastIndex;
			}

			if (results && results.data)
				this._rowCount += results.data.length;

			var finishedIncludingPreview = this._finished || (this._config.preview && this._rowCount >= this._config.preview);

			if (IS_WORKER)
			{
				global.postMessage({
					results: results,
					workerId: Papa.WORKER_ID,
					finished: finishedIncludingPreview
				});
			}
			else if (isFunction(this._config.chunk))
			{
				this._config.chunk(results, this._handle);
				if (this._paused)
					return;
				results = undefined;
			}

			if (finishedIncludingPreview && isFunction(this._config.complete) && (!results || !results.meta.aborted))
				this._config.complete(results);
			
			if (!finishedIncludingPreview && (!results || !results.meta.paused))
				this._nextChunk();

			return results;
		};

		this._sendError = function(error)
		{
			if (isFunction(this._config.error))
				this._config.error(error);
			else if (IS_WORKER && this._config.error)
			{
				global.postMessage({
					workerId: Papa.WORKER_ID,
					error: error,
					finished: false
				});
			}
		};

		function replaceConfig(config)
		{
			// Deep-copy the config so we can edit it
			var configCopy = copy(config);
			configCopy.chunkSize = parseInt(configCopy.chunkSize);	// VERY important so we don't concatenate strings!
			this._handle = new ParserHandle(configCopy);
			this._handle.streamer = this;
			this._config = configCopy;	// persist the copy to the caller
		}
	}


	function NetworkStreamer(config)
	{
		config = config || {};
		if (!config.chunkSize)
			config.chunkSize = Papa.RemoteChunkSize;
		ChunkStreamer.call(this, config);

		var xhr;

		if (IS_WORKER)
		{
			this._nextChunk = function()
			{
				this._readChunk();
				this._chunkLoaded();
			};
		}
		else
		{
			this._nextChunk = function()
			{
				this._readChunk();
			};
		}

		this.stream = function(url)
		{
			this._input = url;
			this._nextChunk();	// Starts streaming
		};

		this._readChunk = function()
		{
			if (this._finished)
			{
				this._chunkLoaded();
				return;
			}

			xhr = new XMLHttpRequest();
			
			if (!IS_WORKER)
			{
				xhr.onload = bindFunction(this._chunkLoaded, this);
				xhr.onerror = bindFunction(this._chunkError, this);
			}

			xhr.open("GET", this._input, !IS_WORKER);
			
			if (this._config.step || this._config.chunk)
			{
				var end = this._start + this._config.chunkSize - 1;	// minus one because byte range is inclusive
				xhr.setRequestHeader("Range", "bytes="+this._start+"-"+end);
				xhr.setRequestHeader("If-None-Match", "webkit-no-cache"); // https://bugs.webkit.org/show_bug.cgi?id=82672
			}

			try {
				xhr.send();
			}
			catch (err) {
				this._chunkError(err.message);
			}

			if (IS_WORKER && xhr.status == 0)
				this._chunkError();
			else
				this._start += this._config.chunkSize;
		}

		this._chunkLoaded = function()
		{
			if (xhr.readyState != 4)
				return;

			if (xhr.status < 200 || xhr.status >= 400)
			{
				this._chunkError();
				return;
			}

			this._finished = (!this._config.step && !this._config.chunk) || this._start > getFileSize(xhr);
			this.parseChunk(xhr.responseText);
		}

		this._chunkError = function(errorMessage)
		{
			var errorText = xhr.statusText || errorMessage;
			this._sendError(errorText);
		}

		function getFileSize(xhr)
		{
			var contentRange = xhr.getResponseHeader("Content-Range");
			return parseInt(contentRange.substr(contentRange.lastIndexOf("/") + 1));
		}
	}
	NetworkStreamer.prototype = Object.create(ChunkStreamer.prototype);
	NetworkStreamer.prototype.constructor = NetworkStreamer;


	function FileStreamer(config)
	{
		config = config || {};
		if (!config.chunkSize)
			config.chunkSize = Papa.LocalChunkSize;
		ChunkStreamer.call(this, config);

		var reader, slice;

		// FileReader is better than FileReaderSync (even in worker) - see http://stackoverflow.com/q/24708649/1048862
		// But Firefox is a pill, too - see issue #76: https://github.com/mholt/PapaParse/issues/76
		var usingAsyncReader = typeof FileReader !== 'undefined';	// Safari doesn't consider it a function - see issue #105

		this.stream = function(file)
		{
			this._input = file;
			slice = file.slice || file.webkitSlice || file.mozSlice;

			if (usingAsyncReader)
			{
				reader = new FileReader();		// Preferred method of reading files, even in workers
				reader.onload = bindFunction(this._chunkLoaded, this);
				reader.onerror = bindFunction(this._chunkError, this);
			}
			else
				reader = new FileReaderSync();	// Hack for running in a web worker in Firefox

			this._nextChunk();	// Starts streaming
		};

		this._nextChunk = function()
		{
			if (!this._finished && (!this._config.preview || this._rowCount < this._config.preview))
				this._readChunk();
		}

		this._readChunk = function()
		{
			var end = Math.min(this._start + this._config.chunkSize, this._input.size);
			var txt = reader.readAsText(slice.call(this._input, this._start, end), this._config.encoding);
			if (!usingAsyncReader)
				this._chunkLoaded({ target: { result: txt } });	// mimic the async signature
		}

		this._chunkLoaded = function(event)
		{
			// Very important to increment start each time before handling results
			this._start += this._config.chunkSize;
			this._finished = this._start >= this._input.size;
			this.parseChunk(event.target.result);
		}

		this._chunkError = function()
		{
			this._sendError(reader.error);
		}

	}
	FileStreamer.prototype = Object.create(ChunkStreamer.prototype);
	FileStreamer.prototype.constructor = FileStreamer;


	function StringStreamer(config)
	{
		config = config || {};
		ChunkStreamer.call(this, config);

		var string;
		var remaining;
		this.stream = function(s)
		{
			string = s;
			remaining = s;
			return this._nextChunk();
		}
		this._nextChunk = function()
		{
			if (this._finished) return;
			var size = this._config.chunkSize;
			var chunk = size ? remaining.substr(0, size) : remaining;
			remaining = size ? remaining.substr(size) : '';
			this._finished = !remaining;
			return this.parseChunk(chunk);
		}
	}
	StringStreamer.prototype = Object.create(StringStreamer.prototype);
	StringStreamer.prototype.constructor = StringStreamer;



	// Use one ParserHandle per entire CSV file or string
	function ParserHandle(_config)
	{
		// One goal is to minimize the use of regular expressions...
		var FLOAT = /^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i;

		var self = this;
		var _stepCounter = 0;	// Number of times step was called (number of rows parsed)
		var _input;				// The input being parsed
		var _parser;			// The core parser being used
		var _paused = false;	// Whether we are paused or not
		var _delimiterError;	// Temporary state between delimiter detection and processing results
		var _fields = [];		// Fields are from the header row of the input, if there is one
		var _results = {		// The last results returned from the parser
			data: [],
			errors: [],
			meta: {}
		};

		if (isFunction(_config.step))
		{
			var userStep = _config.step;
			_config.step = function(results)
			{
				_results = results;

				if (needsHeaderRow())
					processResults();
				else	// only call user's step function after header row
				{
					processResults();

					// It's possbile that this line was empty and there's no row here after all
					if (_results.data.length == 0)
						return;

					_stepCounter += results.data.length;
					if (_config.preview && _stepCounter > _config.preview)
						_parser.abort();
					else
						userStep(_results, self);
				}
			};
		}

		// Parses input. Most users won't need, and shouldn't mess with, the baseIndex
		// and ignoreLastRow parameters. They are used by streamers (wrapper functions)
		// when an input comes in multiple chunks, like from a file.
		this.parse = function(input, baseIndex, ignoreLastRow)
		{
			if (!_config.newline)
				_config.newline = guessLineEndings(input);

			_delimiterError = false;
			if (!_config.delimiter)
			{
				var delimGuess = guessDelimiter(input);
				if (delimGuess.successful)
					_config.delimiter = delimGuess.bestDelimiter;
				else
				{
					_delimiterError = true;	// add error after parsing (otherwise it would be overwritten)
					_config.delimiter = Papa.DefaultDelimiter;
				}
				_results.meta.delimiter = _config.delimiter;
			}

			var parserConfig = copy(_config);
			if (_config.preview && _config.header)
				parserConfig.preview++;	// to compensate for header row

			_input = input;
			_parser = new Parser(parserConfig);
			_results = _parser.parse(_input, baseIndex, ignoreLastRow);
			processResults();
			return _paused ? { meta: { paused: true } } : (_results || { meta: { paused: false } });
		};

		this.paused = function()
		{
			return _paused;
		};

		this.pause = function()
		{
			_paused = true;
			_parser.abort();
			_input = _input.substr(_parser.getCharIndex());
		};

		this.resume = function()
		{
			_paused = false;
			self.streamer.parseChunk(_input);
		};

		this.abort = function()
		{
			_parser.abort();
			if (isFunction(_config.complete))
				_config.complete(_results);
			_input = "";
		};

		function processResults()
		{
			if (_results && _delimiterError)
			{
				addError("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '"+Papa.DefaultDelimiter+"'");
				_delimiterError = false;
			}

			if (_config.skipEmptyLines)
			{
				for (var i = 0; i < _results.data.length; i++)
					if (_results.data[i].length == 1 && _results.data[i][0] == "")
						_results.data.splice(i--, 1);
			}

			if (needsHeaderRow())
				fillHeaderFields();

			return applyHeaderAndDynamicTyping();
		}

		function needsHeaderRow()
		{
			return _config.header && _fields.length == 0;
		}

		function fillHeaderFields()
		{
			if (!_results)
				return;
			for (var i = 0; needsHeaderRow() && i < _results.data.length; i++)
				for (var j = 0; j < _results.data[i].length; j++)
					_fields.push(_results.data[i][j]);
			_results.data.splice(0, 1);
		}

		function applyHeaderAndDynamicTyping()
		{
			if (!_results || (!_config.header && !_config.dynamicTyping))
				return _results;

			for (var i = 0; i < _results.data.length; i++)
			{
				var row = {};

				for (var j = 0; j < _results.data[i].length; j++)
				{
					if (_config.dynamicTyping)
					{
						var value = _results.data[i][j];
						if (value == "true")
							_results.data[i][j] = true;
						else if (value == "false")
							_results.data[i][j] = false;
						else
							_results.data[i][j] = tryParseFloat(value);
					}

					if (_config.header)
					{
						if (j >= _fields.length)
						{
							if (!row["__parsed_extra"])
								row["__parsed_extra"] = [];
							row["__parsed_extra"].push(_results.data[i][j]);
						}
						else
							row[_fields[j]] = _results.data[i][j];
					}
				}

				if (_config.header)
				{
					_results.data[i] = row;
					if (j > _fields.length)
						addError("FieldMismatch", "TooManyFields", "Too many fields: expected " + _fields.length + " fields but parsed " + j, i);
					else if (j < _fields.length)
						addError("FieldMismatch", "TooFewFields", "Too few fields: expected " + _fields.length + " fields but parsed " + j, i);
				}
			}

			if (_config.header && _results.meta)
				_results.meta.fields = _fields;
			return _results;
		}

		function guessDelimiter(input)
		{
			var delimChoices = [",", "\t", "|", ";", Papa.RECORD_SEP, Papa.UNIT_SEP];
			var bestDelim, bestDelta, fieldCountPrevRow;

			for (var i = 0; i < delimChoices.length; i++)
			{
				var delim = delimChoices[i];
				var delta = 0, avgFieldCount = 0;
				fieldCountPrevRow = undefined;

				var preview = new Parser({
					delimiter: delim,
					preview: 10
				}).parse(input);

				for (var j = 0; j < preview.data.length; j++)
				{
					var fieldCount = preview.data[j].length;
					avgFieldCount += fieldCount;

					if (typeof fieldCountPrevRow === 'undefined')
					{
						fieldCountPrevRow = fieldCount;
						continue;
					}
					else if (fieldCount > 1)
					{
						delta += Math.abs(fieldCount - fieldCountPrevRow);
						fieldCountPrevRow = fieldCount;
					}
				}

				avgFieldCount /= preview.data.length;

				if ((typeof bestDelta === 'undefined' || delta < bestDelta)
					&& avgFieldCount > 1.99)
				{
					bestDelta = delta;
					bestDelim = delim;
				}
			}

			_config.delimiter = bestDelim;

			return {
				successful: !!bestDelim,
				bestDelimiter: bestDelim
			}
		}

		function guessLineEndings(input)
		{
			input = input.substr(0, 1024*1024);	// max length 1 MB

			var r = input.split('\r');

			if (r.length == 1)
				return '\n';

			var numWithN = 0;
			for (var i = 0; i < r.length; i++)
			{
				if (r[i][0] == '\n')
					numWithN++;
			}

			return numWithN >= r.length / 2 ? '\r\n' : '\r';
		}

		function tryParseFloat(val)
		{
			var isNumber = FLOAT.test(val);
			return isNumber ? parseFloat(val) : val;
		}

		function addError(type, code, msg, row)
		{
			_results.errors.push({
				type: type,
				code: code,
				message: msg,
				row: row
			});
		}
	}





	// The core parser implements speedy and correct CSV parsing
	function Parser(config)
	{
		// Unpack the config object
		config = config || {};
		var delim = config.delimiter;
		var newline = config.newline;
		var comments = config.comments;
		var step = config.step;
		var preview = config.preview;
		var fastMode = config.fastMode;

		// Delimiter must be valid
		if (typeof delim !== 'string'
			|| delim.length != 1
			|| Papa.BAD_DELIMITERS.indexOf(delim) > -1)
			delim = ",";

		// Comment character must be valid
		if (comments === delim)
			throw "Comment character same as delimiter";
		else if (comments === true)
			comments = "#";
		else if (typeof comments !== 'string'
			|| Papa.BAD_DELIMITERS.indexOf(comments) > -1)
			comments = false;

		// Newline must be valid: \r, \n, or \r\n
		if (newline != '\n' && newline != '\r' && newline != '\r\n')
			newline = '\n';

		// We're gonna need these at the Parser scope
		var cursor = 0;
		var aborted = false;

		this.parse = function(input, baseIndex, ignoreLastRow)
		{
			// For some reason, in Chrome, this speeds things up (!?)
			if (typeof input !== 'string')
				throw "Input must be a string";

			// We don't need to compute some of these every time parse() is called,
			// but having them in a more local scope seems to perform better
			var inputLen = input.length,
				delimLen = delim.length,
				newlineLen = newline.length,
				commentsLen = comments.length;
			var stepIsFunction = typeof step === 'function';

			// Establish starting state
			cursor = 0;
			var data = [], errors = [], row = [], lastCursor = 0;

			if (!input)
				return returnable();

			if (fastMode || (fastMode !== false && input.indexOf('"') === -1))
			{
				var rows = input.split(newline);
				for (var i = 0; i < rows.length; i++)
				{
					var row = rows[i];
					cursor += row.length;
					if (i !== rows.length - 1)
						cursor += newline.length;
					else if (ignoreLastRow)
						return returnable();
					if (comments && row.substr(0, commentsLen) == comments)
						continue;
					if (stepIsFunction)
					{
						data = [];
						pushRow(row.split(delim));
						doStep();
						if (aborted)
							return returnable();
					}
					else
						pushRow(row.split(delim));
					if (preview && i >= preview)
					{
						data = data.slice(0, preview);
						return returnable(true);
					}
				}
				return returnable();
			}

			var nextDelim = input.indexOf(delim, cursor);
			var nextNewline = input.indexOf(newline, cursor);

			// Parser loop
			for (;;)
			{
				// Field has opening quote
				if (input[cursor] == '"')
				{
					// Start our search for the closing quote where the cursor is
					var quoteSearch = cursor;

					// Skip the opening quote
					cursor++;

					for (;;)
					{
						// Find closing quote
						var quoteSearch = input.indexOf('"', quoteSearch+1);

						if (quoteSearch === -1)
						{
							if (!ignoreLastRow) {
								// No closing quote... what a pity
								errors.push({
									type: "Quotes",
									code: "MissingQuotes",
									message: "Quoted field unterminated",
									row: data.length,	// row has yet to be inserted
									index: cursor
								});
							}
							return finish();
						}

						if (quoteSearch === inputLen-1)
						{
							// Closing quote at EOF
							var value = input.substring(cursor, quoteSearch).replace(/""/g, '"');
							return finish(value);
						}

						// If this quote is escaped, it's part of the data; skip it
						if (input[quoteSearch+1] == '"')
						{
							quoteSearch++;
							continue;
						}

						if (input[quoteSearch+1] == delim)
						{
							// Closing quote followed by delimiter
							row.push(input.substring(cursor, quoteSearch).replace(/""/g, '"'));
							cursor = quoteSearch + 1 + delimLen;
							nextDelim = input.indexOf(delim, cursor);
							nextNewline = input.indexOf(newline, cursor);
							break;
						}

						if (input.substr(quoteSearch+1, newlineLen) === newline)
						{
							// Closing quote followed by newline
							row.push(input.substring(cursor, quoteSearch).replace(/""/g, '"'));
							saveRow(quoteSearch + 1 + newlineLen);
							nextDelim = input.indexOf(delim, cursor);	// because we may have skipped the nextDelim in the quoted field

							if (stepIsFunction)
							{
								doStep();
								if (aborted)
									return returnable();
							}
							
							if (preview && data.length >= preview)
								return returnable(true);

							break;
						}
					}

					continue;
				}

				// Comment found at start of new line
				if (comments && row.length === 0 && input.substr(cursor, commentsLen) === comments)
				{
					if (nextNewline == -1)	// Comment ends at EOF
						return returnable();
					cursor = nextNewline + newlineLen;
					nextNewline = input.indexOf(newline, cursor);
					nextDelim = input.indexOf(delim, cursor);
					continue;
				}

				// Next delimiter comes before next newline, so we've reached end of field
				if (nextDelim !== -1 && (nextDelim < nextNewline || nextNewline === -1))
				{
					row.push(input.substring(cursor, nextDelim));
					cursor = nextDelim + delimLen;
					nextDelim = input.indexOf(delim, cursor);
					continue;
				}

				// End of row
				if (nextNewline !== -1)
				{
					row.push(input.substring(cursor, nextNewline));
					saveRow(nextNewline + newlineLen);

					if (stepIsFunction)
					{
						doStep();
						if (aborted)
							return returnable();
					}

					if (preview && data.length >= preview)
						return returnable(true);

					continue;
				}

				break;
			}


			return finish();


			function pushRow(row)
			{
				data.push(row);
				lastCursor = cursor;
			}

			// Appends the remaining input from cursor to the end into
			// row, saves the row, calls step, and returns the results.
			function finish(value)
			{
				if (ignoreLastRow)
					return returnable();
				if (!value)
					value = input.substr(cursor);
				row.push(value);
				cursor = inputLen;	// important in case parsing is paused
				pushRow(row);
				if (stepIsFunction)
					doStep();
				return returnable();
			}

			// Appends the current row to the results. It sets the cursor
			// to newCursor and finds the nextNewline. The caller should
			// take care to execute user's step function and check for
			// preview and end parsing if necessary.
			function saveRow(newCursor)
			{
				cursor = newCursor;
				pushRow(row);
				row = [];
				nextNewline = input.indexOf(newline, cursor);
			}

			// Returns an object with the results, errors, and meta.
			function returnable(stopped)
			{
				return {
					data: data,
					errors: errors,
					meta: {
						delimiter: delim,
						linebreak: newline,
						aborted: aborted,
						truncated: !!stopped,
						cursor: lastCursor + (baseIndex || 0)
					}
				};
			}

			// Executes the user's step function and resets data & errors.
			function doStep()
			{
				step(returnable());
				data = [], errors = [];
			}
		};

		// Sets the abort flag
		this.abort = function()
		{
			aborted = true;
		};

		// Gets the cursor position
		this.getCharIndex = function()
		{
			return cursor;
		};
	}


	// If you need to load Papa Parse asynchronously and you also need worker threads, hard-code
	// the script path here. See: https://github.com/mholt/PapaParse/issues/87#issuecomment-57885358
	function getScriptPath()
	{
		var scripts = document.getElementsByTagName('script');
		return scripts.length ? scripts[scripts.length - 1].src : '';
	}

	function newWorker()
	{
		if (!Papa.WORKERS_SUPPORTED)
			return false;
		if (!LOADED_SYNC && Papa.SCRIPT_PATH === null)
			throw new Error(
				'Script path cannot be determined automatically when Papa Parse is loaded asynchronously. ' +
				'You need to set Papa.SCRIPT_PATH manually.'
			);
		var w = new global.Worker(Papa.SCRIPT_PATH || AUTO_SCRIPT_PATH);
		w.onmessage = mainThreadReceivedMessage;
		w.id = workerIdCounter++;
		workers[w.id] = w;
		return w;
	}

	// Callback when main thread receives a message
	function mainThreadReceivedMessage(e)
	{
		var msg = e.data;
		var worker = workers[msg.workerId];
		var aborted = false;

		if (msg.error)
			worker.userError(msg.error, msg.file);
		else if (msg.results && msg.results.data)
		{
			var abort = function() {
				aborted = true;
				completeWorker(msg.workerId, { data: [], errors: [], meta: { aborted: true } });
			};

			var handle = {
				abort: abort,
				pause: notImplemented,
				resume: notImplemented
			};

			if (isFunction(worker.userStep))
			{
				for (var i = 0; i < msg.results.data.length; i++)
				{
					worker.userStep({
						data: [msg.results.data[i]],
						errors: msg.results.errors,
						meta: msg.results.meta
					}, handle);
					if (aborted)
						break;
				}
				delete msg.results;	// free memory ASAP
			}
			else if (isFunction(worker.userChunk))
			{
				worker.userChunk(msg.results, handle, msg.file);
				delete msg.results;
			}
		}

		if (msg.finished && !aborted)
			completeWorker(msg.workerId, msg.results);
	}

	function completeWorker(workerId, results) {
		var worker = workers[workerId];
		if (isFunction(worker.userComplete))
			worker.userComplete(results);
		worker.terminate();
		delete workers[workerId];
	}

	function notImplemented() {
		throw "Not implemented.";
	}

	// Callback when worker thread receives a message
	function workerThreadReceivedMessage(e)
	{
		var msg = e.data;

		if (typeof Papa.WORKER_ID === 'undefined' && msg)
			Papa.WORKER_ID = msg.workerId;

		if (typeof msg.input === 'string')
		{
			global.postMessage({
				workerId: Papa.WORKER_ID,
				results: Papa.parse(msg.input, msg.config),
				finished: true
			});
		}
		else if ((global.File && msg.input instanceof File) || msg.input instanceof Object)	// thank you, Safari (see issue #106)
		{
			var results = Papa.parse(msg.input, msg.config);
			if (results)
				global.postMessage({
					workerId: Papa.WORKER_ID,
					results: results,
					finished: true
				});
		}
	}

	// Makes a deep copy of an array or object (mostly)
	function copy(obj)
	{
		if (typeof obj !== 'object')
			return obj;
		var cpy = obj instanceof Array ? [] : {};
		for (var key in obj)
			cpy[key] = copy(obj[key]);
		return cpy;
	}

	function bindFunction(f, self)
	{
		return function() {
			f.apply(self, arguments);
		}
	}

	function isFunction(func)
	{
		return typeof func === 'function';
	}
})(this);/**
 * Autofill event polyfill ##version:1.0.0##
 * (c) 2014 Google, Inc.
 * License: MIT
 */
(function(window) {
  var $ = window.jQuery || window.angular.element;
  var rootElement = window.document.documentElement,
    $rootElement = $(rootElement);

  addGlobalEventListener('change', markValue);
  addValueChangeByJsListener(markValue);

  $.prototype.checkAndTriggerAutoFillEvent = jqCheckAndTriggerAutoFillEvent;

  // Need to use blur and not change event
  // as Chrome does not fire change events in all cases an input is changed
  // (e.g. when starting to type and then finish the input by auto filling a username)
  addGlobalEventListener('blur', function(target) {
    // setTimeout needed for Chrome as it fills other
    // form fields a little later...
    window.setTimeout(function() {
      findParentForm(target).find('input').checkAndTriggerAutoFillEvent();
    }, 20);
  });

  function DOMContentLoadedListener() {
    // mark all values that are present when the DOM is ready.
    // We don't need to trigger a change event here,
    // as js libs start with those values already being set!
    forEach(document.getElementsByTagName('input'), markValue);

    // The timeout is needed for Chrome as it auto fills
    // login forms some time after DOMContentLoaded!
    window.setTimeout(function() {
      $rootElement.find('input').checkAndTriggerAutoFillEvent();
    }, 200);
  }

  // IE8 compatibility issue
  if(!window.document.addEventListener){
    window.document.attachEvent('DOMContentLoaded', DOMContentLoadedListener);    
  }else{
    window.document.addEventListener('DOMContentLoaded', DOMContentLoadedListener, false);
  }

  return;

  // ----------

  function jqCheckAndTriggerAutoFillEvent() {
    var i, el;
    for (i=0; i<this.length; i++) {
      el = this[i];
      if (!valueMarked(el)) {
        markValue(el);
        triggerChangeEvent(el);
      }
    }
  }

  function valueMarked(el) {
    if (! ("$$currentValue" in el) ) {
      // First time we see an element we take it's value attribute
      // as real value. This might have been filled in the backend,
      // ...
      // Note: it's important to not use the value property here!
      el.$$currentValue = el.getAttribute('value');
    }

    var val = el.value,
         $$currentValue = el.$$currentValue;
    if (!val && !$$currentValue) {
      return true;
    }
    return val === $$currentValue;
  }

  function markValue(el) {
    el.$$currentValue = el.value;
  }

  function addValueChangeByJsListener(listener) {
    var jq = window.jQuery || window.angular.element,
        jqProto = jq.prototype;
    var _val = jqProto.val;
    jqProto.val = function(newValue) {
      var res = _val.apply(this, arguments);
      if (arguments.length > 0) {
        forEach(this, function(el) {
          listener(el, newValue);
        });
      }
      return res;
    };
  }

  function addGlobalEventListener(eventName, listener) {
    // Use a capturing event listener so that
    // we also get the event when it's stopped!
    // Also, the blur event does not bubble.
    if(!rootElement.addEventListener){
      rootElement.attachEvent(eventName, onEvent);      
    }else{
      rootElement.addEventListener(eventName, onEvent, true);
    }

    function onEvent(event) {
      var target = event.target;
      listener(target);
    }
  }

  function findParentForm(el) {
    while (el) {
      if (el.nodeName === 'FORM') {
        return $(el);
      }
      el = el.parentNode;
    }
    return $();
  }

  function forEach(arr, listener) {
    if (arr.forEach) {
      return arr.forEach(listener);
    }
    var i;
    for (i=0; i<arr.length; i++) {
      listener(arr[i]);
    }
  }

  function triggerChangeEvent(element) {
    var doc = window.document;
    var event = doc.createEvent("HTMLEvents");
    event.initEvent("change", true, true);
    element.dispatchEvent(event);
  }



})(window);(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    define([], function () {
      return (root['Chartist'] = factory());
    });
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    root['Chartist'] = factory();
  }
}(this, function () {

/* Chartist.js 0.8.0
 * Copyright © 2015 Gion Kunz
 * Free to use under the WTFPL license.
 * http://www.wtfpl.net/
 */
/**
 * The core module of Chartist that is mainly providing static functions and higher level functions for chart modules.
 *
 * @module Chartist.Core
 */
var Chartist = {
  version: '0.8.0'
};

(function (window, document, Chartist) {
  'use strict';

  /**
   * Helps to simplify functional style code
   *
   * @memberof Chartist.Core
   * @param {*} n This exact value will be returned by the noop function
   * @return {*} The same value that was provided to the n parameter
   */
  Chartist.noop = function (n) {
    return n;
  };

  /**
   * Generates a-z from a number 0 to 26
   *
   * @memberof Chartist.Core
   * @param {Number} n A number from 0 to 26 that will result in a letter a-z
   * @return {String} A character from a-z based on the input number n
   */
  Chartist.alphaNumerate = function (n) {
    // Limit to a-z
    return String.fromCharCode(97 + n % 26);
  };

  /**
   * Simple recursive object extend
   *
   * @memberof Chartist.Core
   * @param {Object} target Target object where the source will be merged into
   * @param {Object...} sources This object (objects) will be merged into target and then target is returned
   * @return {Object} An object that has the same reference as target but is extended and merged with the properties of source
   */
  Chartist.extend = function (target) {
    target = target || {};

    var sources = Array.prototype.slice.call(arguments, 1);
    sources.forEach(function(source) {
      for (var prop in source) {
        if (typeof source[prop] === 'object' && source[prop] !== null && !(source[prop] instanceof Array)) {
          target[prop] = Chartist.extend({}, target[prop], source[prop]);
        } else {
          target[prop] = source[prop];
        }
      }
    });

    return target;
  };

  /**
   * Replaces all occurrences of subStr in str with newSubStr and returns a new string.
   *
   * @memberof Chartist.Core
   * @param {String} str
   * @param {String} subStr
   * @param {String} newSubStr
   * @return {String}
   */
  Chartist.replaceAll = function(str, subStr, newSubStr) {
    return str.replace(new RegExp(subStr, 'g'), newSubStr);
  };

  /**
   * Converts a string to a number while removing the unit if present. If a number is passed then this will be returned unmodified.
   *
   * @memberof Chartist.Core
   * @param {String|Number} value
   * @return {Number} Returns the string as number or NaN if the passed length could not be converted to pixel
   */
  Chartist.stripUnit = function(value) {
    if(typeof value === 'string') {
      value = value.replace(/[^0-9\+-\.]/g, '');
    }

    return +value;
  };

  /**
   * Converts a number to a string with a unit. If a string is passed then this will be returned unmodified.
   *
   * @memberof Chartist.Core
   * @param {Number} value
   * @param {String} unit
   * @return {String} Returns the passed number value with unit.
   */
  Chartist.ensureUnit = function(value, unit) {
    if(typeof value === 'number') {
      value = value + unit;
    }

    return value;
  };

  /**
   * This is a wrapper around document.querySelector that will return the query if it's already of type Node
   *
   * @memberof Chartist.Core
   * @param {String|Node} query The query to use for selecting a Node or a DOM node that will be returned directly
   * @return {Node}
   */
  Chartist.querySelector = function(query) {
    return query instanceof Node ? query : document.querySelector(query);
  };

  /**
   * Functional style helper to produce array with given length initialized with undefined values
   *
   * @memberof Chartist.Core
   * @param length
   * @return {Array}
   */
  Chartist.times = function(length) {
    return Array.apply(null, new Array(length));
  };

  /**
   * Sum helper to be used in reduce functions
   *
   * @memberof Chartist.Core
   * @param previous
   * @param current
   * @return {*}
   */
  Chartist.sum = function(previous, current) {
    return previous + current;
  };

  /**
   * Map for multi dimensional arrays where their nested arrays will be mapped in serial. The output array will have the length of the largest nested array. The callback function is called with variable arguments where each argument is the nested array value (or undefined if there are no more values).
   *
   * @memberof Chartist.Core
   * @param arr
   * @param cb
   * @return {Array}
   */
  Chartist.serialMap = function(arr, cb) {
    var result = [],
        length = Math.max.apply(null, arr.map(function(e) {
          return e.length;
        }));

    Chartist.times(length).forEach(function(e, index) {
      var args = arr.map(function(e) {
        return e[index];
      });

      result[index] = cb.apply(null, args);
    });

    return result;
  };

  /**
   * This helper function can be used to round values with certain precision level after decimal. This is used to prevent rounding errors near float point precision limit.
   *
   * @memberof Chartist.Core
   * @param {Number} value The value that should be rounded with precision
   * @param {Number} [digits] The number of digits after decimal used to do the rounding
   * @returns {number} Rounded value
   */
  Chartist.roundWithPrecision = function(value, digits) {
    var precision = Math.pow(10, digits || Chartist.precision);
    return Math.round(value * precision) / precision;
  };

  /**
   * Precision level used internally in Chartist for rounding. If you require more decimal places you can increase this number.
   *
   * @memberof Chartist.Core
   * @type {number}
   */
  Chartist.precision = 8;

  /**
   * A map with characters to escape for strings to be safely used as attribute values.
   *
   * @memberof Chartist.Core
   * @type {Object}
   */
  Chartist.escapingMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&#039;'
  };

  /**
   * This function serializes arbitrary data to a string. In case of data that can't be easily converted to a string, this function will create a wrapper object and serialize the data using JSON.stringify. The outcoming string will always be escaped using Chartist.escapingMap.
   * If called with null or undefined the function will return immediately with null or undefined.
   *
   * @memberof Chartist.Core
   * @param {Number|String|Object} data
   * @return {String}
   */
  Chartist.serialize = function(data) {
    if(data === null || data === undefined) {
      return data;
    } else if(typeof data === 'number') {
      data = ''+data;
    } else if(typeof data === 'object') {
      data = JSON.stringify({data: data});
    }

    return Object.keys(Chartist.escapingMap).reduce(function(result, key) {
      return Chartist.replaceAll(result, key, Chartist.escapingMap[key]);
    }, data);
  };

  /**
   * This function de-serializes a string previously serialized with Chartist.serialize. The string will always be unescaped using Chartist.escapingMap before it's returned. Based on the input value the return type can be Number, String or Object. JSON.parse is used with try / catch to see if the unescaped string can be parsed into an Object and this Object will be returned on success.
   *
   * @memberof Chartist.Core
   * @param {String} data
   * @return {String|Number|Object}
   */
  Chartist.deserialize = function(data) {
    if(typeof data !== 'string') {
      return data;
    }

    data = Object.keys(Chartist.escapingMap).reduce(function(result, key) {
      return Chartist.replaceAll(result, Chartist.escapingMap[key], key);
    }, data);

    try {
      data = JSON.parse(data);
      data = data.data !== undefined ? data.data : data;
    } catch(e) {}

    return data;
  };

  /**
   * Create or reinitialize the SVG element for the chart
   *
   * @memberof Chartist.Core
   * @param {Node} container The containing DOM Node object that will be used to plant the SVG element
   * @param {String} width Set the width of the SVG element. Default is 100%
   * @param {String} height Set the height of the SVG element. Default is 100%
   * @param {String} className Specify a class to be added to the SVG element
   * @return {Object} The created/reinitialized SVG element
   */
  Chartist.createSvg = function (container, width, height, className) {
    var svg;

    width = width || '100%';
    height = height || '100%';
    
    // Check if there is a previous SVG element in the container that contains the Chartist XML namespace and remove it
    // Since the DOM API does not support namespaces we need to manually search the returned list http://www.w3.org/TR/selectors-api/
    Array.prototype.slice.call(container.querySelectorAll('svg')).filter(function filterChartistSvgObjects(svg) {
      return svg.getAttribute(Chartist.xmlNs.qualifiedName);
    }).forEach(function removePreviousElement(svg) {
      container.removeChild(svg);
    });

    // Create svg object with width and height or use 100% as default
    svg = new Chartist.Svg('svg').attr({
      width: width,
      height: height
    }).addClass(className).attr({
      style: 'width: ' + width + '; height: ' + height + ';'
    });

    // Add the DOM node to our container
    container.appendChild(svg._node);

    return svg;
  };


  /**
   * Reverses the series, labels and series data arrays.
   *
   * @memberof Chartist.Core
   * @param data
   */
  Chartist.reverseData = function(data) {
    data.labels.reverse();
    data.series.reverse();
    for (var i = 0; i < data.series.length; i++) {
      if(typeof(data.series[i]) === 'object' && data.series[i].data !== undefined) {
        data.series[i].data.reverse();
      } else if(data.series[i] instanceof Array) {
        data.series[i].reverse();
      }
    }
  };

  /**
   * Convert data series into plain array
   *
   * @memberof Chartist.Core
   * @param {Object} data The series object that contains the data to be visualized in the chart
   * @param {Boolean} reverse If true the whole data is reversed by the getDataArray call. This will modify the data object passed as first parameter. The labels as well as the series order is reversed. The whole series data arrays are reversed too.
   * @return {Array} A plain array that contains the data to be visualized in the chart
   */
  Chartist.getDataArray = function (data, reverse) {
    // If the data should be reversed but isn't we need to reverse it
    // If it's reversed but it shouldn't we need to reverse it back
    // That's required to handle data updates correctly and to reflect the responsive configurations
    if(reverse && !data.reversed || !reverse && data.reversed) {
      Chartist.reverseData(data);
      data.reversed = !data.reversed;
    }

    // Rcursively walks through nested arrays and convert string values to numbers and objects with value properties
    // to values. Check the tests in data core -> data normalization for a detailed specification of expected values
    function recursiveConvert(value) {
      if(value === undefined || value === null || (typeof value === 'number' && isNaN(value))) {
        return undefined;
      } else if((value.data || value) instanceof Array) {
        return (value.data || value).map(recursiveConvert);
      } else if(value.hasOwnProperty('value')) {
        return recursiveConvert(value.value);
      } else {
        return +value;
      }
    }

    return data.series.map(recursiveConvert);
  };

  /**
   * Converts a number into a padding object.
   *
   * @memberof Chartist.Core
   * @param {Object|Number} padding
   * @param {Number} [fallback] This value is used to fill missing values if a incomplete padding object was passed
   * @returns {Object} Returns a padding object containing top, right, bottom, left properties filled with the padding number passed in as argument. If the argument is something else than a number (presumably already a correct padding object) then this argument is directly returned.
   */
  Chartist.normalizePadding = function(padding, fallback) {
    fallback = fallback || 0;

    return typeof padding === 'number' ? {
      top: padding,
      right: padding,
      bottom: padding,
      left: padding
    } : {
      top: typeof padding.top === 'number' ? padding.top : fallback,
      right: typeof padding.right === 'number' ? padding.right : fallback,
      bottom: typeof padding.bottom === 'number' ? padding.bottom : fallback,
      left: typeof padding.left === 'number' ? padding.left : fallback
    };
  };

  /**
   * Adds missing values at the end of the array. This array contains the data, that will be visualized in the chart
   *
   * @memberof Chartist.Core
   * @param {Array} dataArray The array that contains the data to be visualized in the chart. The array in this parameter will be modified by function.
   * @param {Number} length The length of the x-axis data array.
   * @return {Array} The array that got updated with missing values.
   */
  Chartist.normalizeDataArray = function (dataArray, length) {
    for (var i = 0; i < dataArray.length; i++) {
      if (dataArray[i].length === length) {
        continue;
      }

      for (var j = dataArray[i].length; j < length; j++) {
        dataArray[i][j] = undefined;
      }
    }

    return dataArray;
  };

  Chartist.getMetaData = function(series, index) {
    var value = series.data ? series.data[index] : series[index];
    return value ? Chartist.serialize(value.meta) : undefined;
  };

  /**
   * Calculate the order of magnitude for the chart scale
   *
   * @memberof Chartist.Core
   * @param {Number} value The value Range of the chart
   * @return {Number} The order of magnitude
   */
  Chartist.orderOfMagnitude = function (value) {
    return Math.floor(Math.log(Math.abs(value)) / Math.LN10);
  };

  /**
   * Project a data length into screen coordinates (pixels)
   *
   * @memberof Chartist.Core
   * @param {Object} axisLength The svg element for the chart
   * @param {Number} length Single data value from a series array
   * @param {Object} bounds All the values to set the bounds of the chart
   * @return {Number} The projected data length in pixels
   */
  Chartist.projectLength = function (axisLength, length, bounds) {
    return length / bounds.range * axisLength;
  };

  /**
   * Get the height of the area in the chart for the data series
   *
   * @memberof Chartist.Core
   * @param {Object} svg The svg element for the chart
   * @param {Object} options The Object that contains all the optional values for the chart
   * @return {Number} The height of the area in the chart for the data series
   */
  Chartist.getAvailableHeight = function (svg, options) {
    return Math.max((Chartist.stripUnit(options.height) || svg.height()) - (options.chartPadding.top +  options.chartPadding.bottom) - options.axisX.offset, 0);
  };

  /**
   * Get highest and lowest value of data array. This Array contains the data that will be visualized in the chart.
   *
   * @memberof Chartist.Core
   * @param {Array} dataArray The array that contains the data to be visualized in the chart
   * @param {Object} options The Object that contains all the optional values for the chart
   * @return {Object} An object that contains the highest and lowest value that will be visualized on the chart.
   */
  Chartist.getHighLow = function (dataArray, options) {
    var i,
      j,
      highLow = {
        high: options.high === undefined ? -Number.MAX_VALUE : +options.high,
        low: options.low === undefined ? Number.MAX_VALUE : +options.low
      },
      findHigh = options.high === undefined,
      findLow = options.low === undefined;

    for (i = 0; i < dataArray.length; i++) {
      for (j = 0; j < dataArray[i].length; j++) {
        if (findHigh && dataArray[i][j] > highLow.high) {
          highLow.high = dataArray[i][j];
        }

        if (findLow && dataArray[i][j] < highLow.low) {
          highLow.low = dataArray[i][j];
        }
      }
    }

    // If high and low are the same because of misconfiguration or flat data (only the same value) we need
    // to set the high or low to 0 depending on the polarity
    if (highLow.high <= highLow.low) {
      // If both values are 0 we set high to 1
      if (highLow.low === 0) {
        highLow.high = 1;
      } else if (highLow.low < 0) {
        // If we have the same negative value for the bounds we set bounds.high to 0
        highLow.high = 0;
      } else {
        // If we have the same positive value for the bounds we set bounds.low to 0
        highLow.low = 0;
      }
    }

    return highLow;
  };

  /**
   * Pollard Rho Algorithm to find smallest factor of an integer value. There are more efficient algorithms for factorization, but this one is quite efficient and not so complex.
   *
   * @memberof Chartist.Core
   * @param {Number} num An integer number where the smallest factor should be searched for
   * @returns {Number} The smallest integer factor of the parameter num.
   */
  Chartist.rho = function(num) {
    function gcd(p, q) {
      if (p % q === 0) {
        return q;
      } else {
        return gcd(q, p % q);
      }
    }

    function f(x) {
      return x * x + 1;
    }

    var x1 = 2, x2 = 2, divisor;
    if (num % 2 === 0) {
      return 2;
    }

    do {
      x1 = f(x1) % num;
      x2 = f(f(x2)) % num;
      divisor = gcd(Math.abs(x1 - x2), num);
    } while (divisor === 1);

    return divisor;
  };

  /**
   * Calculate and retrieve all the bounds for the chart and return them in one array
   *
   * @memberof Chartist.Core
   * @param {Number} axisLength The length of the Axis used for
   * @param {Object} highLow An object containing a high and low property indicating the value range of the chart.
   * @param {Number} scaleMinSpace The minimum projected length a step should result in
   * @param {Number} referenceValue The reference value for the chart.
   * @param {Boolean} onlyInteger
   * @return {Object} All the values to set the bounds of the chart
   */
  Chartist.getBounds = function (axisLength, highLow, scaleMinSpace, referenceValue, onlyInteger) {
    var i,
      newMin,
      newMax,
      bounds = {
        high: highLow.high,
        low: highLow.low
      };

    // Overrides of high / low based on reference value, it will make sure that the invisible reference value is
    // used to generate the chart. This is useful when the chart always needs to contain the position of the
    // invisible reference value in the view i.e. for bipolar scales.
    if (referenceValue || referenceValue === 0) {
      bounds.high = Math.max(referenceValue, bounds.high);
      bounds.low = Math.min(referenceValue, bounds.low);
    }

    bounds.valueRange = bounds.high - bounds.low;
    bounds.oom = Chartist.orderOfMagnitude(bounds.valueRange);
    bounds.step = Math.pow(10, bounds.oom);
    bounds.min = Math.floor(bounds.low / bounds.step) * bounds.step;
    bounds.max = Math.ceil(bounds.high / bounds.step) * bounds.step;
    bounds.range = bounds.max - bounds.min;
    bounds.numberOfSteps = Math.round(bounds.range / bounds.step);

    // Optimize scale step by checking if subdivision is possible based on horizontalGridMinSpace
    // If we are already below the scaleMinSpace value we will scale up
    var length = Chartist.projectLength(axisLength, bounds.step, bounds);
    var scaleUp = length < scaleMinSpace;
    var smallestFactor = onlyInteger ? Chartist.rho(bounds.range) : 0;

    // First check if we should only use integer steps and if step 1 is still larger than scaleMinSpace so we can use 1
    if(onlyInteger && Chartist.projectLength(axisLength, 1, bounds) >= scaleMinSpace) {
      bounds.step = 1;
    } else if(onlyInteger && smallestFactor < bounds.step && Chartist.projectLength(axisLength, smallestFactor, bounds) >= scaleMinSpace) {
      // If step 1 was too small, we can try the smallest factor of range
      // If the smallest factor is smaller than the current bounds.step and the projected length of smallest factor
      // is larger than the scaleMinSpace we should go for it.
      bounds.step = smallestFactor;
    } else {
      // Trying to divide or multiply by 2 and find the best step value
      while (true) {
        if (scaleUp && Chartist.projectLength(axisLength, bounds.step, bounds) <= scaleMinSpace) {
          bounds.step *= 2;
        } else if (!scaleUp && Chartist.projectLength(axisLength, bounds.step / 2, bounds) >= scaleMinSpace) {
          bounds.step /= 2;
          if(onlyInteger && bounds.step % 1 !== 0) {
            bounds.step *= 2;
            break;
          }
        } else {
          break;
        }
      }
    }

    // Narrow min and max based on new step
    newMin = bounds.min;
    newMax = bounds.max;
    while(newMin + bounds.step <= bounds.low) {
      newMin += bounds.step;
    }
    while(newMax - bounds.step >= bounds.high) {
      newMax -= bounds.step;
    }
    bounds.min = newMin;
    bounds.max = newMax;
    bounds.range = bounds.max - bounds.min;

    bounds.values = [];
    for (i = bounds.min; i <= bounds.max; i += bounds.step) {
      bounds.values.push(Chartist.roundWithPrecision(i));
    }

    return bounds;
  };

  /**
   * Calculate cartesian coordinates of polar coordinates
   *
   * @memberof Chartist.Core
   * @param {Number} centerX X-axis coordinates of center point of circle segment
   * @param {Number} centerY X-axis coordinates of center point of circle segment
   * @param {Number} radius Radius of circle segment
   * @param {Number} angleInDegrees Angle of circle segment in degrees
   * @return {Number} Coordinates of point on circumference
   */
  Chartist.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {
    var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;

    return {
      x: centerX + (radius * Math.cos(angleInRadians)),
      y: centerY + (radius * Math.sin(angleInRadians))
    };
  };

  /**
   * Initialize chart drawing rectangle (area where chart is drawn) x1,y1 = bottom left / x2,y2 = top right
   *
   * @memberof Chartist.Core
   * @param {Object} svg The svg element for the chart
   * @param {Object} options The Object that contains all the optional values for the chart
   * @param {Number} [fallbackPadding] The fallback padding if partial padding objects are used
   * @return {Object} The chart rectangles coordinates inside the svg element plus the rectangles measurements
   */
  Chartist.createChartRect = function (svg, options, fallbackPadding) {
    var hasAxis = !!(options.axisX || options.axisY);
    var yAxisOffset = hasAxis ? options.axisY.offset : 0;
    var xAxisOffset = hasAxis ? options.axisX.offset : 0;
    // If width or height results in invalid value (including 0) we fallback to the unitless settings or even 0
    var width = svg.width() || Chartist.stripUnit(options.width) || 0;
    var height = svg.height() || Chartist.stripUnit(options.height) || 0;
    var normalizedPadding = Chartist.normalizePadding(options.chartPadding, fallbackPadding);

    // If settings were to small to cope with offset (legacy) and padding, we'll adjust
    width = Math.max(width, xAxisOffset + normalizedPadding.left + normalizedPadding.right);
    height = Math.max(height, yAxisOffset + normalizedPadding.top + normalizedPadding.bottom);

    var chartRect = {
      padding: normalizedPadding,
      width: function () {
        return this.x2 - this.x1;
      },
      height: function () {
        return this.y1 - this.y2;
      }
    };

    if(hasAxis) {
      if (options.axisX.position === 'start') {
        chartRect.y2 = normalizedPadding.top + xAxisOffset;
        chartRect.y1 = Math.max(height - normalizedPadding.bottom, chartRect.y2 + 1);
      } else {
        chartRect.y2 = normalizedPadding.top;
        chartRect.y1 = Math.max(height - normalizedPadding.bottom - xAxisOffset, chartRect.y2 + 1);
      }

      if (options.axisY.position === 'start') {
        chartRect.x1 = normalizedPadding.left + yAxisOffset;
        chartRect.x2 = Math.max(width - normalizedPadding.right, chartRect.x1 + 1);
      } else {
        chartRect.x1 = normalizedPadding.left;
        chartRect.x2 = Math.max(width - normalizedPadding.right - yAxisOffset, chartRect.x1 + 1);
      }
    } else {
      chartRect.x1 = normalizedPadding.left;
      chartRect.x2 = Math.max(width - normalizedPadding.right, chartRect.x1 + 1);
      chartRect.y2 = normalizedPadding.top;
      chartRect.y1 = Math.max(height - normalizedPadding.bottom, chartRect.y2 + 1);
    }

    return chartRect;
  };

  /**
   * Creates a grid line based on a projected value.
   *
   * @memberof Chartist.Core
   * @param projectedValue
   * @param index
   * @param axis
   * @param offset
   * @param length
   * @param group
   * @param classes
   * @param eventEmitter
   */
  Chartist.createGrid = function(projectedValue, index, axis, offset, length, group, classes, eventEmitter) {
    var positionalData = {};
    positionalData[axis.units.pos + '1'] = projectedValue.pos;
    positionalData[axis.units.pos + '2'] = projectedValue.pos;
    positionalData[axis.counterUnits.pos + '1'] = offset;
    positionalData[axis.counterUnits.pos + '2'] = offset + length;

    var gridElement = group.elem('line', positionalData, classes.join(' '));

    // Event for grid draw
    eventEmitter.emit('draw',
      Chartist.extend({
        type: 'grid',
        axis: axis,
        index: index,
        group: group,
        element: gridElement
      }, positionalData)
    );
  };

  /**
   * Creates a label based on a projected value and an axis.
   *
   * @memberof Chartist.Core
   * @param projectedValue
   * @param index
   * @param labels
   * @param axis
   * @param axisOffset
   * @param labelOffset
   * @param group
   * @param classes
   * @param useForeignObject
   * @param eventEmitter
   */
  Chartist.createLabel = function(projectedValue, index, labels, axis, axisOffset, labelOffset, group, classes, useForeignObject, eventEmitter) {
    var labelElement;
    var positionalData = {};

    positionalData[axis.units.pos] = projectedValue.pos + labelOffset[axis.units.pos];
    positionalData[axis.counterUnits.pos] = labelOffset[axis.counterUnits.pos];
    positionalData[axis.units.len] = projectedValue.len;
    positionalData[axis.counterUnits.len] = axisOffset - 10;

    if(useForeignObject) {
      // We need to set width and height explicitly to px as span will not expand with width and height being
      // 100% in all browsers
      var content = '<span class="' + classes.join(' ') + '" style="' +
        axis.units.len + ': ' + Math.round(positionalData[axis.units.len]) + 'px; ' +
        axis.counterUnits.len + ': ' + Math.round(positionalData[axis.counterUnits.len]) + 'px">' +
        labels[index] + '</span>';

      labelElement = group.foreignObject(content, Chartist.extend({
        style: 'overflow: visible;'
      }, positionalData));
    } else {
      labelElement = group.elem('text', positionalData, classes.join(' ')).text(labels[index]);
    }

    eventEmitter.emit('draw', Chartist.extend({
      type: 'label',
      axis: axis,
      index: index,
      group: group,
      element: labelElement,
      text: labels[index]
    }, positionalData));
  };

  /**
   * This function creates a whole axis with its grid lines and labels based on an axis model and a chartRect.
   *
   * @memberof Chartist.Core
   * @param axis
   * @param data
   * @param chartRect
   * @param gridGroup
   * @param labelGroup
   * @param useForeignObject
   * @param options
   * @param eventEmitter
   */
  Chartist.createAxis = function(axis, data, chartRect, gridGroup, labelGroup, useForeignObject, options, eventEmitter) {
    var axisOptions = options['axis' + axis.units.pos.toUpperCase()];
    var projectedValues = data.map(axis.projectValue.bind(axis));
    var labelValues = data.map(axisOptions.labelInterpolationFnc);

    projectedValues.forEach(function(projectedValue, index) {
      var labelOffset = {
        x: 0,
        y: 0
      };

      // Skip grid lines and labels where interpolated label values are falsey (execpt for 0)
      if(!labelValues[index] && labelValues[index] !== 0) {
        return;
      }

      // Transform to global coordinates using the chartRect
      // We also need to set the label offset for the createLabel function
      if(axis.units.pos === 'x') {
        projectedValue.pos = chartRect.x1 + projectedValue.pos;
        labelOffset.x = options.axisX.labelOffset.x;

        // If the labels should be positioned in start position (top side for vertical axis) we need to set a
        // different offset as for positioned with end (bottom)
        if(options.axisX.position === 'start') {
          labelOffset.y = chartRect.padding.top + options.axisX.labelOffset.y + (useForeignObject ? 5 : 20);
        } else {
          labelOffset.y = chartRect.y1 + options.axisX.labelOffset.y + (useForeignObject ? 5 : 20);
        }
      } else {
        projectedValue.pos = chartRect.y1 - projectedValue.pos;
        labelOffset.y = options.axisY.labelOffset.y - (useForeignObject ? projectedValue.len : 0);

        // If the labels should be positioned in start position (left side for horizontal axis) we need to set a
        // different offset as for positioned with end (right side)
        if(options.axisY.position === 'start') {
          labelOffset.x = useForeignObject ? chartRect.padding.left + options.axisY.labelOffset.x : chartRect.x1 - 10;
        } else {
          labelOffset.x = chartRect.x2 + options.axisY.labelOffset.x + 10;
        }
      }

      if(axisOptions.showGrid) {
        Chartist.createGrid(projectedValue, index, axis, axis.gridOffset, chartRect[axis.counterUnits.len](), gridGroup, [
          options.classNames.grid,
          options.classNames[axis.units.dir]
        ], eventEmitter);
      }

      if(axisOptions.showLabel) {
        Chartist.createLabel(projectedValue, index, labelValues, axis, axisOptions.offset, labelOffset, labelGroup, [
          options.classNames.label,
          options.classNames[axis.units.dir],
          options.classNames[axisOptions.position]
        ], useForeignObject, eventEmitter);
      }
    });
  };

  /**
   * Helper to read series specific options from options object. It automatically falls back to the global option if
   * there is no option in the series options.
   *
   * @param {Object} series Series object
   * @param {Object} options Chartist options object
   * @param {string} key The options key that should be used to obtain the options
   * @returns {*}
   */
  Chartist.getSeriesOption = function(series, options, key) {
    if(series.name && options.series && options.series[series.name]) {
      var seriesOptions = options.series[series.name];
      return seriesOptions.hasOwnProperty(key) ? seriesOptions[key] : options[key];
    } else {
      return options[key];
    }
  };

  /**
   * Provides options handling functionality with callback for options changes triggered by responsive options and media query matches
   *
   * @memberof Chartist.Core
   * @param {Object} options Options set by user
   * @param {Array} responsiveOptions Optional functions to add responsive behavior to chart
   * @param {Object} eventEmitter The event emitter that will be used to emit the options changed events
   * @return {Object} The consolidated options object from the defaults, base and matching responsive options
   */
  Chartist.optionsProvider = function (options, responsiveOptions, eventEmitter) {
    var baseOptions = Chartist.extend({}, options),
      currentOptions,
      mediaQueryListeners = [],
      i;

    function updateCurrentOptions(preventChangedEvent) {
      var previousOptions = currentOptions;
      currentOptions = Chartist.extend({}, baseOptions);

      if (responsiveOptions) {
        for (i = 0; i < responsiveOptions.length; i++) {
          var mql = window.matchMedia(responsiveOptions[i][0]);
          if (mql.matches) {
            currentOptions = Chartist.extend(currentOptions, responsiveOptions[i][1]);
          }
        }
      }

      if(eventEmitter && !preventChangedEvent) {
        eventEmitter.emit('optionsChanged', {
          previousOptions: previousOptions,
          currentOptions: currentOptions
        });
      }
    }

    function removeMediaQueryListeners() {
      mediaQueryListeners.forEach(function(mql) {
        mql.removeListener(updateCurrentOptions);
      });
    }

    if (!window.matchMedia) {
      throw 'window.matchMedia not found! Make sure you\'re using a polyfill.';
    } else if (responsiveOptions) {

      for (i = 0; i < responsiveOptions.length; i++) {
        var mql = window.matchMedia(responsiveOptions[i][0]);
        mql.addListener(updateCurrentOptions);
        mediaQueryListeners.push(mql);
      }
    }
    // Execute initially so we get the correct options
    updateCurrentOptions(true);

    return {
      removeMediaQueryListeners: removeMediaQueryListeners,
      getCurrentOptions: function getCurrentOptions() {
        return Chartist.extend({}, currentOptions);
      }
    };
  };

}(window, document, Chartist));
;/**
 * Chartist path interpolation functions.
 *
 * @module Chartist.Interpolation
 */
/* global Chartist */
(function(window, document, Chartist) {
  'use strict';

  Chartist.Interpolation = {};

  /**
   * This interpolation function does not smooth the path and the result is only containing lines and no curves.
   *
   * @memberof Chartist.Interpolation
   * @return {Function}
   */
  Chartist.Interpolation.none = function() {
    return function none(pathCoordinates, valueData) {
      var path = new Chartist.Svg.Path();
      // We need to assume that the first value is a "hole"
      var hole = true;

      for(var i = 1; i < pathCoordinates.length; i += 2) {
        var data = valueData[(i - 1) / 2];

        // If the current value is undefined we should treat it as a hole start
        if(data.value === undefined) {
          hole = true;
        } else {
          // If this value is valid we need to check if we're coming out of a hole
          if(hole) {
            // If we are coming out of a hole we should first make a move and also reset the hole flag
            path.move(pathCoordinates[i - 1], pathCoordinates[i], false, data);
            hole = false;
          } else {
            path.line(pathCoordinates[i - 1], pathCoordinates[i], false, data);
          }
        }
      }

      return path;
    };
  };

  /**
   * Simple smoothing creates horizontal handles that are positioned with a fraction of the length between two data points. You can use the divisor option to specify the amount of smoothing.
   *
   * Simple smoothing can be used instead of `Chartist.Smoothing.cardinal` if you'd like to get rid of the artifacts it produces sometimes. Simple smoothing produces less flowing lines but is accurate by hitting the points and it also doesn't swing below or above the given data point.
   *
   * All smoothing functions within Chartist are factory functions that accept an options parameter. The simple interpolation function accepts one configuration parameter `divisor`, between 1 and ∞, which controls the smoothing characteristics.
   *
   * @example
   * var chart = new Chartist.Line('.ct-chart', {
   *   labels: [1, 2, 3, 4, 5],
   *   series: [[1, 2, 8, 1, 7]]
   * }, {
   *   lineSmooth: Chartist.Interpolation.simple({
   *     divisor: 2
   *   })
   * });
   *
   *
   * @memberof Chartist.Interpolation
   * @param {Object} options The options of the simple interpolation factory function.
   * @return {Function}
   */
  Chartist.Interpolation.simple = function(options) {
    var defaultOptions = {
      divisor: 2
    };
    options = Chartist.extend({}, defaultOptions, options);

    var d = 1 / Math.max(1, options.divisor);

    return function simple(pathCoordinates, valueData) {
      var path = new Chartist.Svg.Path();
      var hole = true;

      for(var i = 2; i < pathCoordinates.length; i += 2) {
        var prevX = pathCoordinates[i - 2];
        var prevY = pathCoordinates[i - 1];
        var currX = pathCoordinates[i];
        var currY = pathCoordinates[i + 1];
        var length = (currX - prevX) * d;
        var prevData = valueData[(i / 2) - 1];
        var currData = valueData[i / 2];

        if(prevData.value === undefined) {
          hole = true;
        } else {

          if(hole) {
            path.move(prevX, prevY, false, prevData);
          }

          if(currData.value !== undefined) {
            path.curve(
              prevX + length,
              prevY,
              currX - length,
              currY,
              currX,
              currY,
              false,
              currData
            );

            hole = false;
          }
        }
      }

      return path;
    };
  };

  /**
   * Cardinal / Catmull-Rome spline interpolation is the default smoothing function in Chartist. It produces nice results where the splines will always meet the points. It produces some artifacts though when data values are increased or decreased rapidly. The line may not follow a very accurate path and if the line should be accurate this smoothing function does not produce the best results.
   *
   * Cardinal splines can only be created if there are more than two data points. If this is not the case this smoothing will fallback to `Chartist.Smoothing.none`.
   *
   * All smoothing functions within Chartist are factory functions that accept an options parameter. The cardinal interpolation function accepts one configuration parameter `tension`, between 0 and 1, which controls the smoothing intensity.
   *
   * @example
   * var chart = new Chartist.Line('.ct-chart', {
   *   labels: [1, 2, 3, 4, 5],
   *   series: [[1, 2, 8, 1, 7]]
   * }, {
   *   lineSmooth: Chartist.Interpolation.cardinal({
   *     tension: 1
   *   })
   * });
   *
   * @memberof Chartist.Interpolation
   * @param {Object} options The options of the cardinal factory function.
   * @return {Function}
   */
  Chartist.Interpolation.cardinal = function(options) {
    var defaultOptions = {
      tension: 1
    };

    options = Chartist.extend({}, defaultOptions, options);

    var t = Math.min(1, Math.max(0, options.tension)),
      c = 1 - t;

    // This function will help us to split pathCoordinates and valueData into segments that also contain pathCoordinates
    // and valueData. This way the existing functions can be reused and the segment paths can be joined afterwards.
    // This functionality is necessary to treat "holes" in the line charts
    function splitIntoSegments(pathCoordinates, valueData) {
      var segments = [];
      var hole = true;

      for(var i = 0; i < pathCoordinates.length; i += 2) {
        // If this value is a "hole" we set the hole flag
        if(valueData[i / 2].value === undefined) {
          hole = true;
        } else {
          // If it's a valid value we need to check if we're coming out of a hole and create a new empty segment
          if(hole) {
            segments.push({
              pathCoordinates: [],
              valueData: []
            });
            // As we have a valid value now, we are not in a "hole" anymore
            hole = false;
          }

          // Add to the segment pathCoordinates and valueData
          segments[segments.length - 1].pathCoordinates.push(pathCoordinates[i], pathCoordinates[i + 1]);
          segments[segments.length - 1].valueData.push(valueData[i / 2]);
        }
      }

      return segments;
    }

    return function cardinal(pathCoordinates, valueData) {
      // First we try to split the coordinates into segments
      // This is necessary to treat "holes" in line charts
      var segments = splitIntoSegments(pathCoordinates, valueData);

      // If the split resulted in more that one segment we need to interpolate each segment individually and join them
      // afterwards together into a single path.
      if(segments.length > 1) {
        var paths = [];
        // For each segment we will recurse the cardinal function
        segments.forEach(function(segment) {
          paths.push(cardinal(segment.pathCoordinates, segment.valueData));
        });
        // Join the segment path data into a single path and return
        return Chartist.Svg.Path.join(paths);
      } else {
        // If there was only one segment we can proceed regularly by using pathCoordinates and valueData from the first
        // segment
        pathCoordinates = segments[0].pathCoordinates;
        valueData = segments[0].valueData;

        // If less than two points we need to fallback to no smoothing
        if(pathCoordinates.length <= 4) {
          return Chartist.Interpolation.none()(pathCoordinates, valueData);
        }

        var path = new Chartist.Svg.Path().move(pathCoordinates[0], pathCoordinates[1], false, valueData[0]),
          z;

        for (var i = 0, iLen = pathCoordinates.length; iLen - 2 * !z > i; i += 2) {
          var p = [
            {x: +pathCoordinates[i - 2], y: +pathCoordinates[i - 1]},
            {x: +pathCoordinates[i], y: +pathCoordinates[i + 1]},
            {x: +pathCoordinates[i + 2], y: +pathCoordinates[i + 3]},
            {x: +pathCoordinates[i + 4], y: +pathCoordinates[i + 5]}
          ];
          if (z) {
            if (!i) {
              p[0] = {x: +pathCoordinates[iLen - 2], y: +pathCoordinates[iLen - 1]};
            } else if (iLen - 4 === i) {
              p[3] = {x: +pathCoordinates[0], y: +pathCoordinates[1]};
            } else if (iLen - 2 === i) {
              p[2] = {x: +pathCoordinates[0], y: +pathCoordinates[1]};
              p[3] = {x: +pathCoordinates[2], y: +pathCoordinates[3]};
            }
          } else {
            if (iLen - 4 === i) {
              p[3] = p[2];
            } else if (!i) {
              p[0] = {x: +pathCoordinates[i], y: +pathCoordinates[i + 1]};
            }
          }

          path.curve(
            (t * (-p[0].x + 6 * p[1].x + p[2].x) / 6) + (c * p[2].x),
            (t * (-p[0].y + 6 * p[1].y + p[2].y) / 6) + (c * p[2].y),
            (t * (p[1].x + 6 * p[2].x - p[3].x) / 6) + (c * p[2].x),
            (t * (p[1].y + 6 * p[2].y - p[3].y) / 6) + (c * p[2].y),
            p[2].x,
            p[2].y,
            false,
            valueData[(i + 2) / 2]
          );
        }

        return path;
      }
    };
  };

  /**
   * Step interpolation will cause the line chart to move in steps rather than diagonal or smoothed lines. This interpolation will create additional points that will also be drawn when the `showPoint` option is enabled.
   *
   * All smoothing functions within Chartist are factory functions that accept an options parameter. The step interpolation function accepts one configuration parameter `postpone`, that can be `true` or `false`. The default value is `true` and will cause the step to occur where the value actually changes. If a different behaviour is needed where the step is shifted to the left and happens before the actual value, this option can be set to `false`.
   *
   * @example
   * var chart = new Chartist.Line('.ct-chart', {
   *   labels: [1, 2, 3, 4, 5],
   *   series: [[1, 2, 8, 1, 7]]
   * }, {
   *   lineSmooth: Chartist.Interpolation.step({
   *     postpone: true
   *   })
   * });
   *
   * @memberof Chartist.Interpolation
   * @param options
   * @returns {Function}
   */
  Chartist.Interpolation.step = function(options) {
    var defaultOptions = {
      postpone: true
    };

    options = Chartist.extend({}, defaultOptions, options);

    return function step(pathCoordinates, valueData) {
      var path = new Chartist.Svg.Path();
      var hole = true;

      for (var i = 2; i < pathCoordinates.length; i += 2) {
        var prevX = pathCoordinates[i - 2];
        var prevY = pathCoordinates[i - 1];
        var currX = pathCoordinates[i];
        var currY = pathCoordinates[i + 1];
        var prevData = valueData[(i / 2) - 1];
        var currData = valueData[i / 2];

        // If last point is a "hole"
        if(prevData.value === undefined) {
          hole = true;
        } else {
          // If last point is not a "hole" but we just came back out of a "hole" we need to move first
          if(hole) {
            path.move(prevX, prevY, false, prevData);
          }

          // If the current point is also not a hole we can draw the step lines
          if(currData.value !== undefined) {
            if(options.postpone) {
              // If postponed we should draw the step line with the value of the previous value
              path.line(currX, prevY, false, prevData);
            } else {
              // If not postponed we should draw the step line with the value of the current value
              path.line(prevX, currY, false, currData);
            }
            // Line to the actual point (this should only be a Y-Axis movement
            path.line(currX, currY, false, currData);
            // Reset the "hole" flag as previous and current point have valid values
            hole = false;
          }
        }
      }

      return path;
    };
  };

}(window, document, Chartist));
;/**
 * A very basic event module that helps to generate and catch events.
 *
 * @module Chartist.Event
 */
/* global Chartist */
(function (window, document, Chartist) {
  'use strict';

  Chartist.EventEmitter = function () {
    var handlers = [];

    /**
     * Add an event handler for a specific event
     *
     * @memberof Chartist.Event
     * @param {String} event The event name
     * @param {Function} handler A event handler function
     */
    function addEventHandler(event, handler) {
      handlers[event] = handlers[event] || [];
      handlers[event].push(handler);
    }

    /**
     * Remove an event handler of a specific event name or remove all event handlers for a specific event.
     *
     * @memberof Chartist.Event
     * @param {String} event The event name where a specific or all handlers should be removed
     * @param {Function} [handler] An optional event handler function. If specified only this specific handler will be removed and otherwise all handlers are removed.
     */
    function removeEventHandler(event, handler) {
      // Only do something if there are event handlers with this name existing
      if(handlers[event]) {
        // If handler is set we will look for a specific handler and only remove this
        if(handler) {
          handlers[event].splice(handlers[event].indexOf(handler), 1);
          if(handlers[event].length === 0) {
            delete handlers[event];
          }
        } else {
          // If no handler is specified we remove all handlers for this event
          delete handlers[event];
        }
      }
    }

    /**
     * Use this function to emit an event. All handlers that are listening for this event will be triggered with the data parameter.
     *
     * @memberof Chartist.Event
     * @param {String} event The event name that should be triggered
     * @param {*} data Arbitrary data that will be passed to the event handler callback functions
     */
    function emit(event, data) {
      // Only do something if there are event handlers with this name existing
      if(handlers[event]) {
        handlers[event].forEach(function(handler) {
          handler(data);
        });
      }

      // Emit event to star event handlers
      if(handlers['*']) {
        handlers['*'].forEach(function(starHandler) {
          starHandler(event, data);
        });
      }
    }

    return {
      addEventHandler: addEventHandler,
      removeEventHandler: removeEventHandler,
      emit: emit
    };
  };

}(window, document, Chartist));
;/**
 * This module provides some basic prototype inheritance utilities.
 *
 * @module Chartist.Class
 */
/* global Chartist */
(function(window, document, Chartist) {
  'use strict';

  function listToArray(list) {
    var arr = [];
    if (list.length) {
      for (var i = 0; i < list.length; i++) {
        arr.push(list[i]);
      }
    }
    return arr;
  }

  /**
   * Method to extend from current prototype.
   *
   * @memberof Chartist.Class
   * @param {Object} properties The object that serves as definition for the prototype that gets created for the new class. This object should always contain a constructor property that is the desired constructor for the newly created class.
   * @param {Object} [superProtoOverride] By default extens will use the current class prototype or Chartist.class. With this parameter you can specify any super prototype that will be used.
   * @return {Function} Constructor function of the new class
   *
   * @example
   * var Fruit = Class.extend({
     * color: undefined,
     *   sugar: undefined,
     *
     *   constructor: function(color, sugar) {
     *     this.color = color;
     *     this.sugar = sugar;
     *   },
     *
     *   eat: function() {
     *     this.sugar = 0;
     *     return this;
     *   }
     * });
   *
   * var Banana = Fruit.extend({
     *   length: undefined,
     *
     *   constructor: function(length, sugar) {
     *     Banana.super.constructor.call(this, 'Yellow', sugar);
     *     this.length = length;
     *   }
     * });
   *
   * var banana = new Banana(20, 40);
   * console.log('banana instanceof Fruit', banana instanceof Fruit);
   * console.log('Fruit is prototype of banana', Fruit.prototype.isPrototypeOf(banana));
   * console.log('bananas prototype is Fruit', Object.getPrototypeOf(banana) === Fruit.prototype);
   * console.log(banana.sugar);
   * console.log(banana.eat().sugar);
   * console.log(banana.color);
   */
  function extend(properties, superProtoOverride) {
    var superProto = superProtoOverride || this.prototype || Chartist.Class;
    var proto = Object.create(superProto);

    Chartist.Class.cloneDefinitions(proto, properties);

    var constr = function() {
      var fn = proto.constructor || function () {},
        instance;

      // If this is linked to the Chartist namespace the constructor was not called with new
      // To provide a fallback we will instantiate here and return the instance
      instance = this === Chartist ? Object.create(proto) : this;
      fn.apply(instance, Array.prototype.slice.call(arguments, 0));

      // If this constructor was not called with new we need to return the instance
      // This will not harm when the constructor has been called with new as the returned value is ignored
      return instance;
    };

    constr.prototype = proto;
    constr.super = superProto;
    constr.extend = this.extend;

    return constr;
  }

  // Variable argument list clones args > 0 into args[0] and retruns modified args[0]
  function cloneDefinitions() {
    var args = listToArray(arguments);
    var target = args[0];

    args.splice(1, args.length - 1).forEach(function (source) {
      Object.getOwnPropertyNames(source).forEach(function (propName) {
        // If this property already exist in target we delete it first
        delete target[propName];
        // Define the property with the descriptor from source
        Object.defineProperty(target, propName,
          Object.getOwnPropertyDescriptor(source, propName));
      });
    });

    return target;
  }

  Chartist.Class = {
    extend: extend,
    cloneDefinitions: cloneDefinitions
  };

}(window, document, Chartist));
;/**
 * Base for all chart types. The methods in Chartist.Base are inherited to all chart types.
 *
 * @module Chartist.Base
 */
/* global Chartist */
(function(window, document, Chartist) {
  'use strict';

  // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.
  // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not
  // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.
  // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html
  // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj
  // The problem is with the label offsets that can't be converted into percentage and affecting the chart container
  /**
   * Updates the chart which currently does a full reconstruction of the SVG DOM
   *
   * @param {Object} [data] Optional data you'd like to set for the chart before it will update. If not specified the update method will use the data that is already configured with the chart.
   * @param {Object} [options] Optional options you'd like to add to the previous options for the chart before it will update. If not specified the update method will use the options that have been already configured with the chart.
   * @param {Boolean} [override] If set to true, the passed options will be used to extend the options that have been configured already. Otherwise the chart default options will be used as the base
   * @memberof Chartist.Base
   */
  function update(data, options, override) {
    if(data) {
      this.data = data;
      // Event for data transformation that allows to manipulate the data before it gets rendered in the charts
      this.eventEmitter.emit('data', {
        type: 'update',
        data: this.data
      });
    }

    if(options) {
      this.options = Chartist.extend({}, override ? this.options : this.defaultOptions, options);

      // If chartist was not initialized yet, we just set the options and leave the rest to the initialization
      // Otherwise we re-create the optionsProvider at this point
      if(!this.initializeTimeoutId) {
        this.optionsProvider.removeMediaQueryListeners();
        this.optionsProvider = Chartist.optionsProvider(this.options, this.responsiveOptions, this.eventEmitter);
      }
    }

    // Only re-created the chart if it has been initialized yet
    if(!this.initializeTimeoutId) {
      this.createChart(this.optionsProvider.getCurrentOptions());
    }

    // Return a reference to the chart object to chain up calls
    return this;
  }

  /**
   * This method can be called on the API object of each chart and will un-register all event listeners that were added to other components. This currently includes a window.resize listener as well as media query listeners if any responsive options have been provided. Use this function if you need to destroy and recreate Chartist charts dynamically.
   *
   * @memberof Chartist.Base
   */
  function detach() {
    window.removeEventListener('resize', this.resizeListener);
    this.optionsProvider.removeMediaQueryListeners();
    return this;
  }

  /**
   * Use this function to register event handlers. The handler callbacks are synchronous and will run in the main thread rather than the event loop.
   *
   * @memberof Chartist.Base
   * @param {String} event Name of the event. Check the examples for supported events.
   * @param {Function} handler The handler function that will be called when an event with the given name was emitted. This function will receive a data argument which contains event data. See the example for more details.
   */
  function on(event, handler) {
    this.eventEmitter.addEventHandler(event, handler);
    return this;
  }

  /**
   * Use this function to un-register event handlers. If the handler function parameter is omitted all handlers for the given event will be un-registered.
   *
   * @memberof Chartist.Base
   * @param {String} event Name of the event for which a handler should be removed
   * @param {Function} [handler] The handler function that that was previously used to register a new event handler. This handler will be removed from the event handler list. If this parameter is omitted then all event handlers for the given event are removed from the list.
   */
  function off(event, handler) {
    this.eventEmitter.removeEventHandler(event, handler);
    return this;
  }

  function initialize() {
    // Add window resize listener that re-creates the chart
    window.addEventListener('resize', this.resizeListener);

    // Obtain current options based on matching media queries (if responsive options are given)
    // This will also register a listener that is re-creating the chart based on media changes
    this.optionsProvider = Chartist.optionsProvider(this.options, this.responsiveOptions, this.eventEmitter);
    // Register options change listener that will trigger a chart update
    this.eventEmitter.addEventHandler('optionsChanged', function() {
      this.update();
    }.bind(this));

    // Before the first chart creation we need to register us with all plugins that are configured
    // Initialize all relevant plugins with our chart object and the plugin options specified in the config
    if(this.options.plugins) {
      this.options.plugins.forEach(function(plugin) {
        if(plugin instanceof Array) {
          plugin[0](this, plugin[1]);
        } else {
          plugin(this);
        }
      }.bind(this));
    }

    // Event for data transformation that allows to manipulate the data before it gets rendered in the charts
    this.eventEmitter.emit('data', {
      type: 'initial',
      data: this.data
    });

    // Create the first chart
    this.createChart(this.optionsProvider.getCurrentOptions());

    // As chart is initialized from the event loop now we can reset our timeout reference
    // This is important if the chart gets initialized on the same element twice
    this.initializeTimeoutId = undefined;
  }

  /**
   * Constructor of chart base class.
   *
   * @param query
   * @param data
   * @param defaultOptions
   * @param options
   * @param responsiveOptions
   * @constructor
   */
  function Base(query, data, defaultOptions, options, responsiveOptions) {
    this.container = Chartist.querySelector(query);
    this.data = data;
    this.defaultOptions = defaultOptions;
    this.options = options;
    this.responsiveOptions = responsiveOptions;
    this.eventEmitter = Chartist.EventEmitter();
    this.supportsForeignObject = Chartist.Svg.isSupported('Extensibility');
    this.supportsAnimations = Chartist.Svg.isSupported('AnimationEventsAttribute');
    this.resizeListener = function resizeListener(){
      this.update();
    }.bind(this);

    if(this.container) {
      // If chartist was already initialized in this container we are detaching all event listeners first
      if(this.container.__chartist__) {
        if(this.container.__chartist__.initializeTimeoutId) {
          // If the initializeTimeoutId is still set we can safely assume that the initialization function has not
          // been called yet from the event loop. Therefore we should cancel the timeout and don't need to detach
          window.clearTimeout(this.container.__chartist__.initializeTimeoutId);
        } else {
          // The timeout reference has already been reset which means we need to detach the old chart first
          this.container.__chartist__.detach();
        }
      }

      this.container.__chartist__ = this;
    }

    // Using event loop for first draw to make it possible to register event listeners in the same call stack where
    // the chart was created.
    this.initializeTimeoutId = setTimeout(initialize.bind(this), 0);
  }

  // Creating the chart base class
  Chartist.Base = Chartist.Class.extend({
    constructor: Base,
    optionsProvider: undefined,
    container: undefined,
    svg: undefined,
    eventEmitter: undefined,
    createChart: function() {
      throw new Error('Base chart type can\'t be instantiated!');
    },
    update: update,
    detach: detach,
    on: on,
    off: off,
    version: Chartist.version,
    supportsForeignObject: false
  });

}(window, document, Chartist));
;/**
 * Chartist SVG module for simple SVG DOM abstraction
 *
 * @module Chartist.Svg
 */
/* global Chartist */
(function(window, document, Chartist) {
  'use strict';

  var svgNs = 'http://www.w3.org/2000/svg',
    xmlNs = 'http://www.w3.org/2000/xmlns/',
    xhtmlNs = 'http://www.w3.org/1999/xhtml';

  Chartist.xmlNs = {
    qualifiedName: 'xmlns:ct',
    prefix: 'ct',
    uri: 'http://gionkunz.github.com/chartist-js/ct'
  };

  /**
   * Chartist.Svg creates a new SVG object wrapper with a starting element. You can use the wrapper to fluently create sub-elements and modify them.
   *
   * @memberof Chartist.Svg
   * @constructor
   * @param {String|Element} name The name of the SVG element to create or an SVG dom element which should be wrapped into Chartist.Svg
   * @param {Object} attributes An object with properties that will be added as attributes to the SVG element that is created. Attributes with undefined values will not be added.
   * @param {String} className This class or class list will be added to the SVG element
   * @param {Object} parent The parent SVG wrapper object where this newly created wrapper and it's element will be attached to as child
   * @param {Boolean} insertFirst If this param is set to true in conjunction with a parent element the newly created element will be added as first child element in the parent element
   */
  function Svg(name, attributes, className, parent, insertFirst) {
    // If Svg is getting called with an SVG element we just return the wrapper
    if(name instanceof Element) {
      this._node = name;
    } else {
      this._node = document.createElementNS(svgNs, name);

      // If this is an SVG element created then custom namespace
      if(name === 'svg') {
        this._node.setAttributeNS(xmlNs, Chartist.xmlNs.qualifiedName, Chartist.xmlNs.uri);
      }

      if(attributes) {
        this.attr(attributes);
      }

      if(className) {
        this.addClass(className);
      }

      if(parent) {
        if (insertFirst && parent._node.firstChild) {
          parent._node.insertBefore(this._node, parent._node.firstChild);
        } else {
          parent._node.appendChild(this._node);
        }
      }
    }
  }

  /**
   * Set attributes on the current SVG element of the wrapper you're currently working on.
   *
   * @memberof Chartist.Svg
   * @param {Object|String} attributes An object with properties that will be added as attributes to the SVG element that is created. Attributes with undefined values will not be added. If this parameter is a String then the function is used as a getter and will return the attribute value.
   * @param {String} ns If specified, the attributes will be set as namespace attributes with ns as prefix.
   * @return {Object|String} The current wrapper object will be returned so it can be used for chaining or the attribute value if used as getter function.
   */
  function attr(attributes, ns) {
    if(typeof attributes === 'string') {
      if(ns) {
        return this._node.getAttributeNS(ns, attributes);
      } else {
        return this._node.getAttribute(attributes);
      }
    }

    Object.keys(attributes).forEach(function(key) {
      // If the attribute value is undefined we can skip this one
      if(attributes[key] === undefined) {
        return;
      }

      if(ns) {
        this._node.setAttributeNS(ns, [Chartist.xmlNs.prefix, ':', key].join(''), attributes[key]);
      } else {
        this._node.setAttribute(key, attributes[key]);
      }
    }.bind(this));

    return this;
  }

  /**
   * Create a new SVG element whose wrapper object will be selected for further operations. This way you can also create nested groups easily.
   *
   * @memberof Chartist.Svg
   * @param {String} name The name of the SVG element that should be created as child element of the currently selected element wrapper
   * @param {Object} [attributes] An object with properties that will be added as attributes to the SVG element that is created. Attributes with undefined values will not be added.
   * @param {String} [className] This class or class list will be added to the SVG element
   * @param {Boolean} [insertFirst] If this param is set to true in conjunction with a parent element the newly created element will be added as first child element in the parent element
   * @return {Chartist.Svg} Returns a Chartist.Svg wrapper object that can be used to modify the containing SVG data
   */
  function elem(name, attributes, className, insertFirst) {
    return new Chartist.Svg(name, attributes, className, this, insertFirst);
  }

  /**
   * Returns the parent Chartist.SVG wrapper object
   *
   * @memberof Chartist.Svg
   * @return {Chartist.Svg} Returns a Chartist.Svg wrapper around the parent node of the current node. If the parent node is not existing or it's not an SVG node then this function will return null.
   */
  function parent() {
    return this._node.parentNode instanceof SVGElement ? new Chartist.Svg(this._node.parentNode) : null;
  }

  /**
   * This method returns a Chartist.Svg wrapper around the root SVG element of the current tree.
   *
   * @memberof Chartist.Svg
   * @return {Chartist.Svg} The root SVG element wrapped in a Chartist.Svg element
   */
  function root() {
    var node = this._node;
    while(node.nodeName !== 'svg') {
      node = node.parentNode;
    }
    return new Chartist.Svg(node);
  }

  /**
   * Find the first child SVG element of the current element that matches a CSS selector. The returned object is a Chartist.Svg wrapper.
   *
   * @memberof Chartist.Svg
   * @param {String} selector A CSS selector that is used to query for child SVG elements
   * @return {Chartist.Svg} The SVG wrapper for the element found or null if no element was found
   */
  function querySelector(selector) {
    var foundNode = this._node.querySelector(selector);
    return foundNode ? new Chartist.Svg(foundNode) : null;
  }

  /**
   * Find the all child SVG elements of the current element that match a CSS selector. The returned object is a Chartist.Svg.List wrapper.
   *
   * @memberof Chartist.Svg
   * @param {String} selector A CSS selector that is used to query for child SVG elements
   * @return {Chartist.Svg.List} The SVG wrapper list for the element found or null if no element was found
   */
  function querySelectorAll(selector) {
    var foundNodes = this._node.querySelectorAll(selector);
    return foundNodes.length ? new Chartist.Svg.List(foundNodes) : null;
  }

  /**
   * This method creates a foreignObject (see https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject) that allows to embed HTML content into a SVG graphic. With the help of foreignObjects you can enable the usage of regular HTML elements inside of SVG where they are subject for SVG positioning and transformation but the Browser will use the HTML rendering capabilities for the containing DOM.
   *
   * @memberof Chartist.Svg
   * @param {Node|String} content The DOM Node, or HTML string that will be converted to a DOM Node, that is then placed into and wrapped by the foreignObject
   * @param {String} [attributes] An object with properties that will be added as attributes to the foreignObject element that is created. Attributes with undefined values will not be added.
   * @param {String} [className] This class or class list will be added to the SVG element
   * @param {Boolean} [insertFirst] Specifies if the foreignObject should be inserted as first child
   * @return {Chartist.Svg} New wrapper object that wraps the foreignObject element
   */
  function foreignObject(content, attributes, className, insertFirst) {
    // If content is string then we convert it to DOM
    // TODO: Handle case where content is not a string nor a DOM Node
    if(typeof content === 'string') {
      var container = document.createElement('div');
      container.innerHTML = content;
      content = container.firstChild;
    }

    // Adding namespace to content element
    content.setAttribute('xmlns', xhtmlNs);

    // Creating the foreignObject without required extension attribute (as described here
    // http://www.w3.org/TR/SVG/extend.html#ForeignObjectElement)
    var fnObj = this.elem('foreignObject', attributes, className, insertFirst);

    // Add content to foreignObjectElement
    fnObj._node.appendChild(content);

    return fnObj;
  }

  /**
   * This method adds a new text element to the current Chartist.Svg wrapper.
   *
   * @memberof Chartist.Svg
   * @param {String} t The text that should be added to the text element that is created
   * @return {Chartist.Svg} The same wrapper object that was used to add the newly created element
   */
  function text(t) {
    this._node.appendChild(document.createTextNode(t));
    return this;
  }

  /**
   * This method will clear all child nodes of the current wrapper object.
   *
   * @memberof Chartist.Svg
   * @return {Chartist.Svg} The same wrapper object that got emptied
   */
  function empty() {
    while (this._node.firstChild) {
      this._node.removeChild(this._node.firstChild);
    }

    return this;
  }

  /**
   * This method will cause the current wrapper to remove itself from its parent wrapper. Use this method if you'd like to get rid of an element in a given DOM structure.
   *
   * @memberof Chartist.Svg
   * @return {Chartist.Svg} The parent wrapper object of the element that got removed
   */
  function remove() {
    this._node.parentNode.removeChild(this._node);
    return this.parent();
  }

  /**
   * This method will replace the element with a new element that can be created outside of the current DOM.
   *
   * @memberof Chartist.Svg
   * @param {Chartist.Svg} newElement The new Chartist.Svg object that will be used to replace the current wrapper object
   * @return {Chartist.Svg} The wrapper of the new element
   */
  function replace(newElement) {
    this._node.parentNode.replaceChild(newElement._node, this._node);
    return newElement;
  }

  /**
   * This method will append an element to the current element as a child.
   *
   * @memberof Chartist.Svg
   * @param {Chartist.Svg} element The Chartist.Svg element that should be added as a child
   * @param {Boolean} [insertFirst] Specifies if the element should be inserted as first child
   * @return {Chartist.Svg} The wrapper of the appended object
   */
  function append(element, insertFirst) {
    if(insertFirst && this._node.firstChild) {
      this._node.insertBefore(element._node, this._node.firstChild);
    } else {
      this._node.appendChild(element._node);
    }

    return this;
  }

  /**
   * Returns an array of class names that are attached to the current wrapper element. This method can not be chained further.
   *
   * @memberof Chartist.Svg
   * @return {Array} A list of classes or an empty array if there are no classes on the current element
   */
  function classes() {
    return this._node.getAttribute('class') ? this._node.getAttribute('class').trim().split(/\s+/) : [];
  }

  /**
   * Adds one or a space separated list of classes to the current element and ensures the classes are only existing once.
   *
   * @memberof Chartist.Svg
   * @param {String} names A white space separated list of class names
   * @return {Chartist.Svg} The wrapper of the current element
   */
  function addClass(names) {
    this._node.setAttribute('class',
      this.classes(this._node)
        .concat(names.trim().split(/\s+/))
        .filter(function(elem, pos, self) {
          return self.indexOf(elem) === pos;
        }).join(' ')
    );

    return this;
  }

  /**
   * Removes one or a space separated list of classes from the current element.
   *
   * @memberof Chartist.Svg
   * @param {String} names A white space separated list of class names
   * @return {Chartist.Svg} The wrapper of the current element
   */
  function removeClass(names) {
    var removedClasses = names.trim().split(/\s+/);

    this._node.setAttribute('class', this.classes(this._node).filter(function(name) {
      return removedClasses.indexOf(name) === -1;
    }).join(' '));

    return this;
  }

  /**
   * Removes all classes from the current element.
   *
   * @memberof Chartist.Svg
   * @return {Chartist.Svg} The wrapper of the current element
   */
  function removeAllClasses() {
    this._node.setAttribute('class', '');

    return this;
  }

  /**
   * "Save" way to get property value from svg BoundingBox.
   * This is a workaround. Firefox throws an NS_ERROR_FAILURE error if getBBox() is called on an invisible node.
   * See [NS_ERROR_FAILURE: Component returned failure code: 0x80004005](http://jsfiddle.net/sym3tri/kWWDK/)
   *
   * @memberof Chartist.Svg
   * @param {SVGElement} node The svg node to
   * @param {String} prop The property to fetch (ex.: height, width, ...)
   * @returns {Number} The value of the given bbox property
   */
  function getBBoxProperty(node, prop) {
    try {
      return node.getBBox()[prop];
    } catch(e) {}

    return 0;
  }

  /**
   * Get element height with fallback to svg BoundingBox or parent container dimensions:
   * See [bugzilla.mozilla.org](https://bugzilla.mozilla.org/show_bug.cgi?id=530985)
   *
   * @memberof Chartist.Svg
   * @return {Number} The elements height in pixels
   */
  function height() {
    return this._node.clientHeight || Math.round(getBBoxProperty(this._node, 'height')) || this._node.parentNode.clientHeight;
  }

  /**
   * Get element width with fallback to svg BoundingBox or parent container dimensions:
   * See [bugzilla.mozilla.org](https://bugzilla.mozilla.org/show_bug.cgi?id=530985)
   *
   * @memberof Chartist.Core
   * @return {Number} The elements width in pixels
   */
  function width() {
    return this._node.clientWidth || Math.round(getBBoxProperty(this._node, 'width')) || this._node.parentNode.clientWidth;
  }

  /**
   * The animate function lets you animate the current element with SMIL animations. You can add animations for multiple attributes at the same time by using an animation definition object. This object should contain SMIL animation attributes. Please refer to http://www.w3.org/TR/SVG/animate.html for a detailed specification about the available animation attributes. Additionally an easing property can be passed in the animation definition object. This can be a string with a name of an easing function in `Chartist.Svg.Easing` or an array with four numbers specifying a cubic Bézier curve.
   * **An animations object could look like this:**
   * ```javascript
   * element.animate({
   *   opacity: {
   *     dur: 1000,
   *     from: 0,
   *     to: 1
   *   },
   *   x1: {
   *     dur: '1000ms',
   *     from: 100,
   *     to: 200,
   *     easing: 'easeOutQuart'
   *   },
   *   y1: {
   *     dur: '2s',
   *     from: 0,
   *     to: 100
   *   }
   * });
   * ```
   * **Automatic unit conversion**
   * For the `dur` and the `begin` animate attribute you can also omit a unit by passing a number. The number will automatically be converted to milli seconds.
   * **Guided mode**
   * The default behavior of SMIL animations with offset using the `begin` attribute is that the attribute will keep it's original value until the animation starts. Mostly this behavior is not desired as you'd like to have your element attributes already initialized with the animation `from` value even before the animation starts. Also if you don't specify `fill="freeze"` on an animate element or if you delete the animation after it's done (which is done in guided mode) the attribute will switch back to the initial value. This behavior is also not desired when performing simple one-time animations. For one-time animations you'd want to trigger animations immediately instead of relative to the document begin time. That's why in guided mode Chartist.Svg will also use the `begin` property to schedule a timeout and manually start the animation after the timeout. If you're using multiple SMIL definition objects for an attribute (in an array), guided mode will be disabled for this attribute, even if you explicitly enabled it.
   * If guided mode is enabled the following behavior is added:
   * - Before the animation starts (even when delayed with `begin`) the animated attribute will be set already to the `from` value of the animation
   * - `begin` is explicitly set to `indefinite` so it can be started manually without relying on document begin time (creation)
   * - The animate element will be forced to use `fill="freeze"`
   * - The animation will be triggered with `beginElement()` in a timeout where `begin` of the definition object is interpreted in milli seconds. If no `begin` was specified the timeout is triggered immediately.
   * - After the animation the element attribute value will be set to the `to` value of the animation
   * - The animate element is deleted from the DOM
   *
   * @memberof Chartist.Svg
   * @param {Object} animations An animations object where the property keys are the attributes you'd like to animate. The properties should be objects again that contain the SMIL animation attributes (usually begin, dur, from, and to). The property begin and dur is auto converted (see Automatic unit conversion). You can also schedule multiple animations for the same attribute by passing an Array of SMIL definition objects. Attributes that contain an array of SMIL definition objects will not be executed in guided mode.
   * @param {Boolean} guided Specify if guided mode should be activated for this animation (see Guided mode). If not otherwise specified, guided mode will be activated.
   * @param {Object} eventEmitter If specified, this event emitter will be notified when an animation starts or ends.
   * @return {Chartist.Svg} The current element where the animation was added
   */
  function animate(animations, guided, eventEmitter) {
    if(guided === undefined) {
      guided = true;
    }

    Object.keys(animations).forEach(function createAnimateForAttributes(attribute) {

      function createAnimate(animationDefinition, guided) {
        var attributeProperties = {},
          animate,
          timeout,
          easing;

        // Check if an easing is specified in the definition object and delete it from the object as it will not
        // be part of the animate element attributes.
        if(animationDefinition.easing) {
          // If already an easing Bézier curve array we take it or we lookup a easing array in the Easing object
          easing = animationDefinition.easing instanceof Array ?
            animationDefinition.easing :
            Chartist.Svg.Easing[animationDefinition.easing];
          delete animationDefinition.easing;
        }

        // If numeric dur or begin was provided we assume milli seconds
        animationDefinition.begin = Chartist.ensureUnit(animationDefinition.begin, 'ms');
        animationDefinition.dur = Chartist.ensureUnit(animationDefinition.dur, 'ms');

        if(easing) {
          animationDefinition.calcMode = 'spline';
          animationDefinition.keySplines = easing.join(' ');
          animationDefinition.keyTimes = '0;1';
        }

        // Adding "fill: freeze" if we are in guided mode and set initial attribute values
        if(guided) {
          animationDefinition.fill = 'freeze';
          // Animated property on our element should already be set to the animation from value in guided mode
          attributeProperties[attribute] = animationDefinition.from;
          this.attr(attributeProperties);

          // In guided mode we also set begin to indefinite so we can trigger the start manually and put the begin
          // which needs to be in ms aside
          timeout = Chartist.stripUnit(animationDefinition.begin || 0);
          animationDefinition.begin = 'indefinite';
        }

        animate = this.elem('animate', Chartist.extend({
          attributeName: attribute
        }, animationDefinition));

        if(guided) {
          // If guided we take the value that was put aside in timeout and trigger the animation manually with a timeout
          setTimeout(function() {
            // If beginElement fails we set the animated attribute to the end position and remove the animate element
            // This happens if the SMIL ElementTimeControl interface is not supported or any other problems occured in
            // the browser. (Currently FF 34 does not support animate elements in foreignObjects)
            try {
              animate._node.beginElement();
            } catch(err) {
              // Set animated attribute to current animated value
              attributeProperties[attribute] = animationDefinition.to;
              this.attr(attributeProperties);
              // Remove the animate element as it's no longer required
              animate.remove();
            }
          }.bind(this), timeout);
        }

        if(eventEmitter) {
          animate._node.addEventListener('beginEvent', function handleBeginEvent() {
            eventEmitter.emit('animationBegin', {
              element: this,
              animate: animate._node,
              params: animationDefinition
            });
          }.bind(this));
        }

        animate._node.addEventListener('endEvent', function handleEndEvent() {
          if(eventEmitter) {
            eventEmitter.emit('animationEnd', {
              element: this,
              animate: animate._node,
              params: animationDefinition
            });
          }

          if(guided) {
            // Set animated attribute to current animated value
            attributeProperties[attribute] = animationDefinition.to;
            this.attr(attributeProperties);
            // Remove the animate element as it's no longer required
            animate.remove();
          }
        }.bind(this));
      }

      // If current attribute is an array of definition objects we create an animate for each and disable guided mode
      if(animations[attribute] instanceof Array) {
        animations[attribute].forEach(function(animationDefinition) {
          createAnimate.bind(this)(animationDefinition, false);
        }.bind(this));
      } else {
        createAnimate.bind(this)(animations[attribute], guided);
      }

    }.bind(this));

    return this;
  }

  Chartist.Svg = Chartist.Class.extend({
    constructor: Svg,
    attr: attr,
    elem: elem,
    parent: parent,
    root: root,
    querySelector: querySelector,
    querySelectorAll: querySelectorAll,
    foreignObject: foreignObject,
    text: text,
    empty: empty,
    remove: remove,
    replace: replace,
    append: append,
    classes: classes,
    addClass: addClass,
    removeClass: removeClass,
    removeAllClasses: removeAllClasses,
    height: height,
    width: width,
    animate: animate
  });

  /**
   * This method checks for support of a given SVG feature like Extensibility, SVG-animation or the like. Check http://www.w3.org/TR/SVG11/feature for a detailed list.
   *
   * @memberof Chartist.Svg
   * @param {String} feature The SVG 1.1 feature that should be checked for support.
   * @return {Boolean} True of false if the feature is supported or not
   */
  Chartist.Svg.isSupported = function(feature) {
    return document.implementation.hasFeature('www.http://w3.org/TR/SVG11/feature#' + feature, '1.1');
  };

  /**
   * This Object contains some standard easing cubic bezier curves. Then can be used with their name in the `Chartist.Svg.animate`. You can also extend the list and use your own name in the `animate` function. Click the show code button to see the available bezier functions.
   *
   * @memberof Chartist.Svg
   */
  var easingCubicBeziers = {
    easeInSine: [0.47, 0, 0.745, 0.715],
    easeOutSine: [0.39, 0.575, 0.565, 1],
    easeInOutSine: [0.445, 0.05, 0.55, 0.95],
    easeInQuad: [0.55, 0.085, 0.68, 0.53],
    easeOutQuad: [0.25, 0.46, 0.45, 0.94],
    easeInOutQuad: [0.455, 0.03, 0.515, 0.955],
    easeInCubic: [0.55, 0.055, 0.675, 0.19],
    easeOutCubic: [0.215, 0.61, 0.355, 1],
    easeInOutCubic: [0.645, 0.045, 0.355, 1],
    easeInQuart: [0.895, 0.03, 0.685, 0.22],
    easeOutQuart: [0.165, 0.84, 0.44, 1],
    easeInOutQuart: [0.77, 0, 0.175, 1],
    easeInQuint: [0.755, 0.05, 0.855, 0.06],
    easeOutQuint: [0.23, 1, 0.32, 1],
    easeInOutQuint: [0.86, 0, 0.07, 1],
    easeInExpo: [0.95, 0.05, 0.795, 0.035],
    easeOutExpo: [0.19, 1, 0.22, 1],
    easeInOutExpo: [1, 0, 0, 1],
    easeInCirc: [0.6, 0.04, 0.98, 0.335],
    easeOutCirc: [0.075, 0.82, 0.165, 1],
    easeInOutCirc: [0.785, 0.135, 0.15, 0.86],
    easeInBack: [0.6, -0.28, 0.735, 0.045],
    easeOutBack: [0.175, 0.885, 0.32, 1.275],
    easeInOutBack: [0.68, -0.55, 0.265, 1.55]
  };

  Chartist.Svg.Easing = easingCubicBeziers;

  /**
   * This helper class is to wrap multiple `Chartist.Svg` elements into a list where you can call the `Chartist.Svg` functions on all elements in the list with one call. This is helpful when you'd like to perform calls with `Chartist.Svg` on multiple elements.
   * An instance of this class is also returned by `Chartist.Svg.querySelectorAll`.
   *
   * @memberof Chartist.Svg
   * @param {Array<Node>|NodeList} nodeList An Array of SVG DOM nodes or a SVG DOM NodeList (as returned by document.querySelectorAll)
   * @constructor
   */
  function SvgList(nodeList) {
    var list = this;

    this.svgElements = [];
    for(var i = 0; i < nodeList.length; i++) {
      this.svgElements.push(new Chartist.Svg(nodeList[i]));
    }

    // Add delegation methods for Chartist.Svg
    Object.keys(Chartist.Svg.prototype).filter(function(prototypeProperty) {
      return ['constructor',
          'parent',
          'querySelector',
          'querySelectorAll',
          'replace',
          'append',
          'classes',
          'height',
          'width'].indexOf(prototypeProperty) === -1;
    }).forEach(function(prototypeProperty) {
      list[prototypeProperty] = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        list.svgElements.forEach(function(element) {
          Chartist.Svg.prototype[prototypeProperty].apply(element, args);
        });
        return list;
      };
    });
  }

  Chartist.Svg.List = Chartist.Class.extend({
    constructor: SvgList
  });
}(window, document, Chartist));
;/**
 * Chartist SVG path module for SVG path description creation and modification.
 *
 * @module Chartist.Svg.Path
 */
/* global Chartist */
(function(window, document, Chartist) {
  'use strict';

  /**
   * Contains the descriptors of supported element types in a SVG path. Currently only move, line and curve are supported.
   *
   * @memberof Chartist.Svg.Path
   * @type {Object}
   */
  var elementDescriptions = {
    m: ['x', 'y'],
    l: ['x', 'y'],
    c: ['x1', 'y1', 'x2', 'y2', 'x', 'y'],
    a: ['rx', 'ry', 'xAr', 'lAf', 'sf', 'x', 'y']
  };

  /**
   * Default options for newly created SVG path objects.
   *
   * @memberof Chartist.Svg.Path
   * @type {Object}
   */
  var defaultOptions = {
    // The accuracy in digit count after the decimal point. This will be used to round numbers in the SVG path. If this option is set to false then no rounding will be performed.
    accuracy: 3
  };

  function element(command, params, pathElements, pos, relative, data) {
    var pathElement = Chartist.extend({
      command: relative ? command.toLowerCase() : command.toUpperCase()
    }, params, data ? { data: data } : {} );

    pathElements.splice(pos, 0, pathElement);
  }

  function forEachParam(pathElements, cb) {
    pathElements.forEach(function(pathElement, pathElementIndex) {
      elementDescriptions[pathElement.command.toLowerCase()].forEach(function(paramName, paramIndex) {
        cb(pathElement, paramName, pathElementIndex, paramIndex, pathElements);
      });
    });
  }

  /**
   * Used to construct a new path object.
   *
   * @memberof Chartist.Svg.Path
   * @param {Boolean} close If set to true then this path will be closed when stringified (with a Z at the end)
   * @param {Object} options Options object that overrides the default objects. See default options for more details.
   * @constructor
   */
  function SvgPath(close, options) {
    this.pathElements = [];
    this.pos = 0;
    this.close = close;
    this.options = Chartist.extend({}, defaultOptions, options);
  }

  /**
   * Gets or sets the current position (cursor) inside of the path. You can move around the cursor freely but limited to 0 or the count of existing elements. All modifications with element functions will insert new elements at the position of this cursor.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} [pos] If a number is passed then the cursor is set to this position in the path element array.
   * @return {Chartist.Svg.Path|Number} If the position parameter was passed then the return value will be the path object for easy call chaining. If no position parameter was passed then the current position is returned.
   */
  function position(pos) {
    if(pos !== undefined) {
      this.pos = Math.max(0, Math.min(this.pathElements.length, pos));
      return this;
    } else {
      return this.pos;
    }
  }

  /**
   * Removes elements from the path starting at the current position.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} count Number of path elements that should be removed from the current position.
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function remove(count) {
    this.pathElements.splice(this.pos, count);
    return this;
  }

  /**
   * Use this function to add a new move SVG path element.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} x The x coordinate for the move element.
   * @param {Number} y The y coordinate for the move element.
   * @param {Boolean} [relative] If set to true the move element will be created with relative coordinates (lowercase letter)
   * @param {*} [data] Any data that should be stored with the element object that will be accessible in pathElement
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function move(x, y, relative, data) {
    element('M', {
      x: +x,
      y: +y
    }, this.pathElements, this.pos++, relative, data);
    return this;
  }

  /**
   * Use this function to add a new line SVG path element.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} x The x coordinate for the line element.
   * @param {Number} y The y coordinate for the line element.
   * @param {Boolean} [relative] If set to true the line element will be created with relative coordinates (lowercase letter)
   * @param {*} [data] Any data that should be stored with the element object that will be accessible in pathElement
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function line(x, y, relative, data) {
    element('L', {
      x: +x,
      y: +y
    }, this.pathElements, this.pos++, relative, data);
    return this;
  }

  /**
   * Use this function to add a new curve SVG path element.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} x1 The x coordinate for the first control point of the bezier curve.
   * @param {Number} y1 The y coordinate for the first control point of the bezier curve.
   * @param {Number} x2 The x coordinate for the second control point of the bezier curve.
   * @param {Number} y2 The y coordinate for the second control point of the bezier curve.
   * @param {Number} x The x coordinate for the target point of the curve element.
   * @param {Number} y The y coordinate for the target point of the curve element.
   * @param {Boolean} [relative] If set to true the curve element will be created with relative coordinates (lowercase letter)
   * @param {*} [data] Any data that should be stored with the element object that will be accessible in pathElement
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function curve(x1, y1, x2, y2, x, y, relative, data) {
    element('C', {
      x1: +x1,
      y1: +y1,
      x2: +x2,
      y2: +y2,
      x: +x,
      y: +y
    }, this.pathElements, this.pos++, relative, data);
    return this;
  }

  /**
   * Use this function to add a new non-bezier curve SVG path element.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} rx The radius to be used for the x-axis of the arc.
   * @param {Number} ry The radius to be used for the y-axis of the arc.
   * @param {Number} xAr Defines the orientation of the arc
   * @param {Number} lAf Large arc flag
   * @param {Number} sf Sweep flag
   * @param {Number} x The x coordinate for the target point of the curve element.
   * @param {Number} y The y coordinate for the target point of the curve element.
   * @param {Boolean} [relative] If set to true the curve element will be created with relative coordinates (lowercase letter)
   * @param {*} [data] Any data that should be stored with the element object that will be accessible in pathElement
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function arc(rx, ry, xAr, lAf, sf, x, y, relative, data) {
    element('A', {
      rx: +rx,
      ry: +ry,
      xAr: +xAr,
      lAf: +lAf,
      sf: +sf,
      x: +x,
      y: +y
    }, this.pathElements, this.pos++, relative, data);
    return this;
  }

  /**
   * Parses an SVG path seen in the d attribute of path elements, and inserts the parsed elements into the existing path object at the current cursor position. Any closing path indicators (Z at the end of the path) will be ignored by the parser as this is provided by the close option in the options of the path object.
   *
   * @memberof Chartist.Svg.Path
   * @param {String} path Any SVG path that contains move (m), line (l) or curve (c) components.
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function parse(path) {
    // Parsing the SVG path string into an array of arrays [['M', '10', '10'], ['L', '100', '100']]
    var chunks = path.replace(/([A-Za-z])([0-9])/g, '$1 $2')
      .replace(/([0-9])([A-Za-z])/g, '$1 $2')
      .split(/[\s,]+/)
      .reduce(function(result, element) {
        if(element.match(/[A-Za-z]/)) {
          result.push([]);
        }

        result[result.length - 1].push(element);
        return result;
      }, []);

    // If this is a closed path we remove the Z at the end because this is determined by the close option
    if(chunks[chunks.length - 1][0].toUpperCase() === 'Z') {
      chunks.pop();
    }

    // Using svgPathElementDescriptions to map raw path arrays into objects that contain the command and the parameters
    // For example {command: 'M', x: '10', y: '10'}
    var elements = chunks.map(function(chunk) {
        var command = chunk.shift(),
          description = elementDescriptions[command.toLowerCase()];

        return Chartist.extend({
          command: command
        }, description.reduce(function(result, paramName, index) {
          result[paramName] = +chunk[index];
          return result;
        }, {}));
      });

    // Preparing a splice call with the elements array as var arg params and insert the parsed elements at the current position
    var spliceArgs = [this.pos, 0];
    Array.prototype.push.apply(spliceArgs, elements);
    Array.prototype.splice.apply(this.pathElements, spliceArgs);
    // Increase the internal position by the element count
    this.pos += elements.length;

    return this;
  }

  /**
   * This function renders to current SVG path object into a final SVG string that can be used in the d attribute of SVG path elements. It uses the accuracy option to round big decimals. If the close parameter was set in the constructor of this path object then a path closing Z will be appended to the output string.
   *
   * @memberof Chartist.Svg.Path
   * @return {String}
   */
  function stringify() {
    var accuracyMultiplier = Math.pow(10, this.options.accuracy);

    return this.pathElements.reduce(function(path, pathElement) {
        var params = elementDescriptions[pathElement.command.toLowerCase()].map(function(paramName) {
          return this.options.accuracy ?
            (Math.round(pathElement[paramName] * accuracyMultiplier) / accuracyMultiplier) :
            pathElement[paramName];
        }.bind(this));

        return path + pathElement.command + params.join(',');
      }.bind(this), '') + (this.close ? 'Z' : '');
  }

  /**
   * Scales all elements in the current SVG path object. There is an individual parameter for each coordinate. Scaling will also be done for control points of curves, affecting the given coordinate.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} x The number which will be used to scale the x, x1 and x2 of all path elements.
   * @param {Number} y The number which will be used to scale the y, y1 and y2 of all path elements.
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function scale(x, y) {
    forEachParam(this.pathElements, function(pathElement, paramName) {
      pathElement[paramName] *= paramName[0] === 'x' ? x : y;
    });
    return this;
  }

  /**
   * Translates all elements in the current SVG path object. The translation is relative and there is an individual parameter for each coordinate. Translation will also be done for control points of curves, affecting the given coordinate.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} x The number which will be used to translate the x, x1 and x2 of all path elements.
   * @param {Number} y The number which will be used to translate the y, y1 and y2 of all path elements.
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function translate(x, y) {
    forEachParam(this.pathElements, function(pathElement, paramName) {
      pathElement[paramName] += paramName[0] === 'x' ? x : y;
    });
    return this;
  }

  /**
   * This function will run over all existing path elements and then loop over their attributes. The callback function will be called for every path element attribute that exists in the current path.
   * The method signature of the callback function looks like this:
   * ```javascript
   * function(pathElement, paramName, pathElementIndex, paramIndex, pathElements)
   * ```
   * If something else than undefined is returned by the callback function, this value will be used to replace the old value. This allows you to build custom transformations of path objects that can't be achieved using the basic transformation functions scale and translate.
   *
   * @memberof Chartist.Svg.Path
   * @param {Function} transformFnc The callback function for the transformation. Check the signature in the function description.
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function transform(transformFnc) {
    forEachParam(this.pathElements, function(pathElement, paramName, pathElementIndex, paramIndex, pathElements) {
      var transformed = transformFnc(pathElement, paramName, pathElementIndex, paramIndex, pathElements);
      if(transformed || transformed === 0) {
        pathElement[paramName] = transformed;
      }
    });
    return this;
  }

  /**
   * This function clones a whole path object with all its properties. This is a deep clone and path element objects will also be cloned.
   *
   * @memberof Chartist.Svg.Path
   * @return {Chartist.Svg.Path}
   */
  function clone() {
    var c = new Chartist.Svg.Path(this.close);
    c.pos = this.pos;
    c.pathElements = this.pathElements.slice().map(function cloneElements(pathElement) {
      return Chartist.extend({}, pathElement);
    });
    c.options = Chartist.extend({}, this.options);
    return c;
  }

  /**
   * This static function on `Chartist.Svg.Path` is joining multiple paths together into one paths.
   *
   * @memberof Chartist.Svg.Path
   * @param {Array<Chartist.Svg.Path>} paths A list of paths to be joined together. The order is important.
   * @param {boolean} close If the newly created path should be a closed path
   * @param {Object} options Path options for the newly created path.
   * @return {Chartist.Svg.Path}
   */

  function join(paths, close, options) {
    var joinedPath = new Chartist.Svg.Path(close, options);
    for(var i = 0; i < paths.length; i++) {
      var path = paths[i];
      for(var j = 0; j < path.pathElements.length; j++) {
        joinedPath.pathElements.push(path.pathElements[j]);
      }
    }
    return joinedPath;
  }

  Chartist.Svg.Path = Chartist.Class.extend({
    constructor: SvgPath,
    position: position,
    remove: remove,
    move: move,
    line: line,
    curve: curve,
    arc: arc,
    scale: scale,
    translate: translate,
    transform: transform,
    parse: parse,
    stringify: stringify,
    clone: clone
  });

  Chartist.Svg.Path.elementDescriptions = elementDescriptions;
  Chartist.Svg.Path.join = join;
}(window, document, Chartist));
;/**
 * Axis base class used to implement different axis types
 *
 * @module Chartist.Axis
 */
/* global Chartist */
(function (window, document, Chartist) {
  'use strict';

  var axisUnits = {
    x: {
      pos: 'x',
      len: 'width',
      dir: 'horizontal',
      rectStart: 'x1',
      rectEnd: 'x2',
      rectOffset: 'y2'
    },
    y: {
      pos: 'y',
      len: 'height',
      dir: 'vertical',
      rectStart: 'y2',
      rectEnd: 'y1',
      rectOffset: 'x1'
    }
  };

  function Axis(units, chartRect, options) {
    this.units = units;
    this.counterUnits = units === axisUnits.x ? axisUnits.y : axisUnits.x;
    this.chartRect = chartRect;
    this.axisLength = chartRect[units.rectEnd] - chartRect[units.rectStart];
    this.gridOffset = chartRect[units.rectOffset];
    this.options = options;
  }

  Chartist.Axis = Chartist.Class.extend({
    constructor: Axis,
    projectValue: function(value, index, data) {
      throw new Error('Base axis can\'t be instantiated!');
    }
  });

  Chartist.Axis.units = axisUnits;

}(window, document, Chartist));
;/**
 * The linear scale axis uses standard linear scale projection of values along an axis.
 *
 * @module Chartist.LinearScaleAxis
 */
/* global Chartist */
(function (window, document, Chartist) {
  'use strict';

  function LinearScaleAxis(axisUnit, chartRect, options) {
    Chartist.LinearScaleAxis.super.constructor.call(this,
      axisUnit,
      chartRect,
      options);

    this.bounds = Chartist.getBounds(this.axisLength, options.highLow, options.scaleMinSpace, options.referenceValue, options.onlyInteger);
  }

  function projectValue(value) {
    return {
      pos: this.axisLength * (value - this.bounds.min) / this.bounds.range,
      len: Chartist.projectLength(this.axisLength, this.bounds.step, this.bounds)
    };
  }

  Chartist.LinearScaleAxis = Chartist.Axis.extend({
    constructor: LinearScaleAxis,
    projectValue: projectValue
  });

}(window, document, Chartist));
;/**
 * Step axis for step based charts like bar chart or step based line chart
 *
 * @module Chartist.StepAxis
 */
/* global Chartist */
(function (window, document, Chartist) {
  'use strict';

  function StepAxis(axisUnit, chartRect, options) {
    Chartist.StepAxis.super.constructor.call(this,
      axisUnit,
      chartRect,
      options);

    this.stepLength = this.axisLength / (options.stepCount - (options.stretch ? 1 : 0));
  }

  function projectValue(value, index) {
    return {
      pos: this.stepLength * index,
      len: this.stepLength
    };
  }

  Chartist.StepAxis = Chartist.Axis.extend({
    constructor: StepAxis,
    projectValue: projectValue
  });

}(window, document, Chartist));
;/**
 * The Chartist line chart can be used to draw Line or Scatter charts. If used in the browser you can access the global `Chartist` namespace where you find the `Line` function as a main entry point.
 *
 * For examples on how to use the line chart please check the examples of the `Chartist.Line` method.
 *
 * @module Chartist.Line
 */
/* global Chartist */
(function(window, document, Chartist){
  'use strict';

  /**
   * Default options in line charts. Expand the code view to see a detailed list of options with comments.
   *
   * @memberof Chartist.Line
   */
  var defaultOptions = {
    // Options for X-Axis
    axisX: {
      // The offset of the labels to the chart area
      offset: 30,
      // Position where labels are placed. Can be set to `start` or `end` where `start` is equivalent to left or top on vertical axis and `end` is equivalent to right or bottom on horizontal axis.
      position: 'end',
      // Allows you to correct label positioning on this axis by positive or negative x and y offset.
      labelOffset: {
        x: 0,
        y: 0
      },
      // If labels should be shown or not
      showLabel: true,
      // If the axis grid should be drawn or not
      showGrid: true,
      // Interpolation function that allows you to intercept the value from the axis label
      labelInterpolationFnc: Chartist.noop,
      // Use only integer values (whole numbers) for the scale steps
      onlyInteger: false
    },
    // Options for Y-Axis
    axisY: {
      // The offset of the labels to the chart area
      offset: 40,
      // Position where labels are placed. Can be set to `start` or `end` where `start` is equivalent to left or top on vertical axis and `end` is equivalent to right or bottom on horizontal axis.
      position: 'start',
      // Allows you to correct label positioning on this axis by positive or negative x and y offset.
      labelOffset: {
        x: 0,
        y: 0
      },
      // If labels should be shown or not
      showLabel: true,
      // If the axis grid should be drawn or not
      showGrid: true,
      // Interpolation function that allows you to intercept the value from the axis label
      labelInterpolationFnc: Chartist.noop,
      // This value specifies the minimum height in pixel of the scale steps
      scaleMinSpace: 20,
      // Use only integer values (whole numbers) for the scale steps
      onlyInteger: false
    },
    // Specify a fixed width for the chart as a string (i.e. '100px' or '50%')
    width: undefined,
    // Specify a fixed height for the chart as a string (i.e. '100px' or '50%')
    height: undefined,
    // If the line should be drawn or not
    showLine: true,
    // If dots should be drawn or not
    showPoint: true,
    // If the line chart should draw an area
    showArea: false,
    // The base for the area chart that will be used to close the area shape (is normally 0)
    areaBase: 0,
    // Specify if the lines should be smoothed. This value can be true or false where true will result in smoothing using the default smoothing interpolation function Chartist.Interpolation.cardinal and false results in Chartist.Interpolation.none. You can also choose other smoothing / interpolation functions available in the Chartist.Interpolation module, or write your own interpolation function. Check the examples for a brief description.
    lineSmooth: true,
    // Overriding the natural low of the chart allows you to zoom in or limit the charts lowest displayed value
    low: undefined,
    // Overriding the natural high of the chart allows you to zoom in or limit the charts highest displayed value
    high: undefined,
    // Padding of the chart drawing area to the container element and labels as a number or padding object {top: 5, right: 5, bottom: 5, left: 5}
    chartPadding: {
      top: 15,
      right: 15,
      bottom: 5,
      left: 10
    },
    // When set to true, the last grid line on the x-axis is not drawn and the chart elements will expand to the full available width of the chart. For the last label to be drawn correctly you might need to add chart padding or offset the last label with a draw event handler.
    fullWidth: false,
    // If true the whole data is reversed including labels, the series order as well as the whole series data arrays.
    reverseData: false,
    // Override the class names that get used to generate the SVG structure of the chart
    classNames: {
      chart: 'ct-chart-line',
      label: 'ct-label',
      labelGroup: 'ct-labels',
      series: 'ct-series',
      line: 'ct-line',
      point: 'ct-point',
      area: 'ct-area',
      grid: 'ct-grid',
      gridGroup: 'ct-grids',
      vertical: 'ct-vertical',
      horizontal: 'ct-horizontal',
      start: 'ct-start',
      end: 'ct-end'
    }
  };

  /**
   * Creates a new chart
   *
   */
  function createChart(options) {
    var seriesGroups = [];
    var normalizedData = Chartist.normalizeDataArray(Chartist.getDataArray(this.data, options.reverseData), this.data.labels.length);

    // Create new svg object
    this.svg = Chartist.createSvg(this.container, options.width, options.height, options.classNames.chart);

    var chartRect = Chartist.createChartRect(this.svg, options, defaultOptions.padding);
    var highLow = Chartist.getHighLow(normalizedData, options);

    var axisX = new Chartist.StepAxis(Chartist.Axis.units.x, chartRect, {
      stepCount: this.data.labels.length,
      stretch: options.fullWidth
    });

    var axisY = new Chartist.LinearScaleAxis(Chartist.Axis.units.y, chartRect, {
      highLow: highLow,
      scaleMinSpace: options.axisY.scaleMinSpace,
      onlyInteger: options.axisY.onlyInteger
    });

    // Start drawing
    var labelGroup = this.svg.elem('g').addClass(options.classNames.labelGroup),
      gridGroup = this.svg.elem('g').addClass(options.classNames.gridGroup);

    Chartist.createAxis(
      axisX,
      this.data.labels,
      chartRect,
      gridGroup,
      labelGroup,
      this.supportsForeignObject,
      options,
      this.eventEmitter
    );

    Chartist.createAxis(
      axisY,
      axisY.bounds.values,
      chartRect,
      gridGroup,
      labelGroup,
      this.supportsForeignObject,
      options,
      this.eventEmitter
    );

    // Draw the series
    this.data.series.forEach(function(series, seriesIndex) {
      seriesGroups[seriesIndex] = this.svg.elem('g');

      // Write attributes to series group element. If series name or meta is undefined the attributes will not be written
      seriesGroups[seriesIndex].attr({
        'series-name': series.name,
        'meta': Chartist.serialize(series.meta)
      }, Chartist.xmlNs.uri);

      // Use series class from series data or if not set generate one
      seriesGroups[seriesIndex].addClass([
        options.classNames.series,
        (series.className || options.classNames.series + '-' + Chartist.alphaNumerate(seriesIndex))
      ].join(' '));

      var pathCoordinates = [],
        pathData = [];

      normalizedData[seriesIndex].forEach(function(value, valueIndex) {
        var p = {
          x: chartRect.x1 + axisX.projectValue(value, valueIndex, normalizedData[seriesIndex]).pos,
          y: chartRect.y1 - axisY.projectValue(value, valueIndex, normalizedData[seriesIndex]).pos
        };
        pathCoordinates.push(p.x, p.y);
        pathData.push({
          value: value,
          valueIndex: valueIndex,
          meta: Chartist.getMetaData(series, valueIndex)
        });
      }.bind(this));

      var seriesOptions = {
        lineSmooth: Chartist.getSeriesOption(series, options, 'lineSmooth'),
        showPoint: Chartist.getSeriesOption(series, options, 'showPoint'),
        showLine: Chartist.getSeriesOption(series, options, 'showLine'),
        showArea: Chartist.getSeriesOption(series, options, 'showArea')
      };

      var smoothing = typeof seriesOptions.lineSmooth === 'function' ?
        seriesOptions.lineSmooth : (seriesOptions.lineSmooth ? Chartist.Interpolation.cardinal() : Chartist.Interpolation.none());
      // Interpolating path where pathData will be used to annotate each path element so we can trace back the original
      // index, value and meta data
      var path = smoothing(pathCoordinates, pathData);

      // If we should show points we need to create them now to avoid secondary loop
      // Points are drawn from the pathElements returned by the interpolation function
      // Small offset for Firefox to render squares correctly
      if (seriesOptions.showPoint) {

        path.pathElements.forEach(function(pathElement) {
          var point = seriesGroups[seriesIndex].elem('line', {
            x1: pathElement.x,
            y1: pathElement.y,
            x2: pathElement.x + 0.01,
            y2: pathElement.y
          }, options.classNames.point).attr({
            'value': pathElement.data.value,
            'meta': pathElement.data.meta
          }, Chartist.xmlNs.uri);

          this.eventEmitter.emit('draw', {
            type: 'point',
            value: pathElement.data.value,
            index: pathElement.data.valueIndex,
            meta: pathElement.data.meta,
            series: series,
            seriesIndex: seriesIndex,
            group: seriesGroups[seriesIndex],
            element: point,
            x: pathElement.x,
            y: pathElement.y
          });
        }.bind(this));
      }

      if(seriesOptions.showLine) {
        var line = seriesGroups[seriesIndex].elem('path', {
          d: path.stringify()
        }, options.classNames.line, true).attr({
          'values': normalizedData[seriesIndex]
        }, Chartist.xmlNs.uri);

        this.eventEmitter.emit('draw', {
          type: 'line',
          values: normalizedData[seriesIndex],
          path: path.clone(),
          chartRect: chartRect,
          index: seriesIndex,
          series: series,
          seriesIndex: seriesIndex,
          group: seriesGroups[seriesIndex],
          element: line
        });
      }

      if(seriesOptions.showArea) {
        // If areaBase is outside the chart area (< low or > high) we need to set it respectively so that
        // the area is not drawn outside the chart area.
        var areaBase = Math.max(Math.min(options.areaBase, axisY.bounds.max), axisY.bounds.min);

        // We project the areaBase value into screen coordinates
        var areaBaseProjected = chartRect.y1 - axisY.projectValue(areaBase).pos;

        // Clone original path and splice our new area path to add the missing path elements to close the area shape
        var areaPath = path.clone();
        // Modify line path and add missing elements for area
        areaPath.position(0)
          .remove(1)
          .move(chartRect.x1, areaBaseProjected)
          .line(pathCoordinates[0], pathCoordinates[1])
          .position(areaPath.pathElements.length)
          .line(pathCoordinates[pathCoordinates.length - 2], areaBaseProjected);

        // Create the new path for the area shape with the area class from the options
        var area = seriesGroups[seriesIndex].elem('path', {
          d: areaPath.stringify()
        }, options.classNames.area, true).attr({
          'values': normalizedData[seriesIndex]
        }, Chartist.xmlNs.uri);

        this.eventEmitter.emit('draw', {
          type: 'area',
          values: normalizedData[seriesIndex],
          path: areaPath.clone(),
          series: series,
          seriesIndex: seriesIndex,
          chartRect: chartRect,
          index: seriesIndex,
          group: seriesGroups[seriesIndex],
          element: area
        });
      }
    }.bind(this));

    this.eventEmitter.emit('created', {
      bounds: axisY.bounds,
      chartRect: chartRect,
      axisX: axisX,
      axisY: axisY,
      svg: this.svg,
      options: options
    });
  }

  /**
   * This method creates a new line chart.
   *
   * @memberof Chartist.Line
   * @param {String|Node} query A selector query string or directly a DOM element
   * @param {Object} data The data object that needs to consist of a labels and a series array
   * @param {Object} [options] The options object with options that override the default options. Check the examples for a detailed list.
   * @param {Array} [responsiveOptions] Specify an array of responsive option arrays which are a media query and options object pair => [[mediaQueryString, optionsObject],[more...]]
   * @return {Object} An object which exposes the API for the created chart
   *
   * @example
   * // Create a simple line chart
   * var data = {
   *   // A labels array that can contain any sort of values
   *   labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
   *   // Our series array that contains series objects or in this case series data arrays
   *   series: [
   *     [5, 2, 4, 2, 0]
   *   ]
   * };
   *
   * // As options we currently only set a static size of 300x200 px
   * var options = {
   *   width: '300px',
   *   height: '200px'
   * };
   *
   * // In the global name space Chartist we call the Line function to initialize a line chart. As a first parameter we pass in a selector where we would like to get our chart created. Second parameter is the actual data object and as a third parameter we pass in our options
   * new Chartist.Line('.ct-chart', data, options);
   *
   * @example
   * // Use specific interpolation function with configuration from the Chartist.Interpolation module
   *
   * var chart = new Chartist.Line('.ct-chart', {
   *   labels: [1, 2, 3, 4, 5],
   *   series: [
   *     [1, 1, 8, 1, 7]
   *   ]
   * }, {
   *   lineSmooth: Chartist.Interpolation.cardinal({
   *     tension: 0.2
   *   })
   * });
   *
   * @example
   * // Create a line chart with responsive options
   *
   * var data = {
   *   // A labels array that can contain any sort of values
   *   labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
   *   // Our series array that contains series objects or in this case series data arrays
   *   series: [
   *     [5, 2, 4, 2, 0]
   *   ]
   * };
   *
   * // In adition to the regular options we specify responsive option overrides that will override the default configutation based on the matching media queries.
   * var responsiveOptions = [
   *   ['screen and (min-width: 641px) and (max-width: 1024px)', {
   *     showPoint: false,
   *     axisX: {
   *       labelInterpolationFnc: function(value) {
   *         // Will return Mon, Tue, Wed etc. on medium screens
   *         return value.slice(0, 3);
   *       }
   *     }
   *   }],
   *   ['screen and (max-width: 640px)', {
   *     showLine: false,
   *     axisX: {
   *       labelInterpolationFnc: function(value) {
   *         // Will return M, T, W etc. on small screens
   *         return value[0];
   *       }
   *     }
   *   }]
   * ];
   *
   * new Chartist.Line('.ct-chart', data, null, responsiveOptions);
   *
   */
  function Line(query, data, options, responsiveOptions) {
    Chartist.Line.super.constructor.call(this,
      query,
      data,
      defaultOptions,
      Chartist.extend({}, defaultOptions, options),
      responsiveOptions);
  }

  // Creating line chart type in Chartist namespace
  Chartist.Line = Chartist.Base.extend({
    constructor: Line,
    createChart: createChart
  });

}(window, document, Chartist));
;/**
 * The bar chart module of Chartist that can be used to draw unipolar or bipolar bar and grouped bar charts.
 *
 * @module Chartist.Bar
 */
/* global Chartist */
(function(window, document, Chartist){
  'use strict';

  /**
   * Default options in bar charts. Expand the code view to see a detailed list of options with comments.
   *
   * @memberof Chartist.Bar
   */
  var defaultOptions = {
    // Options for X-Axis
    axisX: {
      // The offset of the chart drawing area to the border of the container
      offset: 30,
      // Position where labels are placed. Can be set to `start` or `end` where `start` is equivalent to left or top on vertical axis and `end` is equivalent to right or bottom on horizontal axis.
      position: 'end',
      // Allows you to correct label positioning on this axis by positive or negative x and y offset.
      labelOffset: {
        x: 0,
        y: 0
      },
      // If labels should be shown or not
      showLabel: true,
      // If the axis grid should be drawn or not
      showGrid: true,
      // Interpolation function that allows you to intercept the value from the axis label
      labelInterpolationFnc: Chartist.noop,
      // This value specifies the minimum width in pixel of the scale steps
      scaleMinSpace: 30,
      // Use only integer values (whole numbers) for the scale steps
      onlyInteger: false
    },
    // Options for Y-Axis
    axisY: {
      // The offset of the chart drawing area to the border of the container
      offset: 40,
      // Position where labels are placed. Can be set to `start` or `end` where `start` is equivalent to left or top on vertical axis and `end` is equivalent to right or bottom on horizontal axis.
      position: 'start',
      // Allows you to correct label positioning on this axis by positive or negative x and y offset.
      labelOffset: {
        x: 0,
        y: 0
      },
      // If labels should be shown or not
      showLabel: true,
      // If the axis grid should be drawn or not
      showGrid: true,
      // Interpolation function that allows you to intercept the value from the axis label
      labelInterpolationFnc: Chartist.noop,
      // This value specifies the minimum height in pixel of the scale steps
      scaleMinSpace: 20,
      // Use only integer values (whole numbers) for the scale steps
      onlyInteger: false
    },
    // Specify a fixed width for the chart as a string (i.e. '100px' or '50%')
    width: undefined,
    // Specify a fixed height for the chart as a string (i.e. '100px' or '50%')
    height: undefined,
    // Overriding the natural high of the chart allows you to zoom in or limit the charts highest displayed value
    high: undefined,
    // Overriding the natural low of the chart allows you to zoom in or limit the charts lowest displayed value
    low: undefined,
    // Use only integer values (whole numbers) for the scale steps
    onlyInteger: false,
    // Padding of the chart drawing area to the container element and labels as a number or padding object {top: 5, right: 5, bottom: 5, left: 5}
    chartPadding: {
      top: 15,
      right: 15,
      bottom: 5,
      left: 10
    },
    // Specify the distance in pixel of bars in a group
    seriesBarDistance: 15,
    // If set to true this property will cause the series bars to be stacked and form a total for each series point. This will also influence the y-axis and the overall bounds of the chart. In stacked mode the seriesBarDistance property will have no effect.
    stackBars: false,
    // Inverts the axes of the bar chart in order to draw a horizontal bar chart. Be aware that you also need to invert your axis settings as the Y Axis will now display the labels and the X Axis the values.
    horizontalBars: false,
    // If set to true then each bar will represent a series and the data array is expected to be a one dimensional array of data values rather than a series array of series. This is useful if the bar chart should represent a profile rather than some data over time.
    distributeSeries: false,
    // If true the whole data is reversed including labels, the series order as well as the whole series data arrays.
    reverseData: false,
    // Override the class names that get used to generate the SVG structure of the chart
    classNames: {
      chart: 'ct-chart-bar',
      horizontalBars: 'ct-horizontal-bars',
      label: 'ct-label',
      labelGroup: 'ct-labels',
      series: 'ct-series',
      bar: 'ct-bar',
      grid: 'ct-grid',
      gridGroup: 'ct-grids',
      vertical: 'ct-vertical',
      horizontal: 'ct-horizontal',
      start: 'ct-start',
      end: 'ct-end'
    }
  };

  /**
   * Creates a new chart
   *
   */
  function createChart(options) {
    var seriesGroups = [];
    var data = Chartist.getDataArray(this.data, options.reverseData);
    var normalizedData = options.distributeSeries ? data.map(function(value) {
      return [value];
    }) : Chartist.normalizeDataArray(data, this.data.labels.length);
    var highLow;

    // Create new svg element
    this.svg = Chartist.createSvg(
      this.container,
      options.width,
      options.height,
      options.classNames.chart + (options.horizontalBars ? ' ' + options.classNames.horizontalBars : '')
    );

    if(options.stackBars) {
      // If stacked bars we need to calculate the high low from stacked values from each series
      var serialSums = Chartist.serialMap(normalizedData, function serialSums() {
        return Array.prototype.slice.call(arguments).reduce(Chartist.sum, 0);
      });

      highLow = Chartist.getHighLow([serialSums], options);
    } else {
      highLow = Chartist.getHighLow(normalizedData, options);
    }
    // Overrides of high / low from settings
    highLow.high = +options.high || (options.high === 0 ? 0 : highLow.high);
    highLow.low = +options.low || (options.low === 0 ? 0 : highLow.low);

    var chartRect = Chartist.createChartRect(this.svg, options, defaultOptions.padding);

    var valueAxis,
      labelAxisStepCount,
      labelAxis,
      axisX,
      axisY;

    // We need to set step count based on some options combinations
    if(options.distributeSeries && !options.stackBars) {
      // If distributed series are enabled but stacked bars aren't, we need to use the one dimensional series array
      // length as step count for the label axis
      labelAxisStepCount = normalizedData.length;
    } else if(options.distributeSeries && options.stackBars) {
      // If distributed series are enabled and bars need to be stacked, we'll only have one bar and therefore set step
      // count to 1
      labelAxisStepCount = 1;
    } else {
      // If we are drawing a regular bar chart with two dimensional series data, we just use the labels array length
      // as the bars are normalized
      labelAxisStepCount = this.data.labels.length;
    }

    // Set labelAxis and valueAxis based on the horizontalBars setting. This setting will flip the axes if necessary.
    if(options.horizontalBars) {
      labelAxis = axisY = new Chartist.StepAxis(Chartist.Axis.units.y, chartRect, {
        stepCount: labelAxisStepCount
      });

      valueAxis = axisX = new Chartist.LinearScaleAxis(Chartist.Axis.units.x, chartRect, {
        highLow: highLow,
        scaleMinSpace: options.axisX.scaleMinSpace,
        onlyInteger: options.axisX.onlyInteger,
        referenceValue: 0
      });
    } else {
      labelAxis = axisX = new Chartist.StepAxis(Chartist.Axis.units.x, chartRect, {
        stepCount: labelAxisStepCount
      });

      valueAxis = axisY = new Chartist.LinearScaleAxis(Chartist.Axis.units.y, chartRect, {
        highLow: highLow,
        scaleMinSpace: options.axisY.scaleMinSpace,
        onlyInteger: options.axisY.onlyInteger,
        referenceValue: 0
      });
    }

    // Start drawing
    var labelGroup = this.svg.elem('g').addClass(options.classNames.labelGroup),
      gridGroup = this.svg.elem('g').addClass(options.classNames.gridGroup),
      // Projected 0 point
      zeroPoint = options.horizontalBars ? (chartRect.x1 + valueAxis.projectValue(0).pos) : (chartRect.y1 - valueAxis.projectValue(0).pos),
      // Used to track the screen coordinates of stacked bars
      stackedBarValues = [];

    Chartist.createAxis(
      labelAxis,
      this.data.labels,
      chartRect,
      gridGroup,
      labelGroup,
      this.supportsForeignObject,
      options,
      this.eventEmitter
    );

    Chartist.createAxis(
      valueAxis,
      valueAxis.bounds.values,
      chartRect,
      gridGroup,
      labelGroup,
      this.supportsForeignObject,
      options,
      this.eventEmitter
    );

    // Draw the series
    this.data.series.forEach(function(series, seriesIndex) {
      // Calculating bi-polar value of index for seriesOffset. For i = 0..4 biPol will be -1.5, -0.5, 0.5, 1.5 etc.
      var biPol = seriesIndex - (this.data.series.length - 1) / 2,
      // Half of the period width between vertical grid lines used to position bars
        periodHalfLength;

      // We need to set periodHalfLength based on some options combinations
      if(options.distributeSeries && !options.stackBars) {
        // If distributed series are enabled but stacked bars aren't, we need to use the length of the normaizedData array
        // which is the series count and divide by 2
        periodHalfLength = labelAxis.axisLength / normalizedData.length / 2;
      } else if(options.distributeSeries && options.stackBars) {
        // If distributed series and stacked bars are enabled we'll only get one bar so we should just divide the axis
        // length by 2
        periodHalfLength = labelAxis.axisLength / 2;
      } else {
        // On regular bar charts we should just use the series length
        periodHalfLength = labelAxis.axisLength / normalizedData[seriesIndex].length / 2;
      }

      seriesGroups[seriesIndex] = this.svg.elem('g');

      // Write attributes to series group element. If series name or meta is undefined the attributes will not be written
      seriesGroups[seriesIndex].attr({
        'series-name': series.name,
        'meta': Chartist.serialize(series.meta)
      }, Chartist.xmlNs.uri);

      // Use series class from series data or if not set generate one
      seriesGroups[seriesIndex].addClass([
        options.classNames.series,
        (series.className || options.classNames.series + '-' + Chartist.alphaNumerate(seriesIndex))
      ].join(' '));

      normalizedData[seriesIndex].forEach(function(value, valueIndex) {
        var projected,
          bar,
          previousStack,
          labelAxisValueIndex;

        // We need to set labelAxisValueIndex based on some options combinations
        if(options.distributeSeries && !options.stackBars) {
          // If distributed series are enabled but stacked bars aren't, we can use the seriesIndex for later projection
          // on the step axis for label positioning
          labelAxisValueIndex = seriesIndex;
        } else if(options.distributeSeries && options.stackBars) {
          // If distributed series and stacked bars are enabled, we will only get one bar and therefore always use
          // 0 for projection on the label step axis
          labelAxisValueIndex = 0;
        } else {
          // On regular bar charts we just use the value index to project on the label step axis
          labelAxisValueIndex = valueIndex;
        }

        // We need to transform coordinates differently based on the chart layout
        if(options.horizontalBars) {
          projected = {
            x: chartRect.x1 + valueAxis.projectValue(value, valueIndex, normalizedData[seriesIndex]).pos,
            y: chartRect.y1 - labelAxis.projectValue(value, labelAxisValueIndex, normalizedData[seriesIndex]).pos
          };
        } else {
          projected = {
            x: chartRect.x1 + labelAxis.projectValue(value, labelAxisValueIndex, normalizedData[seriesIndex]).pos,
            y: chartRect.y1 - valueAxis.projectValue(value, valueIndex, normalizedData[seriesIndex]).pos
          }
        }

        // Offset to center bar between grid lines
        projected[labelAxis.units.pos] += periodHalfLength * (options.horizontalBars ? -1 : 1);
        // Using bi-polar offset for multiple series if no stacked bars or series distribution is used
        projected[labelAxis.units.pos] += (options.stackBars || options.distributeSeries) ? 0 : biPol * options.seriesBarDistance * (options.horizontalBars ? -1 : 1);

        // Enter value in stacked bar values used to remember previous screen value for stacking up bars
        previousStack = stackedBarValues[valueIndex] || zeroPoint;
        stackedBarValues[valueIndex] = previousStack - (zeroPoint - projected[labelAxis.counterUnits.pos]);

        var positions = {};
        positions[labelAxis.units.pos + '1'] = projected[labelAxis.units.pos];
        positions[labelAxis.units.pos + '2'] = projected[labelAxis.units.pos];
        // If bars are stacked we use the stackedBarValues reference and otherwise base all bars off the zero line
        positions[labelAxis.counterUnits.pos + '1'] = options.stackBars ? previousStack : zeroPoint;
        positions[labelAxis.counterUnits.pos + '2'] = options.stackBars ? stackedBarValues[valueIndex] : projected[labelAxis.counterUnits.pos];

        bar = seriesGroups[seriesIndex].elem('line', positions, options.classNames.bar).attr({
          'value': value,
          'meta': Chartist.getMetaData(series, valueIndex)
        }, Chartist.xmlNs.uri);

        this.eventEmitter.emit('draw', Chartist.extend({
          type: 'bar',
          value: value,
          index: valueIndex,
          meta: Chartist.getMetaData(series, valueIndex),
          series: series,
          seriesIndex: seriesIndex,
          chartRect: chartRect,
          group: seriesGroups[seriesIndex],
          element: bar
        }, positions));
      }.bind(this));
    }.bind(this));

    this.eventEmitter.emit('created', {
      bounds: valueAxis.bounds,
      chartRect: chartRect,
      axisX: axisX,
      axisY: axisY,
      svg: this.svg,
      options: options
    });
  }

  /**
   * This method creates a new bar chart and returns API object that you can use for later changes.
   *
   * @memberof Chartist.Bar
   * @param {String|Node} query A selector query string or directly a DOM element
   * @param {Object} data The data object that needs to consist of a labels and a series array
   * @param {Object} [options] The options object with options that override the default options. Check the examples for a detailed list.
   * @param {Array} [responsiveOptions] Specify an array of responsive option arrays which are a media query and options object pair => [[mediaQueryString, optionsObject],[more...]]
   * @return {Object} An object which exposes the API for the created chart
   *
   * @example
   * // Create a simple bar chart
   * var data = {
   *   labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
   *   series: [
   *     [5, 2, 4, 2, 0]
   *   ]
   * };
   *
   * // In the global name space Chartist we call the Bar function to initialize a bar chart. As a first parameter we pass in a selector where we would like to get our chart created and as a second parameter we pass our data object.
   * new Chartist.Bar('.ct-chart', data);
   *
   * @example
   * // This example creates a bipolar grouped bar chart where the boundaries are limitted to -10 and 10
   * new Chartist.Bar('.ct-chart', {
   *   labels: [1, 2, 3, 4, 5, 6, 7],
   *   series: [
   *     [1, 3, 2, -5, -3, 1, -6],
   *     [-5, -2, -4, -1, 2, -3, 1]
   *   ]
   * }, {
   *   seriesBarDistance: 12,
   *   low: -10,
   *   high: 10
   * });
   *
   */
  function Bar(query, data, options, responsiveOptions) {
    Chartist.Bar.super.constructor.call(this,
      query,
      data,
      defaultOptions,
      Chartist.extend({}, defaultOptions, options),
      responsiveOptions);
  }

  // Creating bar chart type in Chartist namespace
  Chartist.Bar = Chartist.Base.extend({
    constructor: Bar,
    createChart: createChart
  });

}(window, document, Chartist));
;/**
 * The pie chart module of Chartist that can be used to draw pie, donut or gauge charts
 *
 * @module Chartist.Pie
 */
/* global Chartist */
(function(window, document, Chartist) {
  'use strict';

  /**
   * Default options in line charts. Expand the code view to see a detailed list of options with comments.
   *
   * @memberof Chartist.Pie
   */
  var defaultOptions = {
    // Specify a fixed width for the chart as a string (i.e. '100px' or '50%')
    width: undefined,
    // Specify a fixed height for the chart as a string (i.e. '100px' or '50%')
    height: undefined,
    // Padding of the chart drawing area to the container element and labels as a number or padding object {top: 5, right: 5, bottom: 5, left: 5}
    chartPadding: 5,
    // Override the class names that are used to generate the SVG structure of the chart
    classNames: {
      chart: 'ct-chart-pie',
      series: 'ct-series',
      slice: 'ct-slice',
      donut: 'ct-donut',
      label: 'ct-label'
    },
    // The start angle of the pie chart in degrees where 0 points north. A higher value offsets the start angle clockwise.
    startAngle: 0,
    // An optional total you can specify. By specifying a total value, the sum of the values in the series must be this total in order to draw a full pie. You can use this parameter to draw only parts of a pie or gauge charts.
    total: undefined,
    // If specified the donut CSS classes will be used and strokes will be drawn instead of pie slices.
    donut: false,
    // Specify the donut stroke width, currently done in javascript for convenience. May move to CSS styles in the future.
    donutWidth: 60,
    // If a label should be shown or not
    showLabel: true,
    // Label position offset from the standard position which is half distance of the radius. This value can be either positive or negative. Positive values will position the label away from the center.
    labelOffset: 0,
    // An interpolation function for the label value
    labelInterpolationFnc: Chartist.noop,
    // Label direction can be 'neutral', 'explode' or 'implode'. The labels anchor will be positioned based on those settings as well as the fact if the labels are on the right or left side of the center of the chart. Usually explode is useful when labels are positioned far away from the center.
    labelDirection: 'neutral',
    // If true the whole data is reversed including labels, the series order as well as the whole series data arrays.
    reverseData: false
  };

  /**
   * Determines SVG anchor position based on direction and center parameter
   *
   * @param center
   * @param label
   * @param direction
   * @return {string}
   */
  function determineAnchorPosition(center, label, direction) {
    var toTheRight = label.x > center.x;

    if(toTheRight && direction === 'explode' ||
      !toTheRight && direction === 'implode') {
      return 'start';
    } else if(toTheRight && direction === 'implode' ||
      !toTheRight && direction === 'explode') {
      return 'end';
    } else {
      return 'middle';
    }
  }

  /**
   * Creates the pie chart
   *
   * @param options
   */
  function createChart(options) {
    var seriesGroups = [],
      chartRect,
      radius,
      labelRadius,
      totalDataSum,
      startAngle = options.startAngle,
      dataArray = Chartist.getDataArray(this.data, options.reverseData);

    // Create SVG.js draw
    this.svg = Chartist.createSvg(this.container, options.width, options.height, options.classNames.chart);
    // Calculate charting rect
    chartRect = Chartist.createChartRect(this.svg, options, defaultOptions.padding);
    // Get biggest circle radius possible within chartRect
    radius = Math.min(chartRect.width() / 2, chartRect.height() / 2);
    // Calculate total of all series to get reference value or use total reference from optional options
    totalDataSum = options.total || dataArray.reduce(function(previousValue, currentValue) {
      return previousValue + currentValue;
    }, 0);

    // If this is a donut chart we need to adjust our radius to enable strokes to be drawn inside
    // Unfortunately this is not possible with the current SVG Spec
    // See this proposal for more details: http://lists.w3.org/Archives/Public/www-svg/2003Oct/0000.html
    radius -= options.donut ? options.donutWidth / 2  : 0;

    // If a donut chart then the label position is at the radius, if regular pie chart it's half of the radius
    // see https://github.com/gionkunz/chartist-js/issues/21
    labelRadius = options.donut ? radius : radius / 2;
    // Add the offset to the labelRadius where a negative offset means closed to the center of the chart
    labelRadius += options.labelOffset;

    // Calculate end angle based on total sum and current data value and offset with padding
    var center = {
      x: chartRect.x1 + chartRect.width() / 2,
      y: chartRect.y2 + chartRect.height() / 2
    };

    // Check if there is only one non-zero value in the series array.
    var hasSingleValInSeries = this.data.series.filter(function(val) {
      return val.hasOwnProperty('value') ? val.value !== 0 : val !== 0;
    }).length === 1;

    // Draw the series
    // initialize series groups
    for (var i = 0; i < this.data.series.length; i++) {
      var series = this.data.series[i];
      seriesGroups[i] = this.svg.elem('g', null, null, true);

      // If the series is an object and contains a name or meta data we add a custom attribute
      seriesGroups[i].attr({
        'series-name': series.name
      }, Chartist.xmlNs.uri);

      // Use series class from series data or if not set generate one
      seriesGroups[i].addClass([
        options.classNames.series,
        (series.className || options.classNames.series + '-' + Chartist.alphaNumerate(i))
      ].join(' '));

      var endAngle = startAngle + dataArray[i] / totalDataSum * 360;
      // If we need to draw the arc for all 360 degrees we need to add a hack where we close the circle
      // with Z and use 359.99 degrees
      if(endAngle - startAngle === 360) {
        endAngle -= 0.01;
      }

      var start = Chartist.polarToCartesian(center.x, center.y, radius, startAngle - (i === 0 || hasSingleValInSeries ? 0 : 0.2)),
        end = Chartist.polarToCartesian(center.x, center.y, radius, endAngle);

      // Create a new path element for the pie chart. If this isn't a donut chart we should close the path for a correct stroke
      var path = new Chartist.Svg.Path(!options.donut)
        .move(end.x, end.y)
        .arc(radius, radius, 0, endAngle - startAngle > 180, 0, start.x, start.y);

      // If regular pie chart (no donut) we add a line to the center of the circle for completing the pie
      if(!options.donut) {
        path.line(center.x, center.y);
      }

      // Create the SVG path
      // If this is a donut chart we add the donut class, otherwise just a regular slice
      var pathElement = seriesGroups[i].elem('path', {
        d: path.stringify()
      }, options.classNames.slice + (options.donut ? ' ' + options.classNames.donut : ''));

      // Adding the pie series value to the path
      pathElement.attr({
        'value': dataArray[i],
        'meta': Chartist.serialize(series.meta)
      }, Chartist.xmlNs.uri);

      // If this is a donut, we add the stroke-width as style attribute
      // if(options.donut) {
      //   pathElement.attr({
      //     'style': 'stroke-width: ' + (+options.donutWidth) + 'px'
      //   });
      // }

      // Fire off draw event
      this.eventEmitter.emit('draw', {
        type: 'slice',
        value: dataArray[i],
        totalDataSum: totalDataSum,
        index: i,
        meta: series.meta,
        series: series,
        group: seriesGroups[i],
        element: pathElement,
        path: path.clone(),
        center: center,
        radius: radius,
        startAngle: startAngle,
        endAngle: endAngle
      });

      // If we need to show labels we need to add the label for this slice now
      if(options.showLabel) {
        // Position at the labelRadius distance from center and between start and end angle
        var labelPosition = Chartist.polarToCartesian(center.x, center.y, labelRadius, startAngle + (endAngle - startAngle) / 2),
          interpolatedValue = options.labelInterpolationFnc(this.data.labels ? this.data.labels[i] : dataArray[i], i);

        var labelElement = seriesGroups[i].elem('text', {
          dx: labelPosition.x,
          dy: labelPosition.y,
          'text-anchor': determineAnchorPosition(center, labelPosition, options.labelDirection)
        }, options.classNames.label).text('' + interpolatedValue);

        // Fire off draw event
        this.eventEmitter.emit('draw', {
          type: 'label',
          index: i,
          group: seriesGroups[i],
          element: labelElement,
          text: '' + interpolatedValue,
          x: labelPosition.x,
          y: labelPosition.y
        });
      }

      // Set next startAngle to current endAngle. Use slight offset so there are no transparent hairline issues
      // (except for last slice)
      startAngle = endAngle;
    }

    this.eventEmitter.emit('created', {
      chartRect: chartRect,
      svg: this.svg,
      options: options
    });
  }

  /**
   * This method creates a new pie chart and returns an object that can be used to redraw the chart.
   *
   * @memberof Chartist.Pie
   * @param {String|Node} query A selector query string or directly a DOM element
   * @param {Object} data The data object in the pie chart needs to have a series property with a one dimensional data array. The values will be normalized against each other and don't necessarily need to be in percentage. The series property can also be an array of value objects that contain a value property and a className property to override the CSS class name for the series group.
   * @param {Object} [options] The options object with options that override the default options. Check the examples for a detailed list.
   * @param {Array} [responsiveOptions] Specify an array of responsive option arrays which are a media query and options object pair => [[mediaQueryString, optionsObject],[more...]]
   * @return {Object} An object with a version and an update method to manually redraw the chart
   *
   * @example
   * // Simple pie chart example with four series
   * new Chartist.Pie('.ct-chart', {
   *   series: [10, 2, 4, 3]
   * });
   *
   * @example
   * // Drawing a donut chart
   * new Chartist.Pie('.ct-chart', {
   *   series: [10, 2, 4, 3]
   * }, {
   *   donut: true
   * });
   *
   * @example
   * // Using donut, startAngle and total to draw a gauge chart
   * new Chartist.Pie('.ct-chart', {
   *   series: [20, 10, 30, 40]
   * }, {
   *   donut: true,
   *   donutWidth: 20,
   *   startAngle: 270,
   *   total: 200
   * });
   *
   * @example
   * // Drawing a pie chart with padding and labels that are outside the pie
   * new Chartist.Pie('.ct-chart', {
   *   series: [20, 10, 30, 40]
   * }, {
   *   chartPadding: 30,
   *   labelOffset: 50,
   *   labelDirection: 'explode'
   * });
   *
   * @example
   * // Overriding the class names for individual series as well as a name and meta data.
   * // The name will be written as ct:series-name attribute and the meta data will be serialized and written
   * // to a ct:meta attribute.
   * new Chartist.Pie('.ct-chart', {
   *   series: [{
   *     value: 20,
   *     name: 'Series 1',
   *     className: 'my-custom-class-one',
   *     meta: 'Meta One'
   *   }, {
   *     value: 10,
   *     name: 'Series 2',
   *     className: 'my-custom-class-two',
   *     meta: 'Meta Two'
   *   }, {
   *     value: 70,
   *     name: 'Series 3',
   *     className: 'my-custom-class-three',
   *     meta: 'Meta Three'
   *   }]
   * });
   */
  function Pie(query, data, options, responsiveOptions) {
    Chartist.Pie.super.constructor.call(this,
      query,
      data,
      defaultOptions,
      Chartist.extend({}, defaultOptions, options),
      responsiveOptions);
  }

  // Creating pie chart type in Chartist namespace
  Chartist.Pie = Chartist.Base.extend({
    constructor: Pie,
    createChart: createChart,
    determineAnchorPosition: determineAnchorPosition
  });

}(window, document, Chartist));

return Chartist;

}));(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], function () {
      return (root.returnExportsGlobal = factory());
    });
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like enviroments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    root['Chartist.plugins.tooltips'] = factory();
  }
}(this, function () {

  /**
   * Chartist.js plugin to display a data label on top of the points in a line chart.
   *
   */
  /* global Chartist */
  (function(window, document, Chartist) {
    'use strict';

    var defaultOptions = {
      currency: null
      // showTooltips: true,
      // tooltipEvents: ['mousemove', 'touchstart', 'touchmove'],
      // labelClass: 'ct-label',
      // labelOffset: {
      //   x: 0,
      //   y: -10
      // },
      // textAnchor: 'middle'
    };

    Chartist.plugins = Chartist.plugins || {};
    Chartist.plugins.tooltip = function(options) {

      options = Chartist.extend({}, defaultOptions, options);

      return function tooltip(chart) {
        var tooltipSelector = '.ct-point';
        if (chart instanceof Chartist.Bar) {
          tooltipSelector = '.ct-bar';
        } else if (chart instanceof Chartist.Pie) {
          tooltipSelector = '.ct-slice';
        }

        var $chart = $(chart.container);
        var $toolTip = $chart
        .append('<div class="tooltip"></div>')
        .find('.tooltip')
        .hide();

        $chart.on('mouseenter', tooltipSelector, function() {
          var $point = $(this);
          var tooltipText = '';

          if ($point.attr('ct:meta')) {
            tooltipText += $point.attr('ct:meta') + '<br>';
          } else {
            // For Pie Charts also take the labels into account
            // Could add support for more charts here as well!
            if (chart instanceof Chartist.Pie) {
              var label = $point.next('.ct-label');
              if (label.length > 0) {
                tooltipText += label.text() + '<br>';
              }
            }
          }

          var value = $point.attr('ct:value');
          if (options.currency) {
            value = options.currency + value.replace(/(\d)(?=(\d{3})+(?:\.\d+)?$)/g, "$1,");
          }
          tooltipText += "<strong>" + value + "</strong>";

          $toolTip.html(tooltipText).show();
        });

        $chart.on('mouseleave', tooltipSelector, function() {
          $toolTip.hide();
        });

        $chart.on('mousemove', function(event) {
          $toolTip.css({
            left: (event.offsetX || event.originalEvent.layerX) - $toolTip.width() / 2 - 10,
            top: (event.offsetY || event.originalEvent.layerY) - $toolTip.height() - 40
          });
        });
      }
    };

  }(window, document, Chartist));

  return Chartist.plugins.tooltips;

}));if (Number.prototype.toSimplestTime == null) {
  Number.prototype.toSimplestTime = function() {
    var h, m, m0, s, s0;
    if (this <= 0) {
      return "";
    } else {
      if (this >= 3600) {
        h = Math.floor(this / 3600);
        m = Math.floor(this % 3600 / 60);
        s = Math.floor(this % 60);
        m0 = m < 10 ? 0 : "";
        s0 = s < 10 ? 0 : "";
        return h + ":" + m0 + m + ":" + s0 + s;
      } else if (this >= 60) {
        m = Math.floor(this / 60);
        s = Math.floor(this % 60);
        s0 = s < 10 ? 0 : "";
        return m + ":" + s0 + s;
      } else {
        return this;
      }
    }
  };
}

if (String.prototype.toSeconds == null) {
  String.prototype.toSeconds = function() {
    var h, m, ref, s, seconds;
    ref = this.split(":").reverse(), s = ref[0], m = ref[1], h = ref[2];
    return seconds = (parseInt(s, 10) || 0) + 60 * (parseInt(m, 10) || 0) + 3600 * (parseInt(h, 10) || 0);
  };
}

if (Date.prototype.round == null) {
  Date.prototype.round = function(interval) {
    var resolution;
    if (interval == null) {
      interval = 15;
    }
    resolution = 1000 * 60 * interval;
    return new Date(Math.round(this.getTime() / resolution) * resolution);
  };
}

if (Date.prototype.ceil == null) {
  Date.prototype.ceil = function(interval) {
    var resolution;
    if (interval == null) {
      interval = 15;
    }
    resolution = 1000 * 60 * interval;
    return new Date(Math.ceil(this.getTime() / resolution) * resolution);
  };
}

if (Date.prototype.floor == null) {
  Date.prototype.floor = function(interval) {
    var resolution;
    if (interval == null) {
      interval = 15;
    }
    resolution = 1000 * 60 * interval;
    return new Date(Math.floor(this.getTime() / resolution) * resolution);
  };
}

if (Date.prototype.addMinutes == null) {
  Date.prototype.addMinutes = function(interval) {
    if (interval == null) {
      interval = 15;
    }
    return new Date(this.getTime() + 1000 * 60 * interval);
  };
}

if (Date.prototype.simpleTime == null) {
  Date.prototype.simpleTime = function() {
    var hours, minutes, time;
    hours = this.getHours();
    minutes = this.getMinutes();
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    return time = "at " + hours + ":" + minutes;
  };
}

if (Date.prototype.simpleDate == null) {
  Date.prototype.simpleDate = function() {
    var datetime, day, month, year;
    datetime = "";
    if (this.isToday()) {
      datetime += "today";
    } else if (this.isTomorrow()) {
      datetime += "tomorrow";
    } else if (this.isYesterday()) {
      datetime += "yesterday";
    } else {
      day = this.getUTCDate();
      month = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][this.getUTCMonth()];
      year = this.getFullYear();
      datetime += day + " " + month + " " + year;
    }
    return datetime;
  };
}

if (Date.prototype.isToday == null) {
  Date.prototype.isToday = function() {
    var time;
    time = new Date();
    return this.getDate() === time.getDate() && this.getMonth() === time.getMonth() && this.getYear() === time.getYear();
  };
}

if (Date.prototype.isTomorrow == null) {
  Date.prototype.isTomorrow = function() {
    var time;
    time = new Date();
    time.setHours(time.getHours() + 24);
    return this.getDate() === time.getDate() && this.getMonth() === time.getMonth() && this.getYear() === time.getYear();
  };
}

if (Date.prototype.isYesterday == null) {
  Date.prototype.isYesterday = function() {
    var time;
    time = new Date();
    time.setHours(time.getHours() - 24);
    return this.getDate() === time.getDate() && this.getMonth() === time.getMonth() && this.getYear() === time.getYear();
  };
}
;
var slice = [].slice;

jQuery(function($) {
  $.makeGuid = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  };
  $.urlParam = function(name) {
    var results;
    results = new RegExp("[\\?&]" + name + "=([^&#]*)").exec(window.location.href);
    if (!results) {
      return false;
    }
    return results[1] || null;
  };
  $.fn.sendCommand = function(command, args) {
    return this.each(function() {
      var payload;
      payload = JSON.stringify({
        "event": "command",
        "func": command,
        "args": args || [],
        "id": this.id
      });
      return this.contentWindow.postMessage(payload, "*");
    });
  };
  $.fn.trigger_change_on_deselect = function() {
    return this.each(function() {
      var input, name;
      input = $(this);
      name = input.attr('name');
      return $("input[name='" + name + "']:radio").not(input).change(function() {
        if ($(this).is(":checked")) {
          return input.change();
        }
      });
    });
  };
  $.easing.glide = function(x, t, b, c, d) {
    return -c * ((t = t / d - 1) * t * t * t - 1) + b;
  };
  $.easing.boing = function(x, t, b, c, d, s) {
    if (s == null) {
      s = 1.70158;
    }
    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
  };
  $.easing.expo = function(x, t, b, c, d) {
    var ref;
    return (ref = t === d) != null ? ref : b + {
      c: c * (-Math.pow(2, -10 * t / d) + 1) + b
    };
  };
  $.add_stylesheet = function(path) {
    if (document.createStyleSheet) {
      return document.createStyleSheet(path);
    } else {
      return $('head').append("<link rel=\"stylesheet\" href=\"" + path + "\" type=\"text/css\" />");
    }
  };
  $.namespace = function(target, name, block) {
    var i, item, len, ref, ref1, top;
    if (arguments.length < 3) {
      ref = [(typeof exports !== 'undefined' ? exports : window)].concat(slice.call(arguments)), target = ref[0], name = ref[1], block = ref[2];
    }
    top = target;
    ref1 = name.split('.');
    for (i = 0, len = ref1.length; i < len; i++) {
      item = ref1[i];
      target = target[item] || (target[item] = {});
    }
    return block(target, top);
  };
  $.fn.find_including_self = function(selector) {
    var selection;
    selection = this.find(selector);
    if (this.is(selector)) {
      selection.push(this);
    }
    return selection;
  };
  $.fn.self_or_ancestor = function(selector) {
    if (this.is(selector)) {
      return this;
    } else {
      return this.parents(selector);
    }
  };
  $.ajaxError = (function(_this) {
    return function(jqXHR, textStatus, errorThrown) {
      console.error("...error!", jqXHR, textStatus, errorThrown);
      trigger("error", textStatus, errorThrown);
    };
  })(this);
  $.fn.flash = function() {
    return this.each(function() {
      var container;
      container = $(this);
      container.fadeIn("fast");
      $("<a href=\"#\" class=\"closer\">close</a>").prependTo(container);
      return container.bind("click", function(e) {
        e.preventDefault();
        return container.fadeOut("fast");
      });
    });
  };
  $.fn.disappearAfter = function(interval) {
    return $(this).fadeOut("slow", function() {
      return $(this).remove();
    });
  };
  $.fn.signal = function(color, duration) {
    if (color == null) {
      color = "#f7f283";
    }
    if (duration == null) {
      duration = 1000;
    }
    return this.each(function() {
      return $(this).css('backgroundColor', color).animate({
        'backgroundColor': '#ffffff'
      }, duration);
    });
  };
  $.fn.signal_confirmation = function() {
    return this.signal('#c7ebb4');
  };
  $.fn.signal_error = function() {
    return this.signal('#e55a51');
  };
  $.fn.signal_cancellation = function() {
    return this.signal('#a2a3a3');
  };
  $.fn.back_button = function() {
    return this.click(function(e) {
      if (e) {
        e.preventDefault();
      }
      history.back();
      return true;
    });
  };
  $.activations = [];
  $.activate_with = function(fn) {
    return $.activations.push(fn);
  };
  $.fn.activate = function() {
    var fn, i, len, ref;
    ref = $.activations;
    for (i = 0, len = ref.length; i < len; i++) {
      fn = ref[i];
      fn.apply(this);
    }
    return this;
  };
  $.fn.editable = function() {
    this.each(function() {
      var buttons, container;
      container = $(this);
      container.attr('contentEditable', true);
      if (container.attr('data-plain') != null) {
        this.addEventListener("paste", function(e) {
          var text;
          e.preventDefault();
          text = e.clipboardData.getData("text/plain");
          return document.execCommand("insertHTML", false, text);
        });
      }
      if (container.attr('data-toolbar') != null) {
        if (container.is('div')) {
          buttons = ['bold', 'italic', 'underline', 'strikethrough', 'anchor', 'orderedlist', 'unorderedlist', 'header1', 'header2', 'quote'];
        } else {
          buttons = ['bold', 'italic', 'underline', 'strikethrough', 'anchor'];
        }
        return new MediumEditor(this, {
          placeholder: "",
          targetBlank: true,
          cleanPastedHTML: true,
          buttons: buttons
        });
      }
    });
    return this;
  };
  $.fn.ineditable = function() {
    this.each(function() {
      return $(this).attr('contentEditable', false);
    });
    return this;
  };
  $.fn.enable = function() {
    return this.each(function() {
      var disabled_descendants;
      disabled_descendants = $(this).find('.disabled');
      $(this).removeClass('disabled').addClass('enabled').attr('disabled', false).find('input, select, textarea').attr('disabled', false);
      return disabled_descendants.disable();
    });
  };
  return $.fn.disable = function() {
    return this.each(function() {
      var enabled_descendants;
      enabled_descendants = $(this).find('.enabled');
      $(this).addClass('disabled').removeClass('enabled').attr('disabled', true).find('input, select, textarea').attr('disabled', true);
      return enabled_descendants.enable();
    });
  };
});jQuery(function($) {
  google.maps.LatLng.prototype.canvasOffset = function(map) {
    var coordinate, coordinateNW, nw, scale;
    nw = new google.maps.LatLng(map.getBounds().getNorthEast().lat(), map.getBounds().getSouthWest().lng());
    coordinateNW = map.getProjection().fromLatLngToPoint(nw);
    coordinate = map.getProjection().fromLatLngToPoint(this);
    scale = Math.pow(2, map.getZoom());
    return new google.maps.Point(Math.floor((coordinate.x - coordinateNW.x) * scale), Math.floor((coordinate.y - coordinateNW.y) * scale));
  };
  google.maps.LatLng.prototype.kmTo = function(a) {
    var b, c, d, e, f, g, ra;
    e = Math;
    ra = e.PI / 180;
    b = this.lat() * ra;
    c = a.lat() * ra;
    d = b - c;
    g = this.lng() * ra - a.lng() * ra;
    f = 2 * e.asin(e.sqrt(e.pow(e.sin(d / 2), 2) + e.cos(b) * e.cos(c) * e.pow(e.sin(g / 2), 2)));
    return f * 6378.137;
  };
  google.maps.Polyline.prototype.inKm = function() {
    var a, dist, i, j, len, len1, path, ref;
    path = this.getPath();
    len = path.getLength();
    dist = 0;
    ref = path.getArray();
    for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
      a = ref[i];
      if (i !== len - 1) {
        dist += a.kmTo(path.getAt(i + 1));
      }
    }
    return dist;
  };
  return google.maps.Polyline.prototype.inMiles = function() {
    return this.inKm() * 0.621371192;
  };
});var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

jQuery(function($) {
  var Sortable;
  $.sortable = function(el, options) {
    return new Sortable(el, options);
  };
  return Sortable = (function() {
    function Sortable(element, opts) {
      var defaults;
      if (opts == null) {
        opts = {};
      }
      this.finish = bind(this.finish, this);
      this.putDown = bind(this.putDown, this);
      this.move = bind(this.move, this);
      this.ignore = bind(this.ignore, this);
      this.ieBeginDrag = bind(this.ieBeginDrag, this);
      this.pickup = bind(this.pickup, this);
      this.unhandle = bind(this.unhandle, this);
      this.handle = bind(this.handle, this);
      this.populate = bind(this.populate, this);
      this.refresh = bind(this.refresh, this);
      defaults = {
        placeholder: '<li class="placeholder" />',
        selector: "li",
        handle: false,
        connected: null
      };
      this._options = $.extend(defaults, opts);
      this._placeholder = $(this._options.placeholder);
      this._placeholder.bind('drop.sortable', this.putDown);
      this._placeholder.bind('dragover.sortable dragenter.sortable', this.ignore);
      this._container = $(element);
      this._container.bind('changed', this.refresh);
      this._container.bind('appended', this.refresh);
      this._container.bind('refresh', this.refresh);
      this._container.bind('dragend.sortable', this.finish);
      this._handling = false;
      this.populate();
      this;
    }

    Sortable.prototype.refresh = function(e) {
      var ref;
      if ((ref = this._items) != null) {
        ref.off('dragstart.sortable dragend.sortable dragover.sortable dragenter.sortable drop.sortable');
      }
      return this.populate();
    };

    Sortable.prototype.populate = function() {
      this._items = this._container.children(this._options.selector);
      this._items.attr('draggable', true).bind('dragstart.sortable', this.pickup).bind('dragover.sortable dragenter.sortable', this.move).bind('drop.sortable', this.putDown).bind('dragend.sortable', this.finish);
      if (this._options.handle) {
        return this._items.find(this._options.handle).bind("mousedown", this.handle).bind("mouseup", this.unhandle);
      }
    };

    Sortable.prototype.handle = function(e) {
      return this._handling = true;
    };

    Sortable.prototype.unhandle = function(e) {
      this._handling = false;
      return true;
    };

    Sortable.prototype.pickup = function(e) {
      e.stopImmediatePropagation();
      if (this._options.handle && !this._handling) {
        return false;
      }
      this._handling = false;
      this._dragging = $(e.target);
      e.originalEvent.dataTransfer = 'move';
      e.originalEvent.dataTransfer.setData('Text', 'sorting');
      e.originalEvent.dataTransfer.setDragImage(this._dragging.get(0), 0, 0);
      this._original_index = this._dragging.index();
      this._original_parent = this._dragging.parent();
      this._dragging.addClass('dragging');
      this._placeholder.height(this._dragging.outerHeight());
      return this._original_parent.trigger('sorting', this._dragging);
    };

    Sortable.prototype.ieBeginDrag = function(e) {
      if (this._handling) {
        return true;
      }
      if (e.target && e.target.dragDrop) {
        e.target.dragDrop();
      }
      return false;
    };

    Sortable.prototype.ignore = function(e) {
      e.preventDefault();
      e.originalEvent.dataTransfer = 'move';
      return true;
    };

    Sortable.prototype.move = function(e) {
      var drag_target, new_index, previous_index, previously_placed;
      if (!((this._dragging != null) && this._items.is(this._dragging))) {
        return true;
      }
      e.preventDefault();
      e.stopPropagation();
      drag_target = $(e.currentTarget);
      this._dragging.hide();
      previously_placed = this._placeholder.parent().get(0) != null;
      previous_index = previously_placed != null ? this._placeholder.index() : this._original_index;
      new_index = drag_target.index();
      if (new_index < previous_index) {
        return drag_target.before(this._placeholder);
      } else {
        return drag_target.after(this._placeholder);
      }
    };

    Sortable.prototype.putDown = function(e) {
      e.stopPropagation();
      e.originalEvent.dataTransfer.dropEffect = 'move';
      this._dragging.insertAfter(this._placeholder);
      this._dragging.trigger('dragend.sortable');
      return false;
    };

    Sortable.prototype.finish = function(e) {
      var new_index, new_parent;
      if (!this._dragging) {
        return;
      }
      new_parent = this._dragging.parent();
      this._placeholder.detach();
      new_index = this._dragging.index();
      this._dragging.removeClass('dragging').show();
      if (new_index !== this._original_index || new_parent.get(0) !== this._original_parent.get(0)) {
        new_parent.trigger('sorted', this._dragging, {
          old_index: this._original_index,
          new_index: new_index,
          old_parent: this._original_parent,
          new_parent: new_parent
        });
      }
      return this._dragging = null;
    };

    return Sortable;

  })();
});var FellRace, root,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace = {};

FellRace.Models = {};

FellRace.Collections = {};

FellRace.Views = {};

root = typeof exports !== "undefined" && exports !== null ? exports : this;

root.FellRace = FellRace;

FellRace.Application = (function(superClass) {
  extend(Application, superClass);

  function Application() {
    this.sendAuthenticationHeader = bind(this.sendAuthenticationHeader, this);
    this.navigate = bind(this.navigate, this);
    this.render = bind(this.render, this);
    this.domain = bind(this.domain, this);
    this.apiUrl = bind(this.apiUrl, this);
    this.sync = bind(this.sync, this);
    this.getCurrentCompetitor = bind(this.getCurrentCompetitor, this);
    this.authPending = bind(this.authPending, this);
    this.userConfirmed = bind(this.userConfirmed, this);
    this.userSignedIn = bind(this.userSignedIn, this);
    this.currentUser = bind(this.currentUser, this);
    this.moveMapTo = bind(this.moveMapTo, this);
    this.setMapOptions = bind(this.setMapOptions, this);
    this.getMap = bind(this.getMap, this);
    this.user_actions = bind(this.user_actions, this);
    this.getCategories = bind(this.getCategories, this);
    this.config = bind(this.config, this);
    this.closeRight = bind(this.closeRight, this);
    this.actionRegionSetup = bind(this.actionRegionSetup, this);
    this.toPublicOrHome = bind(this.toPublicOrHome, this);
    this.adminMapView = bind(this.adminMapView, this);
    this.publicMapView = bind(this.publicMapView, this);
    this.indexMapView = bind(this.indexMapView, this);
    this.showRace = bind(this.showRace, this);
    this.offsetX = bind(this.offsetX, this);
    this.listenToToggle = bind(this.listenToToggle, this);
    this.onStart = bind(this.onStart, this);
    return Application.__super__.constructor.apply(this, arguments);
  }

  Application.prototype.regions = {
    gmap: '#gmap',
    content: '#content',
    main: 'main',
    user_controls: '#user_controls',
    notice: '#notice',
    action: '#action',
    extraContent: 'section#extra'
  };

  Application.prototype.months = {
    full: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    short: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
  };

  Application.prototype.open_drawer = true;

  Application.prototype.open_css = {
    top: '',
    left: ''
  };

  Application.prototype.initialize = function(opts) {
    if (opts == null) {
      opts = {};
    }
    root._fr = this;
    this.original_backbone_sync = Backbone.sync;
    Backbone.sync = this.sync;
    Backbone.Marionette.Renderer.render = this.render;
    $(document).ajaxSend(this.sendAuthenticationHeader);
    $.notify = (function(_this) {
      return function(type, argument) {
        return _this.vent.trigger(type, argument);
      };
    })(this);
    this.actionRegionSetup();
    this._config = new FellRace.Config(options.config);
    this._api_url = this.config("api_url");
    this._domain = this.config("domain");
    if (typeof Stripe !== "undefined" && Stripe !== null) {
      Stripe.setPublishableKey(this.config("stripe_publishable_key"));
    }
    this.session = new FellRace.Models.UserSession();
    this.clubs = new FellRace.Collections.Clubs([]);
    this.categories = new FellRace.Collections.Categories([]);
    this.categories.fetch();
    this.race_publications = new FellRace.Collections.RacePublications([]);
    this.race_publications.fetch({
      remove: false
    });
    this.future_instances = new FellRace.Collections.PublicFutureInstances([]);
    this.past_instances = new FellRace.Collections.PublicPastInstances([]);
    this.future_instances.fetch();
    return this.past_instances.fetch();
  };

  Application.prototype.onStart = function() {
    this.mapView = new FellRace.Views.Map();
    this.getRegion('gmap').show(this.mapView);
    this.getRegion('user_controls').show(new FellRace.Views.UserControls());
    this.listenToToggle();
    this.getRegion('notice').show(new Notifier({
      model: this.vent,
      wait: 4000
    }));
    this.session.load();
    this.router = new FellRace.BaseRouter;
    this.content = $('#content');
    return Backbone.history.start({
      pushState: true,
      root: '/'
    });
  };

  Application.prototype.listenToToggle = function() {
    return $("#view_toggle").on("click", (function(_this) {
      return function() {
        if (_this.content.hasClass("collapsed")) {
          return _this.content.removeClass("collapsed");
        } else {
          return _this.content.addClass("collapsed");
        }
      };
    })(this));
  };

  Application.prototype.offsetX = function() {
    if (this.open_drawer) {
      return -(this.content.width() - 10) / 2;
    } else {
      return -10 / 2;
    }
  };

  Application.prototype.showRace = function(race) {
    return this.mapView.showRace(race);
  };

  Application.prototype.indexMapView = function() {
    return this.mapView.indexView();
  };

  Application.prototype.publicMapView = function() {
    return this.mapView.publicView();
  };

  Application.prototype.adminMapView = function() {
    return this.mapView.adminView();
  };

  Application.prototype.toPublicOrHome = function() {
    var ref;
    return _fr.navigate(((ref = Backbone.history.fragment.match(/admin(.+)/)) != null ? ref[1] : void 0) || "/");
  };

  Application.prototype.actionRegionSetup = function() {
    var action_region;
    action_region = this.getRegion('action');
    action_region.on("show", function(view) {
      this.$el.show();
      return this.$el.find("a.close, a.hide, a.cancel").on("click", (function(_this) {
        return function() {
          return _this.trigger("close");
        };
      })(this));
    }).on("hide", function(view) {
      return this.$el.hide();
    }).on("close", function(view) {
      return this.$el.hide();
    });
    return $(document).keyup((function(_this) {
      return function(e) {
        var code;
        code = e.keyCode || e.which;
        if (code === 27) {
          return action_region.close();
        } else if (code === 13) {
          if (action_region.currentView) {
            return action_region.currentView.trigger("submit");
          }
        }
      };
    })(this));
  };

  Application.prototype.closeRight = function() {
    return this.extraContentRegion.close();
  };

  Application.prototype.config = function(key) {
    return this._config.get(key);
  };

  Application.prototype.getCategories = function() {
    return this.categories;
  };

  Application.prototype.user_actions = function() {
    return {
      resetPassword: (function(_this) {
        return function(uid, token) {
          return _this.actionRegion.show(new FellRace.Views.SessionPasswordForm({
            uid: uid,
            token: token
          }));
        };
      })(this),
      requestReset: (function(_this) {
        return function() {
          return _this.actionRegion.show(new FellRace.Views.SessionResetForm());
        };
      })(this),
      signOut: (function(_this) {
        return function() {
          return _this.session.reset();
        };
      })(this),
      signUp: (function(_this) {
        return function(opts) {
          return _this.actionRegion.show(new FellRace.Views.UserSignupForm(opts));
        };
      })(this),
      signUpForEvent: (function(_this) {
        return function() {
          return _this.actionRegion.show(new FellRace.Views.UserSignupFormForRace());
        };
      })(this),
      signIn: (function(_this) {
        return function(opts) {
          return _this.actionRegion.show(new FellRace.Views.SessionLoginForm(opts));
        };
      })(this),
      confirm: (function(_this) {
        return function(uid, token) {
          return _this.actionRegion.show(new FellRace.Views.SessionConfirmationForm({
            uid: uid,
            token: token
          }));
        };
      })(this),
      reconfirm: (function(_this) {
        return function() {
          return _this.actionRegion.show(new FellRace.Views.SessionReconfirmationForm());
        };
      })(this),
      requestConfirmation: (function(_this) {
        return function() {
          return _this.actionRegion.show(new FellRace.Views.ConfirmationRequired());
        };
      })(this),
      signedUp: (function(_this) {
        return function() {
          $.notify("success", "User account created");
          return _this.actionRegion.close();
        };
      })(this),
      hideAction: (function(_this) {
        return function() {
          return _this.actionRegion.close();
        };
      })(this),
      menu: (function(_this) {
        return function() {
          return _this.actionRegion.show(new FellRace.Views.UserActionMenu());
        };
      })(this)
    };
  };

  Application.prototype.getMap = function() {
    var ref;
    return (ref = this.mapView) != null ? ref.getMap() : void 0;
  };

  Application.prototype.setMapOptions = function(opts) {
    var ref;
    return (ref = this.mapView) != null ? ref.setOptions(opts) : void 0;
  };

  Application.prototype.moveMapTo = function(model, zoom) {
    return this.mapView.moveTo(model, zoom);
  };

  Application.prototype.currentUser = function() {
    return this.session.user;
  };

  Application.prototype.userSignedIn = function() {
    return this.session.signedIn();
  };

  Application.prototype.userConfirmed = function() {
    return this.session.confirmed();
  };

  Application.prototype.authPending = function() {
    return this.session.authPending();
  };

  Application.prototype.getCurrentCompetitor = function() {
    var ref;
    return (ref = this.currentUser()) != null ? ref.getCompetitor() : void 0;
  };

  Application.prototype.sync = function(method, model, opts) {
    return this.original_backbone_sync(method, model, opts);
  };

  Application.prototype.apiUrl = function() {
    return this._api_url;
  };

  Application.prototype.domain = function() {
    return this._domain;
  };

  Application.prototype.render = function(template, data) {
    if (data == null) {
      data = {};
    }
    if (_.isFunction(template)) {
      template = template();
    }
    if (template != null) {
      if (FellRace.Templates[template]) {
        return FellRace.Templates[template](data);
      } else {
        return template;
      }
    } else {
      return "";
    }
  };

  Application.prototype.navigate = function(route, arg) {
    var ref, replace, trigger;
    ref = arg != null ? arg : {}, trigger = ref.trigger, replace = ref.replace;
    if (trigger == null) {
      trigger = true;
    }
    if (replace == null) {
      replace = false;
    }
    this.vent.off("login:changed");
    return Backbone.history.navigate(route, {
      trigger: trigger,
      replace: replace
    });
  };

  Application.prototype.sendAuthenticationHeader = function(e, request) {
    var ref, token;
    if (token = (ref = this.session) != null ? ref.authToken() : void 0) {
      return request.setRequestHeader("Authorization", "Token token=" + token);
    }
  };

  return Application;

})(Backbone.Marionette.Application);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Router = (function(superClass) {
  extend(Router, superClass);

  Router.prototype._previous = {};

  function Router() {
    this.route = bind(this.route, this);
    this.handle = bind(this.handle, this);
    this.handlers = [];
    Router.__super__.constructor.apply(this, arguments);
  }

  Router.prototype.handle = function(fragment) {
    if (fragment == null) {
      fragment = "/";
    }
    return _.any(this.handlers, function(handler) {
      if (handler.route.test(fragment)) {
        handler.callback(fragment);
        return true;
      }
    });
  };

  Router.prototype.route = function(route, name, fn) {
    if (!_.isRegExp(route)) {
      route = this._routeToRegExp(route);
    }
    if (_.isFunction(name)) {
      fn = name;
      name = '';
    }
    if (fn == null) {
      fn = this[name];
    }
    return this.handlers.unshift({
      route: route,
      callback: (function(_this) {
        return function(fragment) {
          var args;
          args = _this._extractParameters(route, fragment);
          return _this.execute(fn, args, name);
        };
      })(this)
    });
  };

  return Router;

})(Backbone.Router);

FellRace.BaseRouter = (function(superClass) {
  extend(BaseRouter, superClass);

  function BaseRouter() {
    this.admin = bind(this.admin, this);
    this["public"] = bind(this["public"], this);
    return BaseRouter.__super__.constructor.apply(this, arguments);
  }

  BaseRouter.prototype.routes = {
    "(/)": "public",
    "admin(/*path)": "admin",
    "*path": "public"
  };

  BaseRouter.prototype._previous = {};

  BaseRouter.prototype["public"] = function(path) {
    var router;
    if (this._previous.route === "public") {
      router = this._previous.router;
    } else {
      router = new FellRace.PublicRouter;
    }
    this._previous = {
      route: "public",
      router: router
    };
    return router.handle(path);
  };

  BaseRouter.prototype.admin = function(path) {
    var router;
    if (_fr.userSignedIn()) {
      if (this._previous.route === "admin") {
        this._previous.router.handle(path);
      } else {
        router = new FellRace.AdminRouter;
        router.handle(path);
        this._previous = {
          route: "admin",
          router: router
        };
      }
      return _fr.vent.once("login:changed", (function(_this) {
        return function() {
          return _fr.toPublicOrHome();
        };
      })(this));
    } else if (_fr.authPending()) {
      return _fr.vent.once("login:changed", (function(_this) {
        return function() {
          return _this.admin(path);
        };
      })(this));
    } else {
      return _fr.toPublicOrHome();
    }
  };

  return BaseRouter;

})(Backbone.Router);

FellRace.PublicRouter = (function(superClass) {
  extend(PublicRouter, superClass);

  function PublicRouter() {
    this.page = bind(this.page, this);
    this.resetPassword = bind(this.resetPassword, this);
    this.confirmUser = bind(this.confirmUser, this);
    this.users = bind(this.users, this);
    this.clubs = bind(this.clubs, this);
    this.competitors = bind(this.competitors, this);
    this.racePublications = bind(this.racePublications, this);
    this.events = bind(this.events, this);
    this.index = bind(this.index, this);
    return PublicRouter.__super__.constructor.apply(this, arguments);
  }

  PublicRouter.prototype.routes = {
    "(/)": "index",
    "events(/*path)": "events",
    "races(/*path)": "racePublications",
    "runners(/*path)": "competitors",
    "clubs(/*path)": "clubs",
    "users(/*path)": "users",
    "confirm/:uid/:token(/)": "confirmUser",
    "reset_password/:uid/:token(/)": "resetPassword",
    "faq/:page_name(/)": "page",
    "*path": "index"
  };

  PublicRouter.prototype.initialize = function() {
    _fr.publicMapView();
    return PublicRouter.__super__.initialize.apply(this, arguments);
  };

  PublicRouter.prototype.index = function() {
    var view;
    if (this._previous.route !== "index") {
      _fr.indexMapView();
      view = new FellRace.Views.IndexView;
      _fr.mainRegion.show(view);
      _fr.closeRight();
      return this._previous = {
        route: "index"
      };
    }
  };

  PublicRouter.prototype.events = function(path) {
    return _fr.navigate("/races/" + path, {
      replace: true
    });
  };

  PublicRouter.prototype.racePublications = function(path) {
    var view;
    if (this._previous.route === "race_publications") {
      return this._previous.view.handle(path);
    } else {
      view = new FellRace.Views.RacePublicationsLayout({
        path: path
      });
      return this._previous = {
        route: "race_publications",
        view: view
      };
    }
  };

  PublicRouter.prototype.competitors = function(path) {
    var view;
    if (this._previous.route === "competitors") {
      return this._previous.view.handle(path);
    } else {
      view = new FellRace.Views.CompetitorsLayout({
        path: path
      });
      return this._previous = {
        route: "competitors",
        view: view
      };
    }
  };

  PublicRouter.prototype.clubs = function(path) {
    var view;
    if (this._previous.route === "clubs") {
      return this._previous.view.handle(path);
    } else {
      view = new FellRace.Views.ClubsLayout({
        path: path
      });
      return this._previous = {
        route: "clubs",
        view: view
      };
    }
  };

  PublicRouter.prototype.users = function(path) {
    var view;
    if (_fr.userSignedIn()) {
      if (this._previous.route === "users") {
        this._previous.view.handle(path);
      } else {
        view = new FellRace.Views.UsersLayout({
          path: path
        });
        this._previous = {
          route: "users",
          view: view
        };
      }
      return _fr.vent.on("login:changed", (function(_this) {
        return function() {
          return _fr.navigate("/");
        };
      })(this));
    } else {
      if (_fr.authPending()) {
        return _fr.vent.once("login:changed", (function(_this) {
          return function() {
            return _this.users(path);
          };
        })(this));
      } else {
        return _fr.navigate("/");
      }
    }
  };

  PublicRouter.prototype.confirmUser = function(uid, token) {
    this.index();
    return _fr.actionRegion.show(new FellRace.Views.SessionConfirmationForm({
      uid: uid,
      token: token
    }));
  };

  PublicRouter.prototype.resetPassword = function(uid, token) {
    this.index();
    return _fr.actionRegion.show(new FellRace.Views.SessionPasswordForm({
      uid: uid,
      token: token
    }));
  };

  PublicRouter.prototype.page = function(page_name) {
    var view;
    view = new FellRace.Views.Page({
      template: "pages/" + page_name
    });
    _fr.indexMapView();
    _fr.mainRegion.show(view);
    return _fr.closeRight();
  };

  return PublicRouter;

})(FellRace.Router);

FellRace.AdminRouter = (function(superClass) {
  extend(AdminRouter, superClass);

  function AdminRouter() {
    this.competitors = bind(this.competitors, this);
    this.clubs = bind(this.clubs, this);
    this.races = bind(this.races, this);
    return AdminRouter.__super__.constructor.apply(this, arguments);
  }

  AdminRouter.prototype.routes = {
    "races(/*path)": "races",
    "clubs(/*path)": "clubs",
    "runners(/*path)": "competitors"
  };

  AdminRouter.prototype.initialize = function() {
    _fr.adminMapView();
    return AdminRouter.__super__.initialize.apply(this, arguments);
  };

  AdminRouter.prototype.races = function(path) {
    var view;
    if (this._previous.route === "races") {
      return this._previous.view.handle(path);
    } else {
      view = new FellRace.Views.RacesLayout({
        path: path
      });
      return this._previous = {
        route: "races",
        view: view
      };
    }
  };

  AdminRouter.prototype.clubs = function(path) {
    var view;
    if (this._previous.route === "clubs") {
      return this._previous.view.handle(path);
    } else {
      view = new FellRace.Views.AdminClubsLayout({
        path: path
      });
      return this._previous = {
        route: "clubs",
        view: view
      };
    }
  };

  AdminRouter.prototype.competitors = function(path) {
    var view;
    if (this._previous.route === "competitors") {
      return this._previous.view.handle(path);
    } else {
      view = new FellRace.Views.AdminCompetitorsLayout({
        path: path
      });
      return this._previous = {
        route: "competitors",
        view: view
      };
    }
  };

  return AdminRouter;

})(FellRace.Router);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Modernizr.addTest('filereader', function() {
  return !!(window.File && window.FileList && window.FileReader);
});

Modernizr.addTest('formdata', function() {
  return !!window.FormData;
});

Modernizr.addTest('dropbox', function() {
  (typeof Dropbox !== "undefined" && Dropbox !== null) && Dropbox.isBrowserSupported();
  return true;
});

Modernizr.addTest('ios6plus', function() {
  var ua;
  ua = window.navigator.userAgent;
  return /iP(hone|od|ad)/.test(ua) && /[6789]_\d/.test(ua);
});

FellRace.Config = (function() {
  Config.prototype.defaults = {
    api_url: "//api.fellrace.org.uk",
    domain: "fellrace.org.uk",
    stripe_publishable_key: "pk_live_dOxGZ6LC5I1womT8MgsDn3jB",
    bing_api_key: "ApY0qAIIkStmgyAoqcr-Iav2s1obEi-MHhyMkNyZDD6Z2b-gf3CLmHo7djH6968P",
    google_api_key: "AIzaSyBP7pXQfGfZOeIC33zcyFP_S2go1V1I4fw",
    osm_api_key: "09bbae460cca4ae8b400ef767d695903"
  };

  Config.prototype.development = {
    api_url: "//api.fr.dev",
    domain: "fr.dev",
    stripe_publishable_key: "pk_test_orOZm4kTjBQOf5XB3RM01q0U",
    bing_api_key: "ApY0qAIIkStmgyAoqcr-Iav2s1obEi-MHhyMkNyZDD6Z2b-gf3CLmHo7djH6968P",
    google_api_key: "AIzaSyBP7pXQfGfZOeIC33zcyFP_S2go1V1I4fw",
    osm_api_key: "09bbae460cca4ae8b400ef767d695903"
  };

  function Config(options) {
    if (options == null) {
      options = {};
    }
    this.set = bind(this.set, this);
    this.get = bind(this.get, this);
    this.settings = bind(this.settings, this);
    if (options.environment == null) {
      options.environment = this.guessEnvironment();
    }
    this._settings = _.defaults(options, this[options.environment], this.defaults);
  }

  Config.prototype.guessEnvironment = function() {
    var prod;
    prod = new RegExp(/fellrace\.org\.uk/);
    if (prod.test(window.location.href)) {
      return "production";
    } else {
      return "development";
    }
  };

  Config.prototype.settings = function() {
    return this._settings;
  };

  Config.prototype.get = function(key) {
    return this._settings[key];
  };

  Config.prototype.set = function(key, value) {
    return this._settings[key] = value;
  };

  return Config;

})();var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Model = (function(superClass) {
  extend(Model, superClass);

  function Model() {
    this.unmatches = bind(this.unmatches, this);
    this.matchString = bind(this.matchString, this);
    this.getIndex = bind(this.getIndex, this);
    this.failed = bind(this.failed, this);
    this.updated = bind(this.updated, this);
    this.deferSave = bind(this.deferSave, this);
    this.update = bind(this.update, this);
    this.toJSON = bind(this.toJSON, this);
    this.updateable = bind(this.updateable, this);
    this.build = bind(this.build, this);
    return Model.__super__.constructor.apply(this, arguments);
  }

  Model.prototype.initialize = function() {
    this.on("sync", (function(_this) {
      return function() {
        return _this.set({
          saving: false
        });
      };
    })(this));
    if (this.isNew()) {
      this.once('sync', (function(_this) {
        return function() {
          return _this.updateable();
        };
      })(this));
    } else {
      this.updateable();
    }
    this.build();
    return this.on("publish", this.publish);
  };

  Model.prototype.build = function() {};

  Model.prototype.updateable = function() {
    if (this.updateSoon == null) {
      this.updateSoon = _.debounce(this.update, 800);
    }
    return this.on("change", (function(_this) {
      return function(m, options) {
        if (options.stickitChange || options.mapstickChange || options.persistChange) {
          _this.trigger('updating');
          return _this.updateSoon();
        }
      };
    })(this));
  };

  Model.prototype.toJSON = function() {
    var att, i, json, len, ref, root;
    root = this.singular_name;
    json = {};
    if (this.savedAttributes != null) {
      json[root] = {};
      ref = this.savedAttributes;
      for (i = 0, len = ref.length; i < len; i++) {
        att = ref[i];
        json[root][att] = this.get(att);
      }
    } else {
      json[root] = Model.__super__.toJSON.apply(this, arguments);
    }
    return json;
  };

  Model.prototype.update = function() {
    this.off("updated failed", this.update);
    if (this.get("saving")) {
      return this.deferSave();
    } else {
      return this.save({
        saving: true
      }, {
        wait: false,
        success: this.updated,
        error: this.failed
      });
    }
  };

  Model.prototype.deferSave = function() {
    return this.once("updated failed", this.update);
  };

  Model.prototype.updated = function() {
    this.set({
      saving: false
    });
    return this.trigger('updated');
  };

  Model.prototype.failed = function() {
    this.set({
      saving: false
    });
    return this.trigger('failed');
  };

  Model.prototype.getIndex = function() {
    if (this.collection) {
      return this.collection.indexOf(this);
    }
  };

  Model.prototype.matchString = function() {
    return this.get('name');
  };

  Model.prototype.unmatches = function(term) {
    return this.matchString().toLowerCase().indexOf(term.toLowerCase()) === -1;
  };

  return Model;

})(Backbone.Model);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.Attachment = (function(superClass) {
  extend(Attachment, superClass);

  function Attachment() {
    this.upload_error = bind(this.upload_error, this);
    this.upload_end = bind(this.upload_end, this);
    this.upload_progress = bind(this.upload_progress, this);
    this.upload_begin = bind(this.upload_begin, this);
    this.sync = bind(this.sync, this);
    this.formdata = bind(this.formdata, this);
    this.validate = bind(this.validate, this);
    this.filename = bind(this.filename, this);
    this.autosave = bind(this.autosave, this);
    return Attachment.__super__.constructor.apply(this, arguments);
  }

  Attachment.prototype.singular_name = 'attachment';

  Attachment.prototype.defaults = {
    name: null,
    file: null,
    extension: "",
    url: null
  };

  Attachment.prototype.initialize = function() {
    var url;
    Attachment.__super__.initialize.apply(this, arguments);
    this.wait_then_save = _.debounce(this.save, 500);
    if (url = this.get('url')) {
      this.set("extension", url.split('.').pop());
    }
    this.on("change:file", (function(_this) {
      return function(e) {
        if (_this.get('file') != null) {
          _this.set("extension", _this.filename().split('.').pop());
          return _this.set("name", _this.filename().split(/[\/\\]/).pop());
        }
      };
    })(this));
    return this.on("change:name", (function(_this) {
      return function() {
        return _this.wait_then_save();
      };
    })(this));
  };

  Attachment.prototype.autosave = function() {
    return this.save();
  };

  Attachment.prototype.filename = function() {
    var ref;
    return (ref = this.get('file')) != null ? ref.name : void 0;
  };

  Attachment.prototype.validate = function(attrs, options) {
    if (!((attrs.file != null) || (attrs.url != null))) {
      return "Please choose a file";
    }
    if (!attrs.name || !attrs.name.length) {
      return "Please give a file name";
    }
    return void 0;
  };

  Attachment.prototype.formdata = function() {
    var formdata;
    formdata = new FormData();
    _.each(_.omit(this.attributes, this.unsynced), (function(_this) {
      return function(value, key, list) {
        return formdata.append("attachment[" + key + "]", value);
      };
    })(this));
    return formdata;
  };

  Attachment.prototype.sync = function(method, model, options) {
    if (!((this.get('file') != null) && (method === "create" || method === "update"))) {
      return Attachment.__super__.sync.apply(this, arguments);
    }
    options.data = this.formdata();
    options.contentType = false;
    options.processData = false;
    options.xhr = (function(_this) {
      return function() {
        var xhr;
        xhr = $.ajaxSettings.xhr();
        xhr.upload.onloadstart = _this.upload_begin;
        xhr.upload.onprogress = _this.upload_progress;
        xhr.upload.onloadend = _this.upload_end;
        xhr.upload.onerror = _this.upload_error;
        return xhr;
      };
    })(this);
    return Attachment.__super__.sync.call(this, method, model, options);
  };

  Attachment.prototype.upload_begin = function() {
    this.trigger("freeze");
    $.notify("start:progress", "Uploading " + (this.filename()));
    return this.set("editable", false);
  };

  Attachment.prototype.upload_progress = function(e) {
    var percentage;
    if (e && e.lengthComputable) {
      percentage = parseInt(e.loaded / e.total * 100, 10);
      return $.notify("progress", percentage);
    }
  };

  Attachment.prototype.upload_end = function() {
    $.notify("finish:progress");
    this.set('file', null);
    this.set("editable", true);
    return this.trigger("thaw");
  };

  Attachment.prototype.upload_error = function(model, xhr, options) {
    return $.notify("error", "upload failed for " + this.filename);
  };

  return Attachment;

})(FellRace.Model);var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.Category = (function(superClass) {
  extend(Category, superClass);

  function Category() {
    return Category.__super__.constructor.apply(this, arguments);
  }

  Category.prototype.urlRoot = function() {
    return (_fr.apiUrl()) + "/categories";
  };

  return Category;

})(FellRace.Model);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.Checkpoint = (function(superClass) {
  extend(Checkpoint, superClass);

  function Checkpoint() {
    this.jsonForPublication = bind(this.jsonForPublication, this);
    this.getSlug = bind(this.getSlug, this);
    this.getColour = bind(this.getColour, this);
    this.getPubZoom = bind(this.getPubZoom, this);
    this.getLatLng = bind(this.getLatLng, this);
    this.placed = bind(this.placed, this);
    this.setColourFromRace = bind(this.setColourFromRace, this);
    return Checkpoint.__super__.constructor.apply(this, arguments);
  }

  Checkpoint.prototype.singular_name = 'checkpoint';

  Checkpoint.prototype.isPoint = true;

  Checkpoint.prototype.initialize = function() {
    Checkpoint.__super__.initialize.apply(this, arguments);
    if (!this.isNew()) {
      this.placed();
    }
    this.on("change:lat", (function(_this) {
      return function(model, val, opts) {
        _this.placed();
        return _this.setGridrefFromLatLng(opts);
      };
    })(this));
    this.on("change:name", (function(_this) {
      return function(model, val, opts) {
        return _this.set({
          slug: _.str.slugify(val)
        }, opts);
      };
    })(this));
    if (this.race = this.collection.race) {
      this.set({
        colour: this.race.getColour(),
        race_selected: this.race.selected()
      });
      return this.listenTo(this.race, "change:route_colour", this.setColourFromRace);
    } else if (this.race_publication = this.collection.race_publication) {
      this.set({
        colour: this.race_publication.getColour(),
        race_selected: this.race_publication.selected()
      });
      return this.listenTo(this.race_publication, "change:selected", this.setRaceSelected);
    }
  };

  Checkpoint.prototype.setColourFromRace = function(model, value, options) {
    return this.set({
      colour: value
    });
  };

  Checkpoint.prototype.placed = function() {
    return this.set({
      placed: this.has('lat') && this.has('lng')
    });
  };

  Checkpoint.prototype.getLatLng = function() {
    if (this.has("lat") && this.has("lng")) {
      return new google.maps.LatLng(this.get("lat"), this.get("lng"));
    }
  };

  Checkpoint.prototype.getPubZoom = function() {
    var ref;
    return (ref = this.race_publication) != null ? ref.getPubZoom() : void 0;
  };

  Checkpoint.prototype.setGridrefFromLatLng = function(opts) {
    var gb36, lat, lng, wgs84;
    lat = this.get("lat");
    lng = this.get("lng");
    if (lat && lng) {
      wgs84 = new LatLon(lat, lng);
      gb36 = CoordTransform.convertWGS84toOSGB36(wgs84);
      return this.set({
        gridref: OsGridRef.latLongToOsGrid(gb36).toString(6)
      }, opts);
    } else {
      return this.set({
        gridref: null
      }, opts);
    }
  };

  Checkpoint.prototype.getColour = function() {
    if (this.has("colour")) {
      return this.get("colour");
    } else {
      return this.collection.getColour();
    }
  };

  Checkpoint.prototype.getSlug = function() {
    return this.get("slug") || _.str.slugify(this.get("name"));
  };

  Checkpoint.prototype.jsonForPublication = function() {
    return {
      pos: this.get("pos"),
      name: this.get("name"),
      lat: this.get("lat"),
      lng: this.get("lng"),
      gridref: this.get("gridref"),
      fixed: this.get("fixed"),
      colour: this.getColour(),
      slug: this.getSlug()
    };
  };

  return Checkpoint;

})(FellRace.Model);var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.Club = (function(superClass) {
  extend(Club, superClass);

  function Club() {
    return Club.__super__.constructor.apply(this, arguments);
  }

  Club.prototype.singular_name = 'club';

  Club.prototype.defaults = {
    entry_count: 0
  };

  Club.prototype.urlRoot = function() {
    return (_fr.apiUrl()) + "/clubs";
  };

  Club.prototype.build = function() {
    this.competitors = new FellRace.Collections.Competitors(this.get("competitors") || []);
    return this.on("change:competitors", (function(_this) {
      return function(model, data) {
        return _this.competitors.reset(data);
      };
    })(this));
  };

  return Club;

})(FellRace.Model);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.Competitor = (function(superClass) {
  extend(Competitor, superClass);

  function Competitor() {
    this.build = bind(this.build, this);
    this.toJSON = bind(this.toJSON, this);
    this.urlRoot = bind(this.urlRoot, this);
    return Competitor.__super__.constructor.apply(this, arguments);
  }

  Competitor.prototype.singular_name = 'competitor';

  Competitor.prototype.validation = {
    forename: {
      required: true
    },
    surname: {
      required: true
    },
    postal_address_line_1: {
      required: true
    },
    postcode: {
      required: true
    }
  };

  Competitor.prototype.urlRoot = function() {
    return (_fr.apiUrl()) + "/competitors";
  };

  Competitor.prototype.toJSON = function() {
    var json;
    json = Competitor.__super__.toJSON.apply(this, arguments);
    if (this.get("image_changed") == null) {
      delete json.competitor["picture"];
    }
    return json;
  };

  Competitor.prototype.build = function() {
    this.performances = new FellRace.Collections.Performances(this.get("performances"), {
      competitor: this
    });
    this.entries = new FellRace.Collections.Entries(this.get("entries"));
    this.entries.url = (_fr.apiUrl()) + "/entries";
    this.set({
      performances_count: this.performances.length
    });
    this.on("change:performances", (function(_this) {
      return function(model, data) {
        return _this.performances.reset(data);
      };
    })(this));
    return this.on("change:entries", (function(_this) {
      return function(model, data) {
        return _this.entries.reset(data);
      };
    })(this));
  };

  return Competitor;

})(FellRace.Model);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.Entry = (function(superClass) {
  extend(Entry, superClass);

  function Entry() {
    this.matchString = bind(this.matchString, this);
    this.name = bind(this.name, this);
    this.build = bind(this.build, this);
    return Entry.__super__.constructor.apply(this, arguments);
  }

  Entry.prototype.singular_name = 'entry';

  Entry.prototype.validation = {
    terms_accepted: {
      acceptance: true
    },
    emergency_contact_name: {
      required: true
    },
    emergency_contact_phone: {
      required: true
    }
  };

  Entry.prototype.initialize = function() {
    Entry.__super__.initialize.apply(this, arguments);
    if (this.collection) {
      this.on("change:paid change:accepted change:cancelled", (function(_this) {
        return function() {
          return _this.collection.trigger("update_counts");
        };
      })(this));
      return this.on("change:cancelled", (function(_this) {
        return function(model, val) {
          return _this.collection.trigger("model:change:cancelled", model, val);
        };
      })(this));
    }
  };

  Entry.prototype.build = function() {
    return this.competitor = new FellRace.Models.Competitor;
  };

  Entry.prototype.name = function() {
    var name;
    name = this.get("forename");
    if (this.get("middlename")) {
      name += " " + (this.get("middlename"));
    }
    return name + " " + (this.get("surname"));
  };

  Entry.prototype.matchString = function() {
    return [this.get("forename"), this.get("surname"), this.get("club_name"), this.get("category")].join(" ");
  };

  return Entry;

})(FellRace.Model);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.Instance = (function(superClass) {
  extend(Instance, superClass);

  function Instance() {
    this.inPast = bind(this.inPast, this);
    this.inFuture = bind(this.inFuture, this);
    this.getDate = bind(this.getDate, this);
    this.getPerformancesCount = bind(this.getPerformancesCount, this);
    this.upload_error = bind(this.upload_error, this);
    this.upload_end = bind(this.upload_end, this);
    this.upload_progress = bind(this.upload_progress, this);
    this.upload_begin = bind(this.upload_begin, this);
    this.sync = bind(this.sync, this);
    this.formdata = bind(this.formdata, this);
    this.validate = bind(this.validate, this);
    this.filename = bind(this.filename, this);
    this.buildWinner = bind(this.buildWinner, this);
    this.buildPerformances = bind(this.buildPerformances, this);
    this.updateClubData = bind(this.updateClubData, this);
    this.updateCategoryData = bind(this.updateCategoryData, this);
    this.updateEntryData = bind(this.updateEntryData, this);
    this.setEntryCounts = bind(this.setEntryCounts, this);
    this.moveEntry = bind(this.moveEntry, this);
    this.partitionEntries = bind(this.partitionEntries, this);
    this.buildEntries = bind(this.buildEntries, this);
    this.buildCheckpoints = bind(this.buildCheckpoints, this);
    this.setEntryFlags = bind(this.setEntryFlags, this);
    this.buildDates = bind(this.buildDates, this);
    this.build = bind(this.build, this);
    return Instance.__super__.constructor.apply(this, arguments);
  }

  Instance.prototype.singular_name = 'instance';

  Instance.prototype.savedAttributes = ["name", "date", "summary", "online_entry_opening", "online_entry_closing", "online_entry", "online_entry_fee", "entry_limit", "time", "pre_entry", "postal_entry", "postal_entry_fee", "postal_entry_opening", "postal_entry_closing", "postal_entry_address", "eod", "eod_fee", "excluded", "category_names"];

  Instance.prototype.defaults = {
    entry_data: {},
    club_entry_data: {},
    cat_data: {},
    summary: ""
  };

  Instance.prototype.validation = {
    date: {
      required: true
    },
    name: {
      required: true
    }
  };

  Instance.prototype.build = function() {
    if (!this.isNew()) {
      this.buildDates();
      this.buildEntries();
      this.buildCheckpoints();
      this.buildPerformances();
      return this.buildWinner();
    }
  };

  Instance.prototype.buildDates = function() {
    var attribute, date, j, len, ref;
    ref = ["date", "postal_entry_opening", "postal_entry_closing", "online_entry_opening", "online_entry_closing"];
    for (j = 0, len = ref.length; j < len; j++) {
      attribute = ref[j];
      if (date = this.get(attribute)) {
        this.set(attribute, Date.parse(date));
        this.on("change:" + attribute, this.setEntryFlags);
      }
    }
    return this.setEntryFlags();
  };

  Instance.prototype.setEntryFlags = function() {
    var now;
    now = new Date;
    this.set("online_entry_active", this.get('online_entry') && ((this.get("online_entry_opening") < now && now < this.get("online_entry_closing"))));
    return this.set("postal_entry_active", this.get('postal_entry') && this.get('entry_form') && ((this.get("postal_entry_opening") < now && now < this.get("postal_entry_closing"))));
  };

  Instance.prototype.buildCheckpoints = function() {
    this.checkpoints = new FellRace.Collections.Checkpoints(this.get("checkpoints"));
    return this.on("change:checkpoints", (function(_this) {
      return function(model, data) {
        return _this.checkpoints.reset(data);
      };
    })(this));
  };

  Instance.prototype.buildEntries = function() {
    this.entries = new FellRace.Collections.Entries([], {
      instance: this,
      url: (this.url()) + "/entries"
    });
    this.entries.on("add remove reset update_counts", this.setEntryCounts);
    this.entries.on("model:change:cancelled", this.moveEntry);
    this.active_entries = new FellRace.Collections.Entries([]);
    this.cancelled_entries = new FellRace.Collections.Entries([]);
    if (this.get("entries")) {
      this.partitionEntries();
    }
    return this.on("change:entries", this.partitionEntries);
  };

  Instance.prototype.partitionEntries = function() {
    var active_entries, cancelled_entries, ref;
    this.entries.reset(this.get('entries'));
    ref = this.entries.partition(function(e) {
      return e.get('cancelled');
    }), cancelled_entries = ref[0], active_entries = ref[1];
    this.active_entries.reset(active_entries);
    return this.cancelled_entries.reset(cancelled_entries);
  };

  Instance.prototype.moveEntry = function(model, cancelled) {
    if (cancelled) {
      this.active_entries.remove(model);
      return this.cancelled_entries.add(model);
    } else {
      this.cancelled_entries.remove(model);
      return this.active_entries.add(model);
    }
  };

  Instance.prototype.setEntryCounts = function() {
    var cat_counts, club_counts, online_count, online_fee, online_income, postal_count;
    this.set({
      cancelled_count: this.cancelled_entries.length
    });
    this.set({
      total_count: this.entries.length
    });
    postal_count = 0;
    online_count = 0;
    online_income = 0;
    online_fee = 0;
    club_counts = {};
    cat_counts = {};
    this.entries.each(function(entry) {
      var cost, fee, name, name1;
      if (club_counts[name = entry.get('club_name')] == null) {
        club_counts[name] = 0;
      }
      club_counts[entry.get('club_name')] += 1;
      if (cat_counts[name1 = entry.get('category')] == null) {
        cat_counts[name1] = 0;
      }
      cat_counts[entry.get('category')] += 1;
      if (entry.get('paid')) {
        online_count += 1;
        cost = entry.get('cost');
        fee = cost * 0.049 + 20;
        online_income += entry.get('cost') - fee;
        return online_fee += fee;
      } else {
        return postal_count += 1;
      }
    });
    this.set({
      online_count: online_count,
      online_total_income: online_income,
      online_total_fee: online_fee,
      postal_count: postal_count
    });
    this.updateEntryData();
    this.updateCategoryData(cat_counts);
    return this.updateClubData(club_counts);
  };

  Instance.prototype.updateEntryData = function() {
    return this.set('entry_data', {
      labels: ["postal", "online", "available"],
      series: [this.get('postal_count'), this.get('online_count'), this.get('entry_limit') - this.get('total_count')]
    });
  };

  Instance.prototype.updateCategoryData = function(counts) {
    var c, f_cats, f_matches, i, j, k, len, len1, m_cats, m_matches, ref;
    ref = _.partition(this.get('category_names'), function(c) {
      return c[0] === 'F';
    }), f_cats = ref[0], m_cats = ref[1];
    f_matches = m_matches = 0;
    for (i = j = 0, len = f_cats.length; j < len; i = ++j) {
      c = f_cats[i];
      if (c[1] === 'U') {
        f_cats.splice(f_matches++, 0, f_cats.splice(i, 1)[0]);
      }
    }
    for (i = k = 0, len1 = m_cats.length; k < len1; i = ++k) {
      c = m_cats[i];
      if (c[1] === 'U') {
        m_cats.splice(m_matches++, 0, m_cats.splice(i, 1)[0]);
      }
    }
    return this.set('cat_data', {
      labels: _.map(f_cats, function(c) {
        return c.substr(1) || 'S';
      }),
      series: [
        _.map(f_cats, function(c) {
          var ref1;
          return {
            value: (ref1 = counts[c]) != null ? ref1 : 0,
            meta: c
          };
        }), _.map(m_cats, function(c) {
          var ref1;
          return {
            value: (ref1 = counts[c]) != null ? ref1 : 0,
            meta: c
          };
        })
      ]
    });
  };

  Instance.prototype.updateClubData = function(counts) {
    return this.set('club_data', {
      labels: _.keys(counts),
      series: [_.values(counts)]
    });
  };

  Instance.prototype.buildPerformances = function() {
    this.performances = new FellRace.Collections.Performances(this.get("performances"), {
      instance: this
    });
    this.on("change:performances", (function(_this) {
      return function(model, data) {
        return _this.performances.reset(data);
      };
    })(this));
    return this.performances.url = (this.url()) + "/performances";
  };

  Instance.prototype.buildWinner = function() {
    this.winner = new FellRace.Models.Competitor(this.get("winner"));
    return this.on("change:winner", (function(_this) {
      return function(model, winner) {
        _this.winner.clear();
        return _this.winner.set(winner);
      };
    })(this));
  };

  Instance.prototype.filename = function() {
    var ref;
    return (ref = this.get('file')) != null ? ref.name : void 0;
  };

  Instance.prototype.validate = function(attrs, options) {
    return void 0;
  };

  Instance.prototype.formdata = function() {
    var formdata;
    formdata = new FormData();
    _.each(this.attributes, (function(_this) {
      return function(value, key, list) {
        if (!((key === "file" && !_this.get("file_changed")) || (key === "entry_form" && !_this.get("entry_form_changed")))) {
          return formdata.append("instance[" + key + "]", value);
        }
      };
    })(this));
    return formdata;
  };

  Instance.prototype.sync = function(method, model, options) {
    if (!(this.get("file_changed") || this.get("entry_form_changed"))) {
      return Instance.__super__.sync.apply(this, arguments);
    }
    options.data = this.formdata();
    options.contentType = false;
    options.processData = false;
    options.xhr = (function(_this) {
      return function() {
        var xhr;
        xhr = $.ajaxSettings.xhr();
        xhr.upload.onloadstart = _this.upload_begin;
        xhr.upload.onprogress = _this.upload_progress;
        xhr.upload.onloadend = _this.upload_end;
        xhr.upload.onerror = _this.upload_error;
        return xhr;
      };
    })(this);
    return Instance.__super__.sync.call(this, method, model, options);
  };

  Instance.prototype.upload_begin = function() {
    this.trigger("freeze");
    return $.notify("start:progress", "Uploading " + (this.filename()));
  };

  Instance.prototype.upload_progress = function(e) {
    var percentage;
    if (e && e.lengthComputable) {
      percentage = parseInt(e.loaded / e.total * 100, 10);
      return $.notify("progress", percentage);
    }
  };

  Instance.prototype.upload_end = function() {
    $.notify("finish:progress");
    this.set({
      file_changed: false,
      entry_form_changed: false
    }, {
      silent: true
    });
    return this.trigger("thaw");
  };

  Instance.prototype.upload_error = function(model, xhr, options) {
    return $.notify("error", "upload failed");
  };

  Instance.prototype.getPerformancesCount = function() {
    return this.get("performances_count");
  };

  Instance.prototype.getDate = function() {
    return this.get("date");
  };

  Instance.prototype.inFuture = function() {
    var date;
    if (date = this.getDate()) {
      return date > Date.now();
    }
  };

  Instance.prototype.inPast = function() {
    var date;
    if (date = this.getDate()) {
      return date < Date.now();
    }
  };

  return Instance;

})(FellRace.Model);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.Link = (function(superClass) {
  extend(Link, superClass);

  function Link() {
    this.jsonForPublication = bind(this.jsonForPublication, this);
    return Link.__super__.constructor.apply(this, arguments);
  }

  Link.prototype.singular_name = 'link';

  Link.prototype.defaults = {
    title: null,
    url: null
  };

  Link.prototype.jsonForPublication = function() {
    return {
      id: this.id,
      title: this.get("title"),
      url: this.get("url")
    };
  };

  return Link;

})(FellRace.Model);var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Notification = (function(superClass) {
  extend(Notification, superClass);

  function Notification() {
    return Notification.__super__.constructor.apply(this, arguments);
  }

  return Notification;

})(Backbone.Events);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.Payment = (function(superClass) {
  extend(Payment, superClass);

  function Payment() {
    this.luhnCheck = bind(this.luhnCheck, this);
    this.cardType = bind(this.cardType, this);
    this.validateCardNumber = bind(this.validateCardNumber, this);
    this.validateYear = bind(this.validateYear, this);
    return Payment.__super__.constructor.apply(this, arguments);
  }

  Payment.prototype.singular_name = 'payment';

  Payment.prototype.validation = {
    card_number: {
      required: true,
      fn: "validateCardNumber"
    },
    exp_month: {
      required: true,
      pattern: "digits",
      length: 2
    },
    exp_year: {
      required: true,
      fn: "validateYear"
    },
    cvc: {
      required: true,
      pattern: "digits",
      length: 3
    }
  };

  Payment.prototype.validateYear = function(value, attr, computedState) {
    if (!value) {
      return "Year is required";
    } else if (!(/^\d+$/.test(value) && value.length === 2 || value.length === 4)) {
      return "Year should contain two or four digits";
    }
  };

  Payment.prototype.validateCardNumber = function(value, attr, computedState) {
    var type;
    if (/[^0-9-\s]+/.test(value)) {
      return false;
    }
    if (this.luhnCheck(value)) {
      type = this.cardType(value);
      this.set("card_type", type);
      return null;
    } else {
      this.set("card_type", null);
      return "Not a valid credit card number.";
    }
  };

  Payment.prototype.cardType = function(value) {
    if (/^5[1-5]/.test(value)) {
      return "mastercard";
    } else if (/^4/.test(value)) {
      return "visa";
    } else if (/^3[47]/.test(value)) {
      return "amex";
    }
  };

  Payment.prototype.luhnCheck = function(ccNum) {
    var arr, bit, len, sum, val;
    arr = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9];
    len = ccNum.length;
    bit = 1;
    sum = 0;
    while (len--) {
      val = parseInt(ccNum.charAt(len), 10);
      sum += (bit ^= 1) ? arr[val] : val;
    }
    return sum && sum % 10 === 0;
  };

  return Payment;

})(FellRace.Model);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.Performance = (function(superClass) {
  extend(Performance, superClass);

  function Performance() {
    this.matchString = bind(this.matchString, this);
    this.getSortTime = bind(this.getSortTime, this);
    this.getSortPos = bind(this.getSortPos, this);
    this.getSortName = bind(this.getSortName, this);
    return Performance.__super__.constructor.apply(this, arguments);
  }

  Performance.prototype.singular_name = 'performance';

  Performance.prototype.getSortName = function() {
    return this.get("competitor_surname") || this.get("surname");
  };

  Performance.prototype.getSortPos = function() {
    var pos;
    pos = this.get("position");
    if (pos === 0) {
      pos = 9999999999;
    }
    return pos;
  };

  Performance.prototype.getSortTime = function() {
    var time;
    time = this.get("time");
    if (time === 0) {
      time = 9999999999;
    }
    return time;
  };

  Performance.prototype.matchString = function() {
    return [this.get("forename"), this.get("surname"), this.get("cat"), this.get("club"), this.get("cat_name"), this.get("club_name")].join(" ");
  };

  return Performance;

})(FellRace.Model);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.PublicCheckpoint = (function(superClass) {
  extend(PublicCheckpoint, superClass);

  function PublicCheckpoint() {
    this.getLatLng = bind(this.getLatLng, this);
    return PublicCheckpoint.__super__.constructor.apply(this, arguments);
  }

  PublicCheckpoint.prototype.isPoint = true;

  PublicCheckpoint.prototype.initialize = function() {
    this.race_publication = this.collection.race_publication;
    this.race_publication.on("change:selected", (function(_this) {
      return function() {
        return _this.set({
          selected: _this.race_publication.selected()
        });
      };
    })(this));
    return this.set({
      selected: this.race_publication.selected()
    });
  };

  PublicCheckpoint.prototype.getLatLng = function() {
    if (this.has("lat") && this.has("lng")) {
      return new google.maps.LatLng(this.get("lat"), this.get("lng"));
    }
  };

  return PublicCheckpoint;

})(Backbone.Model);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.PublicInstance = (function(superClass) {
  extend(PublicInstance, superClass);

  function PublicInstance() {
    this.updateClubData = bind(this.updateClubData, this);
    this.updateCategoryData = bind(this.updateCategoryData, this);
    this.updateEntryData = bind(this.updateEntryData, this);
    this.setEntryCounts = bind(this.setEntryCounts, this);
    this.getDateTime = bind(this.getDateTime, this);
    this.getDate = bind(this.getDate, this);
    this.inPast = bind(this.inPast, this);
    this.inFuture = bind(this.inFuture, this);
    this.setEntryFlags = bind(this.setEntryFlags, this);
    this.getPerformancesCount = bind(this.getPerformancesCount, this);
    this.buildWinner = bind(this.buildWinner, this);
    this.rootPerformances = bind(this.rootPerformances, this);
    this.build = bind(this.build, this);
    return PublicInstance.__super__.constructor.apply(this, arguments);
  }

  PublicInstance.prototype.initialize = function(opts) {
    return this.build();
  };

  PublicInstance.prototype.build = function() {
    var att, date, j, len, ref;
    this.entries = new FellRace.Collections.Entries(_.filter(this.get("entries"), function(e) {
      return !e.cancelled;
    }), {
      instance: this
    });
    this.performances = new FellRace.Collections.Performances(this.get("performances"), {
      instance: this
    });
    this.checkpoints = new FellRace.Collections.Checkpoints(this.get("checkpoints"));
    this.rootPerformances();
    ref = ["date", "postal_entry_opening", "postal_entry_closing", "online_entry_opening", "online_entry_closing"];
    for (j = 0, len = ref.length; j < len; j++) {
      att = ref[j];
      date = this.get(att);
      if (date != null) {
        this.set(att, Date.parse(date));
      }
      this.on("change:" + att, this.setEntryFlags);
    }
    this.entries.url = (this.url()) + "/entries";
    this.entries.on("add remove reset", (function(_this) {
      return function() {
        _this.set({
          total_entries: _this.entries.length
        });
        return _this.count;
      };
    })(this));
    _.each(["performances", "entries", "checkpoints"], (function(_this) {
      return function(collection) {
        return _this.on("change:" + collection, function(model, data) {
          _this[collection].reset(data);
          if (collection === "performances") {
            return _this.rootPerformances();
          }
        });
      };
    })(this));
    this.setEntryFlags();
    return this.buildWinner();
  };

  PublicInstance.prototype.rootPerformances = function() {
    return this.performances.each((function(_this) {
      return function(p) {
        return p.set({
          race_slug: _this.get("race_slug"),
          instance_name: _this.get("name")
        });
      };
    })(this));
  };

  PublicInstance.prototype.buildWinner = function() {
    this.winner = new FellRace.Models.Competitor(this.get("winner"));
    return this.on("change:winner", (function(_this) {
      return function(model, winner) {
        _this.winner.clear();
        return _this.winner.set(winner);
      };
    })(this));
  };

  PublicInstance.prototype.getPerformancesCount = function() {
    return this.get("performances_count");
  };

  PublicInstance.prototype.setEntryFlags = function() {
    var now;
    now = new Date;
    this.set("online_entry_active", this.get('online_entry') && this.get("online_entry_opening") && this.get("online_entry_closing") && ((this.get("online_entry_opening") < now && now < this.get("online_entry_closing"))));
    return this.set("postal_entry_active", this.get('postal_entry') && !!this.get('entry_form') && this.get("postal_entry_opening") && this.get("postal_entry_closing") && ((this.get("postal_entry_opening") < now && now < this.get("postal_entry_closing"))));
  };

  PublicInstance.prototype.inFuture = function() {
    var datetime;
    if (datetime = this.getDateTime()) {
      return datetime > Date.now();
    }
  };

  PublicInstance.prototype.inPast = function() {
    var datetime;
    if (datetime = this.getDateTime()) {
      return datetime < Date.now();
    }
  };

  PublicInstance.prototype.getDate = function() {
    return this.get("date");
  };

  PublicInstance.prototype.getDateTime = function() {
    var date, datetime, time;
    if (date = this.getDate()) {
      datetime = new Date(date);
      if (this.get('time')) {
        time = _.map(this.get('time').split(':'), function(t) {
          return parseInt(t, 10);
        });
        datetime.setHours.apply(datetime, time);
      }
      return datetime;
    }
  };

  PublicInstance.prototype.setEntryCounts = function() {
    var cat_counts, club_counts, online_count, postal_count;
    this.set({
      total_count: this.entries.length
    });
    postal_count = 0;
    online_count = 0;
    club_counts = {};
    cat_counts = {};
    this.entries.each(function(entry) {
      var name, name1;
      if (club_counts[name = entry.get('club_name')] == null) {
        club_counts[name] = 0;
      }
      club_counts[entry.get('club_name')] += 1;
      if (cat_counts[name1 = entry.get('category')] == null) {
        cat_counts[name1] = 0;
      }
      cat_counts[entry.get('category')] += 1;
      if (entry.get('paid')) {
        return online_count += 1;
      } else {
        return postal_count += 1;
      }
    });
    this.set({
      online_count: online_count,
      postal_count: postal_count
    });
    this.updateEntryData();
    this.updateCategoryData(cat_counts);
    return this.updateClubData(club_counts);
  };

  PublicInstance.prototype.updateEntryData = function() {
    return this.set('entry_data', {
      labels: ["postal", "online", "available"],
      series: [this.get('postal_count'), this.get('online_count'), this.get('entry_limit') - this.get('total_count')]
    });
  };

  PublicInstance.prototype.updateCategoryData = function(counts) {
    var c, f_cats, f_matches, i, j, l, len, len1, m_cats, m_matches, ref;
    ref = _.partition(this.get('category_names'), function(c) {
      return c[0] === 'F';
    }), f_cats = ref[0], m_cats = ref[1];
    f_matches = m_matches = 0;
    for (i = j = 0, len = f_cats.length; j < len; i = ++j) {
      c = f_cats[i];
      if (c[1] === 'U') {
        f_cats.splice(f_matches++, 0, f_cats.splice(i, 1)[0]);
      }
    }
    for (i = l = 0, len1 = m_cats.length; l < len1; i = ++l) {
      c = m_cats[i];
      if (c[1] === 'U') {
        m_cats.splice(m_matches++, 0, m_cats.splice(i, 1)[0]);
      }
    }
    return this.set('cat_data', {
      labels: _.map(f_cats, function(c) {
        return c.substr(1) || 'S';
      }),
      series: [
        _.map(f_cats, function(c) {
          var ref1;
          return {
            value: (ref1 = counts[c]) != null ? ref1 : 0,
            meta: c
          };
        }), _.map(m_cats, function(c) {
          var ref1;
          return {
            value: (ref1 = counts[c]) != null ? ref1 : 0,
            meta: c
          };
        })
      ]
    });
  };

  PublicInstance.prototype.updateClubData = function(counts) {
    var labels, not_taken, sorted_clubs, top_clubs, total_others, values;
    sorted_clubs = _.sortBy(_.keys(counts), function(k) {
      return -counts[k];
    });
    top_clubs = sorted_clubs.splice(0, 20);
    total_others = sorted_clubs.reduce(function(t, s) {
      return t + parseInt(counts[s], 10);
    }, 0);
    not_taken = this.get('entry_limit') - this.get('total_count');
    labels = top_clubs.concat(['Other', 'Available']);
    values = _.map(top_clubs, function(k) {
      return counts[k];
    }).concat([total_others, not_taken]);
    return this.set('club_data', {
      labels: labels,
      series: values
    });
  };

  return PublicInstance;

})(Backbone.Model);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.RacePublication = (function(superClass) {
  extend(RacePublication, superClass);

  function RacePublication() {
    this.nextOrRecentInstance = bind(this.nextOrRecentInstance, this);
    this.fetchPermissions = bind(this.fetchPermissions, this);
    this.getBounds = bind(this.getBounds, this);
    this.getRoute = bind(this.getRoute, this);
    this.getColour = bind(this.getColour, this);
    this.selected = bind(this.selected, this);
    this.toggleSelect = bind(this.toggleSelect, this);
    this.deselect = bind(this.deselect, this);
    this.select = bind(this.select, this);
    this.setUrls = bind(this.setUrls, this);
    this.partitionInstances = bind(this.partitionInstances, this);
    this.buildInstances = bind(this.buildInstances, this);
    this.build = bind(this.build, this);
    this.url = bind(this.url, this);
    return RacePublication.__super__.constructor.apply(this, arguments);
  }

  RacePublication.prototype.idAttribute = "slug";

  RacePublication.prototype.url = function() {
    return (_fr.apiUrl()) + "/race_publications/" + (this.get("slug"));
  };

  RacePublication.prototype.initialize = function() {
    this.build();
    this.on("select", this.select);
    this.on("deselect", this.deselect);
    return this.on("toggle_select", this.toggleSelect);
  };

  RacePublication.prototype.build = function() {
    this.attachments = new FellRace.Collections.Attachments(this.get("attachments") || []);
    this.records = new FellRace.Collections.Records(this.get("records") || []);
    this.links = new FellRace.Collections.Links(this.get("links") || []);
    this.checkpoints = new FellRace.Collections.PublicCheckpoints(this.get("checkpoints") || [], {
      race_publication: this
    });
    this.setUrls();
    this.buildInstances();
    return _.each(["attachments", "checkpoints", "records", "links"], (function(_this) {
      return function(collection) {
        return _this.on("change:" + collection, function(model, data) {
          return _this[collection].reset(data);
        });
      };
    })(this));
  };

  RacePublication.prototype.buildInstances = function() {
    this.past_instances = new FellRace.Collections.PublicPastInstances([], {
      race_publication: this,
      url: (this.url()) + "/instances"
    });
    this.future_instances = new FellRace.Collections.PublicFutureInstances([], {
      race_publication: this,
      url: (this.url()) + "/instances"
    });
    if (this.get("instances")) {
      this.partitionInstances();
    }
    return this.on("change:instances", this.partitionInstances);
  };

  RacePublication.prototype.partitionInstances = function() {
    var future_instances, past_instances, ref;
    ref = _.partition(this.get("instances"), function(e) {
      return new Date(e.date) < Date.now();
    }), past_instances = ref[0], future_instances = ref[1];
    this.past_instances.reset(past_instances);
    return this.future_instances.reset(future_instances);
  };

  RacePublication.prototype.setUrls = function() {
    var url_stem;
    url_stem = this.url();
    return this.attachments.url = url_stem + "/attachments";
  };

  RacePublication.prototype.select = function() {
    if (!this.selected()) {
      _fr.moveMapTo(this);
      this.collection.deselectAll();
      return this.set({
        selected: true
      });
    }
  };

  RacePublication.prototype.deselect = function() {
    return this.set({
      selected: false
    });
  };

  RacePublication.prototype.toggleSelect = function() {
    if (this.selected()) {
      return this.deselect();
    } else {
      return this.select();
    }
  };

  RacePublication.prototype.selected = function() {
    return this.get("selected");
  };

  RacePublication.prototype.getColour = function() {
    return this.get("colour");
  };

  RacePublication.prototype.getRoute = function() {
    return this.get("route") || this.get("checkpoint_route");
  };

  RacePublication.prototype.getBounds = function() {
    var bounds, route;
    if (route = this.getRoute()) {
      bounds = new google.maps.LatLngBounds();
      _.each(MapStick.decodePathString(route), (function(_this) {
        return function(point) {
          return bounds.extend(point);
        };
      })(this));
      return bounds;
    }
  };

  RacePublication.prototype.fetchPermissions = function() {
    return $.getJSON((this.url()) + "/permissions", (function(_this) {
      return function(data) {
        return _this.set(data);
      };
    })(this));
  };

  RacePublication.prototype.nextOrRecentInstance = function() {
    var instance;
    instance = this.future_instances.next();
    if (instance == null) {
      instance = this.past_instances.mostRecent();
    }
    return instance;
  };

  return RacePublication;

})(Backbone.Model);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.Race = (function(superClass) {
  extend(Race, superClass);

  function Race() {
    this.getBounds = bind(this.getBounds, this);
    this.getRoute = bind(this.getRoute, this);
    this.selected = bind(this.selected, this);
    this.toggleSelect = bind(this.toggleSelect, this);
    this.deselect = bind(this.deselect, this);
    this.select = bind(this.select, this);
    this.nextOrRecentInstance = bind(this.nextOrRecentInstance, this);
    this.jsonForPublication = bind(this.jsonForPublication, this);
    this.publish = bind(this.publish, this);
    this.getRouteDistance = bind(this.getRouteDistance, this);
    this.createRouteFromCheckpoints = bind(this.createRouteFromCheckpoints, this);
    this.setProfile = bind(this.setProfile, this);
    this.getPath = bind(this.getPath, this);
    this.getColour = bind(this.getColour, this);
    this.setUrls = bind(this.setUrls, this);
    this.partitionInstances = bind(this.partitionInstances, this);
    this.buildInstances = bind(this.buildInstances, this);
    this.build = bind(this.build, this);
    this.url = bind(this.url, this);
    this.isNew = bind(this.isNew, this);
    this.toJSON = bind(this.toJSON, this);
    return Race.__super__.constructor.apply(this, arguments);
  }

  Race.prototype.singular_name = 'race';

  Race.prototype.savedAttributes = ["name", "description", "cat", "climb", "distance", "requirements", "encoded_route", "route_profile", "route_colour", "route_elevation", "shr_id", "organiser_name", "organiser_email", "organiser_phone", "organiser_address", "picture"];

  Race.prototype.toJSON = function() {
    var json;
    json = Race.__super__.toJSON.apply(this, arguments);
    if (this.get("image_changed") == null) {
      delete json.race["picture"];
    }
    return json;
  };

  Race.prototype.isNew = function() {
    return !this.get("slug");
  };

  Race.prototype.url = function() {
    return (_fr.apiUrl()) + "/races/" + (this.get("slug"));
  };

  Race.prototype.build = function() {
    this.attachments = new FellRace.Collections.Attachments(this.get("attachments"), {
      race: this
    });
    this.checkpoints = new FellRace.Collections.Checkpoints(this.get("checkpoints"), {
      race: this
    });
    this.records = new FellRace.Collections.Records(this.get("records"), {
      race: this
    });
    this.links = new FellRace.Collections.Links(this.get("links"), {
      race: this
    });
    _.each(["attachments", "checkpoints", "records", "links"], (function(_this) {
      return function(collection) {
        return _this.on("change:" + collection, function(model, data) {
          return _this[collection].reset(data);
        });
      };
    })(this));
    if (this.isNew()) {
      this.once("sync", (function(_this) {
        return function() {
          return _this.setUrls();
        };
      })(this));
    } else {
      this.setUrls();
    }
    this.buildInstances();
    this.on("select", this.select);
    this.on("deselect", this.deselect);
    this.on("toggle_select", this.toggleSelect);
    this.elevator = new google.maps.ElevationService();
    return this.on("change:encoded_route", this.setProfile);
  };

  Race.prototype.buildInstances = function() {
    this.past_instances = new FellRace.Collections.PastInstances([], {
      race: this,
      url: (this.url()) + "/instances"
    });
    this.future_instances = new FellRace.Collections.FutureInstances([], {
      race: this,
      url: (this.url()) + "/instances"
    });
    if (this.get("instances")) {
      this.partitionInstances();
    }
    return this.on("change:instances", this.partitionInstances);
  };

  Race.prototype.partitionInstances = function() {
    var divider, future_instances, past_instances, ref;
    divider = new Date();
    ref = _.partition(this.get("instances"), function(e) {
      return new Date(e.date) < divider;
    }), past_instances = ref[0], future_instances = ref[1];
    this.past_instances.reset(past_instances);
    return this.future_instances.reset(future_instances);
  };

  Race.prototype.setUrls = function() {
    var url_stem;
    url_stem = this.url();
    this.attachments.url = url_stem + "/attachments";
    this.checkpoints.url = url_stem + "/checkpoints";
    this.records.url = url_stem + "/records";
    return this.links.url = url_stem + "/links";
  };

  Race.prototype.getColour = function() {
    return this.get("route_colour");
  };

  Race.prototype.getPath = function() {
    var encoded_route;
    if (encoded_route = this.get("encoded_route")) {
      return MapStick.decodePathString(encoded_route);
    }
  };

  Race.prototype.setProfile = function() {
    var path;
    path = this.getPath() || [];
    if (path.length > 1) {
      return this.elevator.getElevationAlongPath({
        path: path,
        samples: 256
      }, (function(_this) {
        return function(results) {
          var i, len, point, previous_elevation, total_elevation;
          total_elevation = 0;
          previous_elevation = null;
          for (i = 0, len = results.length; i < len; i++) {
            point = results[i];
            if (previous_elevation) {
              if (previous_elevation < point.elevation) {
                total_elevation += point.elevation - previous_elevation;
              }
            }
            previous_elevation = point.elevation;
          }
          return _this.set({
            route_profile: results.map(function(point) {
              return point.elevation;
            }).join(),
            route_elevation: Math.round(total_elevation)
          });
        };
      })(this));
    } else {
      return this.set({
        route_profile: null,
        route_elevation: 0
      });
    }
  };

  Race.prototype.createRouteFromCheckpoints = function() {
    return this.set({
      encoded_route: MapStick.encodePathString(this.checkpoints.toGooglePoints())
    });
  };

  Race.prototype.getRouteDistance = function() {
    var path;
    if (path = this.getPath()) {
      return Math.round(google.maps.geometry.spherical.computeLength(path) / 1000 * 100) / 100;
    } else {
      return 0;
    }
  };

  Race.prototype.publish = function() {
    var data;
    data = {
      published_json: this.jsonForPublication()
    };
    $.notify("publishing race");
    return $.post((this.url()) + "/publish", data, (function(_this) {
      return function(response) {
        return _fr.navigate("/races/" + (_this.get("slug")));
      };
    })(this), 'json');
  };

  Race.prototype.jsonForPublication = function() {
    var next_instance;
    next_instance = this.nextOrRecentInstance();
    return JSON.stringify({
      id: this.id,
      date: next_instance != null ? next_instance.get("date") : void 0,
      time: next_instance != null ? next_instance.get("time") : void 0,
      name: this.get("name"),
      slug: this.get("slug"),
      cat: this.get("cat"),
      climb: this.get("climb"),
      distance: this.get("distance"),
      description: this.get("description"),
      colour: this.get("route_colour"),
      organiser_email: this.get("organiser_email"),
      organiser_name: this.get("organiser_name"),
      organiser_address: this.get("organiser_address"),
      organiser_phone: this.get("organiser_phone"),
      shr_id: this.get("shr_id"),
      fb_event_id: this.get("fb_event_id"),
      twitter_id: this.get("twitter_id"),
      fra_id: this.get("fra_id"),
      requirements: this.get("requirements"),
      route_profile: this.get("route_profile"),
      route: this.get("encoded_route"),
      links: this.links.map(function(link) {
        return link.jsonForPublication();
      }),
      records: this.records.map(function(record) {
        return record.jsonForPublication();
      }),
      checkpoints: this.checkpoints.map(function(checkpoint) {
        return checkpoint.jsonForPublication();
      }),
      checkpoint_route: this.checkpoints.getEncodedRoute()
    });
  };

  Race.prototype.nextOrRecentInstance = function() {
    var instance;
    instance = this.future_instances.next();
    if (instance == null) {
      instance = this.past_instances.mostRecent();
    }
    return instance;
  };

  Race.prototype.select = function() {
    if (!this.selected()) {
      this.collection.deselectAll();
      return this.set({
        selected: true
      });
    }
  };

  Race.prototype.deselect = function() {
    return this.set({
      selected: false
    });
  };

  Race.prototype.toggleSelect = function() {
    if (this.selected()) {
      return this.deselect();
    } else {
      return this.select();
    }
  };

  Race.prototype.selected = function() {
    return this.get("selected");
  };

  Race.prototype.getRoute = function() {
    return this.get("encoded_route") || this.get("encoded_checkpoint_route");
  };

  Race.prototype.getBounds = function() {
    var bounds, route;
    if (route = this.getRoute()) {
      bounds = new google.maps.LatLngBounds();
      _.each(MapStick.decodePathString(route), (function(_this) {
        return function(point) {
          return bounds.extend(point);
        };
      })(this));
      return bounds;
    }
  };

  return Race;

})(FellRace.Model);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.Record = (function(superClass) {
  extend(Record, superClass);

  function Record() {
    this.jsonForPublication = bind(this.jsonForPublication, this);
    return Record.__super__.constructor.apply(this, arguments);
  }

  Record.prototype.singular_name = 'record';

  Record.prototype.defaults = {
    holder: null,
    year: null,
    label: null,
    elapsed_time: null
  };

  Record.prototype.jsonForPublication = function() {
    var ref;
    return {
      elapsed_time: (ref = this.get("elapsed_time")) != null ? ref.toSimplestTime() : void 0,
      holder: this.get("holder"),
      label: this.get("label"),
      year: this.get("year")
    };
  };

  return Record;

})(FellRace.Model);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.UserSession = (function(superClass) {
  extend(UserSession, superClass);

  function UserSession() {
    this.unsetCookie = bind(this.unsetCookie, this);
    this.setCookie = bind(this.setCookie, this);
    this.getCookie = bind(this.getCookie, this);
    this.cookieDomain = bind(this.cookieDomain, this);
    this.authToken = bind(this.authToken, this);
    this.authPending = bind(this.authPending, this);
    this.changedState = bind(this.changedState, this);
    this.setState = bind(this.setState, this);
    this.getState = bind(this.getState, this);
    this.confirmed = bind(this.confirmed, this);
    this.signedIn = bind(this.signedIn, this);
    this.setUser = bind(this.setUser, this);
    this.reset = bind(this.reset, this);
    this.load = bind(this.load, this);
    return UserSession.__super__.constructor.apply(this, arguments);
  }

  UserSession.unknownState = 'Unknown';

  UserSession.pendingState = 'Authentication in progress';

  UserSession.unconfirmedState = 'User account is not confirmed';

  UserSession.confirmedState = 'User account is confirmed';

  UserSession.failedState = 'User credentials are not correct';

  UserSession.prototype.defaults = {
    state: UserSession.unknownState,
    email: "",
    password: "",
    password_confirmation: ""
  };

  UserSession.prototype.initialize = function() {
    this.user = new FellRace.Models.User();
    return this.on("change:state", this.changedState);
  };

  UserSession.prototype.load = function() {
    if (this.authToken()) {
      this.set({
        state: FellRace.Models.UserSession.pendingState
      });
      return $.getJSON((_fr.apiUrl()) + "/users/me").done(this.setUser);
    }
  };

  UserSession.prototype.reset = function() {
    this.user.clear();
    this._token = null;
    this.setState();
    return this.unsetCookie();
  };

  UserSession.prototype.setUser = function(data) {
    this.user.set(data);
    this._token = null;
    this.setState();
    return this.setCookie();
  };

  UserSession.prototype.signedIn = function() {
    return this.user && !this.user.isNew();
  };

  UserSession.prototype.confirmed = function() {
    var ref;
    return (ref = this.user) != null ? ref.get("confirmed") : void 0;
  };

  UserSession.prototype.getState = function() {
    return this.get('state');
  };

  UserSession.prototype.setState = function() {
    if (!this.user || !this.user.get('uid')) {
      return this.set("state", FellRace.Models.UserSession.unknownState);
    } else if (this.user.get('confirmed')) {
      return this.set("state", FellRace.Models.UserSession.confirmedState);
    } else {
      return this.set("state", FellRace.Models.UserSession.unconfirmedState);
    }
  };

  UserSession.prototype.changedState = function(model, value, options) {
    return _fr.vent.trigger('auth.change', model, value);
  };

  UserSession.prototype.authPending = function() {
    return this.getState() === FellRace.Models.UserSession.pendingState;
  };

  UserSession.prototype.authToken = function() {
    var stored_token;
    if (this.signedIn()) {
      return this.user.get('uid') + this.user.get('authentication_token');
    } else if (stored_token = this.getCookie()) {
      return stored_token;
    }
  };

  UserSession.prototype.cookieDomain = function() {
    return "." + (_fr.domain());
  };

  UserSession.prototype.getCookie = function() {
    return $.cookie('fellrace_blah');
  };

  UserSession.prototype.setCookie = function() {
    var token;
    if (token = this.authToken()) {
      $.cookie('fellrace_blah', token, {
        domain: this.cookieDomain(),
        path: "/",
        expires: 7
      });
      return _fr.vent.trigger("login:changed");
    }
  };

  UserSession.prototype.unsetCookie = function() {
    $.removeCookie('fellrace_blah', {
      domain: this.cookieDomain(),
      path: "/"
    });
    return _fr.vent.trigger("login:changed");
  };

  return UserSession;

})(Backbone.Model);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Models.User = (function(superClass) {
  extend(User, superClass);

  function User() {
    this.goTo = bind(this.goTo, this);
    this.getLatLng = bind(this.getLatLng, this);
    this.setLocation = bind(this.setLocation, this);
    this.locationError = bind(this.locationError, this);
    this.watchLocation = bind(this.watchLocation, this);
    this.hasCompetitor = bind(this.hasCompetitor, this);
    this.showPosition = bind(this.showPosition, this);
    this.findUserLocation = bind(this.findUserLocation, this);
    this.getCompetitor = bind(this.getCompetitor, this);
    this.toJSON = bind(this.toJSON, this);
    this.urlRoot = bind(this.urlRoot, this);
    return User.__super__.constructor.apply(this, arguments);
  }

  User.prototype.defaults = {
    email: "",
    first_name: "",
    last_name: "",
    password: "",
    password_confirmation: "",
    desired_slug: "",
    uid: "",
    authentication_token: "",
    confirmed: false
  };

  User.prototype.isPoint = true;

  User.prototype.urlRoot = function() {
    return (_fr.apiUrl()) + "/users";
  };

  User.prototype.initialize = function() {
    this._competitor = new FellRace.Models.Competitor(this.get("competitor"));
    this.on("change:competitor", (function(_this) {
      return function() {
        return _this._competitor.set(_this.get("competitor"));
      };
    })(this));
    return this.set({
      geo_location: Modernizr.geolocation
    });
  };

  User.prototype.toJSON = function() {
    var json;
    return json = {
      user: User.__super__.toJSON.apply(this, arguments)
    };
  };

  User.prototype.getCompetitor = function() {
    return this._competitor;
  };

  User.prototype.findUserLocation = function() {
    if (this._watching) {
      return this.goTo();
    } else {
      return navigator.geolocation.getCurrentPosition(this.showPosition, this.locationError);
    }
  };

  User.prototype.showPosition = function(position) {
    this.setLocation(position);
    this.goTo();
    return this.watchLocation();
  };

  User.prototype.hasCompetitor = function() {
    var ref;
    return !((ref = this._competitor) != null ? ref.isNew() : void 0);
  };

  User.prototype.watchLocation = function() {
    if (!this._watching) {
      this.location_watcher = navigator.geolocation.watchPosition(this.setLocation, this.locationError, {
        maximumAge: 60000
      });
      return this._watching = true;
    }
  };

  User.prototype.locationError = function(error) {
    return console.log("location error", error);
  };

  User.prototype.setLocation = function(arg) {
    var coords;
    coords = (arg != null ? arg : {}).coords;
    return this.set({
      lat: coords.latitude,
      lng: coords.longitude
    });
  };

  User.prototype.getLatLng = function() {
    return new google.maps.LatLng(this.get("lat"), this.get("lng"));
  };

  User.prototype.goTo = function() {
    return _fr.moveMapTo(this, 15);
  };

  return User;

})(Backbone.Model);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Collection = (function(superClass) {
  extend(Collection, superClass);

  function Collection() {
    this.setModelTriggers = bind(this.setModelTriggers, this);
    this.initialize = bind(this.initialize, this);
    return Collection.__super__.constructor.apply(this, arguments);
  }

  Collection.prototype.delegatedEvents = ['show', 'hide'];

  Collection.prototype.initialize = function(models, options) {
    var key, val;
    if (options) {
      for (key in options) {
        val = options[key];
        this[key] = val;
      }
    }
    return this.setModelTriggers();
  };

  Collection.prototype.setModelTriggers = function() {
    var event_name, i, len, ref, results;
    ref = this.delegatedEvents;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      event_name = ref[i];
      results.push((function(_this) {
        return function(event_name) {
          return _this.on(event_name, function() {
            return this.map(function(model) {
              return model.trigger("collection:" + event_name);
            });
          });
        };
      })(this)(event_name));
    }
    return results;
  };

  return Collection;

})(Backbone.Collection);var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Collections.Attachments = (function(superClass) {
  extend(Attachments, superClass);

  function Attachments() {
    return Attachments.__super__.constructor.apply(this, arguments);
  }

  Attachments.prototype.model = FellRace.Models.Attachment;

  return Attachments;

})(FellRace.Collection);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Collections.Categories = (function(superClass) {
  extend(Categories, superClass);

  function Categories() {
    this.findOrAddBy = bind(this.findOrAddBy, this);
    return Categories.__super__.constructor.apply(this, arguments);
  }

  Categories.prototype.model = FellRace.Models.Category;

  Categories.prototype.url = function() {
    return (_fr.apiUrl()) + "/categories";
  };

  Categories.prototype.findOrAddBy = function(opts) {
    var model;
    if (model = this.findWhere(opts)) {
      return model;
    } else {
      this.add(opts);
      return this.findWhere(opts);
    }
  };

  return Categories;

})(Backbone.Collection);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Collections.Checkpoints = (function(superClass) {
  extend(Checkpoints, superClass);

  function Checkpoints() {
    this.getColour = bind(this.getColour, this);
    this.getEncodedRoute = bind(this.getEncodedRoute, this);
    this.validAsRoute = bind(this.validAsRoute, this);
    this.checkRoutability = bind(this.checkRoutability, this);
    this.resequence = bind(this.resequence, this);
    this.names = bind(this.names, this);
    this.add = bind(this.add, this);
    return Checkpoints.__super__.constructor.apply(this, arguments);
  }

  Checkpoints.prototype.model = FellRace.Models.Checkpoint;

  Checkpoints.prototype.comparator = "pos";

  Checkpoints.prototype.initialize = function(models) {
    Checkpoints.__super__.initialize.apply(this, arguments);
    this.sort();
    this.resequence_soon = _.debounce(this.resequence, 200);
    this.on("add", (function(_this) {
      return function(point, collection) {
        _this.checkRoutability();
        return _this.resequence_soon();
      };
    })(this));
    this.on("remove", (function(_this) {
      return function(point, collection) {
        _this.checkRoutability();
        return _this.resequence_soon();
      };
    })(this));
    this.on("change:lat", (function(_this) {
      return function() {
        return _this.checkRoutability();
      };
    })(this));
    return this.on("add remove reset", (function(_this) {
      return function() {
        return _this.sort();
      };
    })(this));
  };

  Checkpoints.prototype.add = function(models, options) {
    if (options == null) {
      options = {};
    }
    options['at'] = this.length - 1;
    Checkpoints.__super__.add.call(this, models, options);
    return this.trigger('reset');
  };

  Checkpoints.prototype.names = function() {
    var cp, j, len, name, names, ref, times;
    names = [];
    ref = this.models;
    for (j = 0, len = ref.length; j < len; j++) {
      cp = ref[j];
      name = cp.get("name");
      times = cp.get("times");
      if (times) {
        if (name !== "Start") {
          names.push(name);
        }
      }
    }
    return names;
  };

  Checkpoints.prototype.resequence = function() {
    var cpt, i, j, len, ref, results;
    ref = this.models;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      cpt = ref[i];
      results.push(cpt.set({
        pos: i
      }));
    }
    return results;
  };

  Checkpoints.prototype.checkRoutability = function() {
    if (this.validAsRoute()) {
      return this.trigger('routable');
    } else {
      return this.trigger('unroutable');
    }
  };

  Checkpoints.prototype.validAsRoute = function() {
    var placed;
    placed = this.pluck('placed');
    return _.first(placed) && _.last(placed) && _.compact(placed).length >= 3;
  };

  Checkpoints.prototype.getEncodedRoute = function() {
    var points;
    points = this.filter(function(cp) {
      return cp.has("lat") && cp.has("lng");
    }).map(function(cp) {
      return cp.getLatLng();
    });
    if (points.length > 1) {
      return MapStick.encodePathString(points);
    }
  };

  Checkpoints.prototype.getColour = function() {
    return this.race.getColour();
  };

  return Checkpoints;

})(FellRace.Collection);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Collections.Clubs = (function(superClass) {
  extend(Clubs, superClass);

  function Clubs() {
    this.getHighlit = bind(this.getHighlit, this);
    this.indexOfHighlight = bind(this.indexOfHighlight, this);
    this.highlight = bind(this.highlight, this);
    this.clearHighlight = bind(this.clearHighlight, this);
    this.findOrAddBy = bind(this.findOrAddBy, this);
    this.findOrAdd = bind(this.findOrAdd, this);
    return Clubs.__super__.constructor.apply(this, arguments);
  }

  Clubs.prototype.model = FellRace.Models.Club;

  Clubs.prototype.url = function() {
    return (_fr.apiUrl()) + "/clubs";
  };

  Clubs.prototype.findOrAdd = function(opts) {
    var model;
    if (model = this.get(opts.id)) {
      return model;
    } else {
      this.add(opts);
      return this.get(opts.id);
    }
  };

  Clubs.prototype.findOrAddBy = function(opts) {
    var model;
    if (model = this.findWhere(opts)) {
      return model;
    } else {
      this.add(opts);
      return this.findWhere(opts);
    }
  };

  Clubs.prototype.clearHighlight = function() {
    return _.each(this.where({
      highlighted: true
    }), (function(_this) {
      return function(model) {
        return model.set("highlighted", false);
      };
    })(this));
  };

  Clubs.prototype.highlight = function(index) {
    var ref;
    this.clearHighlight();
    return (ref = this.at(index)) != null ? ref.set("highlighted", true) : void 0;
  };

  Clubs.prototype.indexOfHighlight = function() {
    return this.indexOf(this.getHighlit());
  };

  Clubs.prototype.getHighlit = function() {
    return this.findWhere({
      highlighted: true
    });
  };

  return Clubs;

})(Backbone.Collection);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Collections.Competitors = (function(superClass) {
  extend(Competitors, superClass);

  function Competitors() {
    this.findOrAdd = bind(this.findOrAdd, this);
    return Competitors.__super__.constructor.apply(this, arguments);
  }

  Competitors.prototype.model = FellRace.Models.Competitor;

  Competitors.prototype.findOrAdd = function(opts) {
    var model;
    if (model = this.get(opts.id)) {
      return model;
    } else {
      this.add(opts);
      return this.get(opts.id);
    }
  };

  return Competitors;

})(Backbone.Collection);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Collections.Entries = (function(superClass) {
  extend(Entries, superClass);

  function Entries() {
    this.present = bind(this.present, this);
    this.onlineCount = bind(this.onlineCount, this);
    this.online = bind(this.online, this);
    this.postalCount = bind(this.postalCount, this);
    return Entries.__super__.constructor.apply(this, arguments);
  }

  Entries.prototype.model = FellRace.Models.Entry;

  Entries.prototype.comparator = function(model) {
    return [model.get('surname'), model.get('forename')].join(' ').toLowerCase();
  };

  Entries.prototype.postalCount = function() {
    return this.length - this.onlineCount();
  };

  Entries.prototype.online = function() {
    return this.filter(function(e) {
      return e.get("paid") && !e.get("cancelled");
    });
  };

  Entries.prototype.onlineCount = function() {
    return this.online().length;
  };

  Entries.prototype.present = function(opts) {
    return this.filter(function(item) {
      var ref, ref1, ref2, ref3, ref4, ref5;
      return ((ref = item.get("forename")) != null ? ref.toLowerCase() : void 0) === ((ref1 = opts.forename) != null ? ref1.toLowerCase() : void 0) && ((ref2 = item.get("middlename")) != null ? ref2.toLowerCase() : void 0) === ((ref3 = opts.middlename) != null ? ref3.toLowerCase() : void 0) && ((ref4 = item.get("surname")) != null ? ref4.toLowerCase() : void 0) === ((ref5 = opts.surname) != null ? ref5.toLowerCase() : void 0) && item.get("dob") === opts.dob && item.get("gender") === opts.gender;
    }).length;
  };

  return Entries;

})(FellRace.Collection);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Collections.Instances = (function(superClass) {
  extend(Instances, superClass);

  function Instances() {
    this.inYearExcept = bind(this.inYearExcept, this);
    return Instances.__super__.constructor.apply(this, arguments);
  }

  Instances.prototype.model = FellRace.Models.Instance;

  Instances.prototype.inYearExcept = function(year, instance) {
    return this.filter((function(_this) {
      return function(model) {
        return instance.id !== model.id && model.get("year") === year;
      };
    })(this));
  };

  return Instances;

})(FellRace.Collection);

FellRace.Collections.FutureInstances = (function(superClass) {
  extend(FutureInstances, superClass);

  function FutureInstances() {
    this.next = bind(this.next, this);
    this.onlineEntry = bind(this.onlineEntry, this);
    return FutureInstances.__super__.constructor.apply(this, arguments);
  }

  FutureInstances.prototype.comparator = function(m) {
    return m.getDate();
  };

  FutureInstances.prototype.onlineEntry = function() {
    return this.filter(function(instance) {
      return instance.get("online_entry");
    });
  };

  FutureInstances.prototype.next = function() {
    this.sort();
    return this.filter(function(instance) {
      return instance.getDate();
    })[0];
  };

  return FutureInstances;

})(FellRace.Collections.Instances);

FellRace.Collections.PastInstances = (function(superClass) {
  extend(PastInstances, superClass);

  function PastInstances() {
    this.mostRecent = bind(this.mostRecent, this);
    return PastInstances.__super__.constructor.apply(this, arguments);
  }

  PastInstances.prototype.comparator = function(m) {
    return -m.getDate();
  };

  PastInstances.prototype.mostRecent = function() {
    this.sort();
    return this.filter(function(instance) {
      return instance.getDate();
    })[0];
  };

  return PastInstances;

})(FellRace.Collections.Instances);var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Collections.Links = (function(superClass) {
  extend(Links, superClass);

  function Links() {
    return Links.__super__.constructor.apply(this, arguments);
  }

  Links.prototype.model = FellRace.Models.Link;

  return Links;

})(FellRace.Collection);var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Collections.Performances = (function(superClass) {
  extend(Performances, superClass);

  function Performances() {
    return Performances.__super__.constructor.apply(this, arguments);
  }

  Performances.prototype.model = FellRace.Models.Performance;

  Performances.prototype.nameAsc = function(a, b) {
    return a.getSortName().localeCompare(b.getSortName());
  };

  Performances.prototype.nameDesc = function(a, b) {
    return -a.getSortName().localeCompare(b.getSortName());
  };

  Performances.prototype.posAsc = function(m) {
    return m.getSortPos();
  };

  Performances.prototype.posDesc = function(m) {
    return -m.getSortPos();
  };

  Performances.prototype.clubAsc = function(a, b) {
    return a.get("club").localeCompare(b.get("club"));
  };

  Performances.prototype.clubDesc = function(a, b) {
    return -a.get("club").localeCompare(b.get("club"));
  };

  Performances.prototype.timeAsc = function(m) {
    return m.getSortTime();
  };

  Performances.prototype.timeDesc = function(m) {
    return -m.getSortTime();
  };

  Performances.prototype.catAsc = function(a, b) {
    return a.get("cat").localeCompare(b.get("cat"));
  };

  Performances.prototype.catDesc = function(a, b) {
    return -a.get("cat").localeCompare(b.get("cat"));
  };

  return Performances;

})(FellRace.Collection);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Collections.PublicCheckpoints = (function(superClass) {
  extend(PublicCheckpoints, superClass);

  function PublicCheckpoints() {
    this.names = bind(this.names, this);
    this.add = bind(this.add, this);
    return PublicCheckpoints.__super__.constructor.apply(this, arguments);
  }

  PublicCheckpoints.prototype.model = FellRace.Models.PublicCheckpoint;

  PublicCheckpoints.prototype.comparator = "pos";

  PublicCheckpoints.prototype.initialize = function(models) {
    PublicCheckpoints.__super__.initialize.apply(this, arguments);
    this.sort();
    return this.on("add reset", (function(_this) {
      return function() {
        return _this.sort();
      };
    })(this));
  };

  PublicCheckpoints.prototype.add = function(models, options) {
    if (options == null) {
      options = {};
    }
    options['at'] = this.length - 1;
    PublicCheckpoints.__super__.add.call(this, models, options);
    return this.trigger('reset');
  };

  PublicCheckpoints.prototype.names = function() {
    var cp, i, len, name, names, ref, times;
    names = [];
    ref = this.models;
    for (i = 0, len = ref.length; i < len; i++) {
      cp = ref[i];
      name = cp.get("name");
      times = cp.get("times");
      if (times) {
        if (name !== "Start") {
          names.push(name);
        }
      }
    }
    return names;
  };

  return PublicCheckpoints;

})(FellRace.Collection);var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

FellRace.Collections.PublicInstances = (function(superClass) {
  extend(PublicInstances, superClass);

  function PublicInstances() {
    return PublicInstances.__super__.constructor.apply(this, arguments);
  }

  PublicInstances.prototype.model = FellRace.Models.PublicInstance;

  PublicInstances.prototype.comparator = function(m) {
    return -m.getDate();
  };

  return PublicInstances;

})(FellRace.Collection);

FellRace.Collections.PublicFutureInstances = (function(superClass) {
  extend(PublicFutureInstances, superClass);

  function PublicFutureInstances() {
    this.next = bind(this.next, this);
    return PublicFutureInstances.__super__.constructor.apply(this, arguments);
  }

  PublicFutureInstances.prototype.url = function() {
    return (_fr.apiUrl()) + "/instances/future";
  };

  PublicFutureInstances.prototype.comparator = function(m) {
    return m.getDate();
  };

  PublicFutureInstances.prototype.next = function() {
    this.sort();
    return this.filter(function(instance) {
      return instance.getDate();
    })[0];
  };

  return PublicFutureInstances;

})(FellRace.Collections.PublicInstances);

FellRace.Collections.PublicPastInstances = (function(superClass) {
  extend(PublicPastInstances, superClass);

  function PublicPastInstances() {
    this.mostRecent = bind(this.mostRecent, this);
    return PublicPastInstances.__super__.constructor.apply(this, arguments);
  }

  PublicPastInstances.prototype.url = function() {
    return (_fr.apiUrl()) + "/instances/past";
  };

  PublicPastInstances.prototype.comparator = function(m) {
    return -m.getDate();
  };

  PublicPastInstances.prototype.mostRecent = function() {
    this.sort();
    return this.filter(function(instance) {
      return instance.getDate();
    })[0];
  };

  return PublicPastInstances;

})(FellRace.Collections.PublicInstances);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Collections.RacePublications = (function(superClass) {
  extend(RacePublications, superClass);

  function RacePublications() {
    this.add = bind(this.add, this);
    this.deselectAll = bind(this.deselectAll, this);
    this.url = bind(this.url, this);
    return RacePublications.__super__.constructor.apply(this, arguments);
  }

  RacePublications.prototype.model = FellRace.Models.RacePublication;

  RacePublications.prototype.url = function() {
    return (_fr.apiUrl()) + "/race_publications";
  };

  RacePublications.prototype.deselectAll = function() {
    return _.each(this.where({
      selected: true
    }), (function(_this) {
      return function(race) {
        return race.trigger("deselect");
      };
    })(this));
  };

  RacePublications.prototype.add = function(opts) {
    var model;
    if (opts == null) {
      opts = {};
    }
    if (model = this.findWhere(opts)) {
      return model;
    } else {
      return RacePublications.__super__.add.apply(this, arguments);
    }
  };

  return RacePublications;

})(FellRace.Collection);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Collections.Races = (function(superClass) {
  extend(Races, superClass);

  function Races() {
    this.deselectAll = bind(this.deselectAll, this);
    this.url = bind(this.url, this);
    return Races.__super__.constructor.apply(this, arguments);
  }

  Races.prototype.model = FellRace.Models.Race;

  Races.prototype.url = function() {
    return (_fr.apiUrl()) + "/races";
  };

  Races.prototype.initialize = function(models) {
    Races.__super__.initialize.apply(this, arguments);
    return this.on("add", (function(_this) {
      return function(model, collection, options) {
        if (collection.first() === model) {
          return model.trigger("select");
        }
      };
    })(this));
  };

  Races.prototype.deselectAll = function() {
    return _.each(this.where({
      selected: true
    }), (function(_this) {
      return function(race) {
        return race.trigger("deselect");
      };
    })(this));
  };

  return Races;

})(FellRace.Collection);var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Collections.Records = (function(superClass) {
  extend(Records, superClass);

  function Records() {
    return Records.__super__.constructor.apply(this, arguments);
  }

  Records.prototype.model = FellRace.Models.Record;

  return Records;

})(FellRace.Collection);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.LayoutView = (function(superClass) {
  extend(LayoutView, superClass);

  function LayoutView() {
    this.routes = bind(this.routes, this);
    return LayoutView.__super__.constructor.apply(this, arguments);
  }

  LayoutView.prototype.routes = function() {
    return {};
  };

  LayoutView.prototype._previous = {};

  LayoutView.prototype.initialize = function(arg) {
    var path;
    path = (arg != null ? arg : {}).path;
    this._router = new FellRace.Router({
      routes: _.result(this, 'routes')
    });
    return this.handle(path);
  };

  LayoutView.prototype.handle = function(path) {
    if (path == null) {
      path = "/";
    }
    return this._router.handle(path);
  };

  return LayoutView;

})(Backbone.Marionette.Layout);

FellRace.Views.CollectionFilter = (function(superClass) {
  extend(CollectionFilter, superClass);

  function CollectionFilter() {
    this.onBeforeDestroy = bind(this.onBeforeDestroy, this);
    this.clearMatches = bind(this.clearMatches, this);
    this.onRender = bind(this.onRender, this);
    return CollectionFilter.__super__.constructor.apply(this, arguments);
  }

  CollectionFilter.prototype.template = false;

  CollectionFilter.prototype.bindings = {
    ":el": "term"
  };

  CollectionFilter.prototype.initialize = function() {
    return this.model = new Backbone.Model;
  };

  CollectionFilter.prototype.onRender = function() {
    var matcher;
    this.stickit();
    matcher = (function(_this) {
      return function(model, term) {
        _this.$el.addClass("working");
        if (term) {
          _this.collection.each(function(model) {
            return model.set({
              unmatched: model.unmatches(term)
            });
          });
        } else {
          _this.clearMatches();
        }
        return _this.$el.removeClass("working");
      };
    })(this);
    return this.model.on("change:term", _.debounce(matcher, 250));
  };

  CollectionFilter.prototype.clearMatches = function() {
    return this.collection.each(function(model) {
      return model.unset("unmatched");
    });
  };

  CollectionFilter.prototype.onBeforeDestroy = function() {
    return this.clearMatches();
  };

  return CollectionFilter;

})(Backbone.Marionette.ItemView);var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AddFirstAttachment = (function(superClass) {
  extend(AddFirstAttachment, superClass);

  function AddFirstAttachment() {
    return AddFirstAttachment.__super__.constructor.apply(this, arguments);
  }

  AddFirstAttachment.prototype.template = 'attachments/empty';

  AddFirstAttachment.prototype.tagName = "li";

  AddFirstAttachment.prototype.className = "note";

  return AddFirstAttachment;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AdminAttachment = (function(superClass) {
  extend(AdminAttachment, superClass);

  function AdminAttachment() {
    this["delete"] = bind(this["delete"], this);
    this.thaw = bind(this.thaw, this);
    this.freeze = bind(this.freeze, this);
    this.filePicked = bind(this.filePicked, this);
    this.pickFile = bind(this.pickFile, this);
    this.onRender = bind(this.onRender, this);
    return AdminAttachment.__super__.constructor.apply(this, arguments);
  }

  AdminAttachment.prototype.template = 'attachments/admin_list_item';

  AdminAttachment.prototype.tagName = "li";

  AdminAttachment.prototype.className = "attachment";

  AdminAttachment.prototype.events = {
    'click a.file_icon': "pickFile",
    'change input[type="file"]': "filePicked",
    'click a.delete': "delete"
  };

  AdminAttachment.prototype.modelEvents = {
    "freeze": "freeze",
    "thaw": "thaw"
  };

  AdminAttachment.prototype.bindings = {
    "span.name": {
      observe: "name",
      events: ["blur"]
    },
    "a.file_icon": {
      attributes: [
        {
          name: 'class',
          observe: 'extension'
        }
      ]
    }
  };

  AdminAttachment.prototype.onRender = function() {
    this._filefield = this.$el.find('input[type="file"]');
    this.thaw();
    this.stickit();
    if (this.model.isNew()) {
      return this.pickFile();
    }
  };

  AdminAttachment.prototype.pickFile = function() {
    return this._filefield.trigger('click');
  };

  AdminAttachment.prototype.filePicked = function(e) {
    var files;
    if (files = this._filefield[0].files) {
      return this.model.set("file", files.item(0));
    }
  };

  AdminAttachment.prototype.freeze = function() {
    this.$el.addClass('frozen');
    return this.$el.find('.editable').ineditable();
  };

  AdminAttachment.prototype.thaw = function() {
    this.$el.removeClass('frozen');
    return this.$el.find('.editable').editable();
  };

  AdminAttachment.prototype["delete"] = function(e) {
    if (e) {
      e.preventDefault();
    }
    return this.model.destroy();
  };

  return AdminAttachment;

})(Backbone.Marionette.ItemView);var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AdminAttachmentsList = (function(superClass) {
  extend(AdminAttachmentsList, superClass);

  function AdminAttachmentsList() {
    return AdminAttachmentsList.__super__.constructor.apply(this, arguments);
  }

  AdminAttachmentsList.prototype.emptyView = FellRace.Views.AddFirstAttachment;

  AdminAttachmentsList.prototype.itemView = FellRace.Views.AdminAttachment;

  return AdminAttachmentsList;

})(Backbone.Marionette.CollectionView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.Attachment = (function(superClass) {
  extend(Attachment, superClass);

  function Attachment() {
    this.onRender = bind(this.onRender, this);
    return Attachment.__super__.constructor.apply(this, arguments);
  }

  Attachment.prototype.template = 'attachments/list_item';

  Attachment.prototype.tagName = "li";

  Attachment.prototype.className = "attachment";

  Attachment.prototype.events = {
    "click a": "bypass"
  };

  Attachment.prototype.bindings = {
    "a.file_name": {
      observe: "name",
      attributes: [
        {
          name: "href",
          observe: "url"
        }, {
          name: 'class',
          observe: 'extension'
        }
      ]
    },
    "a.file_icon": {
      attributes: [
        {
          name: "href",
          observe: "url"
        }, {
          name: 'class',
          observe: 'extension'
        }
      ]
    }
  };

  Attachment.prototype.onRender = function() {
    return this.stickit();
  };

  return Attachment;

})(Backbone.Marionette.ItemView);

FellRace.Views.AttachmentsList = (function(superClass) {
  extend(AttachmentsList, superClass);

  function AttachmentsList() {
    return AttachmentsList.__super__.constructor.apply(this, arguments);
  }

  AttachmentsList.prototype.itemView = FellRace.Views.Attachment;

  return AttachmentsList;

})(Backbone.Marionette.CollectionView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.CategoryOption = (function(superClass) {
  extend(CategoryOption, superClass);

  function CategoryOption() {
    this.onRender = bind(this.onRender, this);
    return CategoryOption.__super__.constructor.apply(this, arguments);
  }

  CategoryOption.prototype.template = 'categories/option';

  CategoryOption.prototype.tagName = 'li';

  CategoryOption.prototype.bindings = {
    "span.name": "name",
    "input": {
      attributes: [
        {
          name: "value",
          observe: "name"
        }
      ]
    }
  };

  CategoryOption.prototype.onRender = function() {
    return this.stickit();
  };

  return CategoryOption;

})(Backbone.Marionette.ItemView);

FellRace.Views.CategoryPicker = (function(superClass) {
  extend(CategoryPicker, superClass);

  function CategoryPicker() {
    this.appendHtml = bind(this.appendHtml, this);
    return CategoryPicker.__super__.constructor.apply(this, arguments);
  }

  CategoryPicker.prototype.template = 'categories/picker';

  CategoryPicker.prototype.itemView = FellRace.Views.CategoryOption;

  CategoryPicker.prototype.itemViewContainer = ".categories";

  CategoryPicker.prototype.bindings = {
    "input.category": "category_names"
  };

  CategoryPicker.prototype.initialize = function() {
    return this.collection = _fr.getCategories();
  };

  CategoryPicker.prototype.onRender = function() {
    return this.stickit();
  };

  CategoryPicker.prototype.appendHtml = function(collectionView, itemView, index) {
    var $container, group, name;
    $container = this.getItemViewContainer(collectionView);
    name = itemView.model.get('name');
    group = (function() {
      switch (false) {
        case !(itemView.model.get('junior')):
          return 'junior';
        case !(itemView.model.get('name')[0] === 'F'):
          return 'female';
        default:
          return 'male';
      }
    })();
    return $container.find("ul." + group).append(itemView.$el);
  };

  return CategoryPicker;

})(Backbone.Marionette.CompositeView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AdminCheckpoint = (function(superClass) {
  extend(AdminCheckpoint, superClass);

  function AdminCheckpoint() {
    this.onClose = bind(this.onClose, this);
    this.setSymbol = bind(this.setSymbol, this);
    this.setPrefix = bind(this.setPrefix, this);
    this.place = bind(this.place, this);
    this.sorted = bind(this.sorted, this);
    this["delete"] = bind(this["delete"], this);
    this.onRender = bind(this.onRender, this);
    return AdminCheckpoint.__super__.constructor.apply(this, arguments);
  }

  AdminCheckpoint.prototype.template = 'checkpoints/admin_list_item';

  AdminCheckpoint.prototype.tagName = "li";

  AdminCheckpoint.prototype.className = "checkpoint";

  AdminCheckpoint.prototype.events = {
    "click a.delete": "delete",
    "click a.place": "place",
    'reordered': 'sorted'
  };

  AdminCheckpoint.prototype.modelEvents = {
    destroy: "close"
  };

  AdminCheckpoint.prototype.bindings = {
    'span.symbol': {
      observe: "name",
      updateMethod: 'text',
      onGet: 'setSymbol'
    },
    'span.name': "name",
    'span.gridref': "gridref",
    'span.pos': {
      observe: "pos",
      onGet: 'setPrefix'
    },
    'a.place': {
      observe: "placed",
      updateView: false,
      visible: function(val, options) {
        return !val;
      }
    }
  };

  AdminCheckpoint.prototype.onRender = function() {
    this.$el.attr('id', "cp_" + (this.model.get('id')));
    if (this.model.get('fixed')) {
      this.$el.find('a.delete').remove();
      this.$el.find('span.unfixed').removeClass("unfixed");
      this.$el.find('span.name').removeClass('editable');
    }
    this.$el.find('.editable').editable();
    return this.stickit();
  };

  AdminCheckpoint.prototype["delete"] = function(e) {
    if (e) {
      e.preventDefault();
    }
    return this.model.destroy();
  };

  AdminCheckpoint.prototype.sorted = function(e) {
    return this.model.set({
      pos: this.$el.index()
    }, {
      persistChange: true
    });
  };

  AdminCheckpoint.prototype.place = function() {
    return this.model.trigger("draw");
  };

  AdminCheckpoint.prototype.setPrefix = function(pos) {
    if (!this.model.get("fixed")) {
      return pos + ":";
    } else {
      return "";
    }
  };

  AdminCheckpoint.prototype.setSymbol = function(name) {
    var code;
    code = "\u25CB";
    if (name === "Start") {
      code = "\u25B3";
    } else if (name === "Finish") {
      code = "\u25CE";
    }
    return code;
  };

  AdminCheckpoint.prototype.onClose = function() {
    var ref;
    return (ref = this.marker) != null ? ref.close() : void 0;
  };

  return AdminCheckpoint;

})(Backbone.Marionette.ItemView);

FellRace.Views.AddFirstCheckpoint = (function(superClass) {
  extend(AddFirstCheckpoint, superClass);

  function AddFirstCheckpoint() {
    return AddFirstCheckpoint.__super__.constructor.apply(this, arguments);
  }

  AddFirstCheckpoint.prototype.template = 'checkpoints/empty';

  AddFirstCheckpoint.prototype.tagName = "li";

  AddFirstCheckpoint.prototype.className = "note";

  return AddFirstCheckpoint;

})(Backbone.Marionette.ItemView);

FellRace.Views.AdminCheckpointsList = (function(superClass) {
  extend(AdminCheckpointsList, superClass);

  function AdminCheckpointsList() {
    this.hideRouter = bind(this.hideRouter, this);
    this.showRouter = bind(this.showRouter, this);
    this.makeEditable = bind(this.makeEditable, this);
    this.makeStatic = bind(this.makeStatic, this);
    this.resort = bind(this.resort, this);
    this.updateSortable = bind(this.updateSortable, this);
    this.onRender = bind(this.onRender, this);
    return AdminCheckpointsList.__super__.constructor.apply(this, arguments);
  }

  AdminCheckpointsList.prototype.itemView = FellRace.Views.AdminCheckpoint;

  AdminCheckpointsList.prototype.emptyView = FellRace.Views.AddFirstCheckpoint;

  AdminCheckpointsList.prototype.selectable = true;

  AdminCheckpointsList.prototype.sortable = true;

  AdminCheckpointsList.prototype.events = {
    "sorting": "makeStatic",
    "sorted": "resort"
  };

  AdminCheckpointsList.prototype.onRender = function() {
    this.collection.on("routable", this.showRouter);
    this.collection.on("unroutable", this.hideRouter);
    this.collection.checkRoutability();
    this._sortable = $.sortable(this.el, {
      placeholder: '<li class="checkpoint placeholder" />',
      selector: 'li',
      handle: 'span.symbol'
    });
    return this.collection.on("add", this.updateSortable);
  };

  AdminCheckpointsList.prototype.updateSortable = function() {
    return this._sortable.refresh();
  };

  AdminCheckpointsList.prototype.resort = function(dragging, outcome) {
    this.$el.children().each((function(_this) {
      return function(i, element) {
        return $(element).trigger("reordered");
      };
    })(this));
    return this.makeEditable();
  };

  AdminCheckpointsList.prototype.makeStatic = function() {
    return this.$el.find('.editable').removeAttr('contentEditable');
  };

  AdminCheckpointsList.prototype.makeEditable = function() {
    return this.$el.find('.editable').editable();
  };

  AdminCheckpointsList.prototype.showRouter = function() {
    return $('.router').show();
  };

  AdminCheckpointsList.prototype.hideRouter = function() {
    return $('.router').hide();
  };

  return AdminCheckpointsList;

})(Backbone.Marionette.CollectionView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AdminCheckpointMarker = (function(superClass) {
  extend(AdminCheckpointMarker, superClass);

  function AdminCheckpointMarker() {
    this.textColour = bind(this.textColour, this);
    this.icon = bind(this.icon, this);
    this.labelVisible = bind(this.labelVisible, this);
    this.labelStyle = bind(this.labelStyle, this);
    return AdminCheckpointMarker.__super__.constructor.apply(this, arguments);
  }

  AdminCheckpointMarker.prototype.defaultOptions = {
    labelInBackground: true,
    labelClass: "label",
    labelAnchor: new google.maps.Point(-17, 10),
    raiseOnDrag: false,
    draggable: true
  };

  AdminCheckpointMarker.prototype.bindings = {
    labelVisible: {
      attribute: "name",
      modelChanged: "labelVisible"
    },
    labelContent: "pos",
    labelStyle: {
      attributes: ["colour", "race_selected"],
      modelChanged: "labelStyle"
    },
    icon: {
      attributes: ["name", "colour"],
      modelChanged: "icon"
    },
    position: {
      lat: "lat",
      lng: "lng"
    }
  };

  AdminCheckpointMarker.prototype.overlayEvents = {
    click: "select"
  };

  AdminCheckpointMarker.prototype.labelStyle = function(arg) {
    var colour, race_selected, ref;
    ref = arg != null ? arg : {}, colour = ref.colour, race_selected = ref.race_selected;
    return {
      "background-color": colour,
      color: this.textColour(colour),
      opacity: 0.8
    };
  };

  AdminCheckpointMarker.prototype.labelVisible = function(arg) {
    var name;
    name = (arg != null ? arg : {}).name;
    return name !== "Start" && name !== "Finish";
  };

  AdminCheckpointMarker.prototype.icon = function(arg) {
    var colour, icon_path, name, ref;
    ref = arg != null ? arg : {}, colour = ref.colour, name = ref.name;
    icon_path = (function() {
      switch (name) {
        case "Start":
          return "M -20 15 L 0 -20 L 20 15 L -20 15";
        case "Finish":
          return "M -18 0 a18 18 0 0 0 36 0 a18 18 0 0 0 -36 0 M -12 0 a12 12 0 0 0 24 0 a12 12 0 0 0 -24 0";
        case "Start and Finish":
          return "M -18 0 a18 18 0 0 0 36 0 a18 18 0 0 0 -36 0 M -20 12 L 0 -23 L 20 12 L -20 12";
        default:
          return "M -18 0 a18 18 0 0 0 36 0 a18 18 0 0 0 -36 0";
      }
    })();
    return {
      scale: 1,
      path: icon_path,
      strokeColor: colour,
      strokeWeight: 3
    };
  };

  AdminCheckpointMarker.prototype.textColour = function(colour) {
    var b, c, g, r, rgb;
    if (colour) {
      c = colour.substring(1);
      rgb = parseInt(c, 16);
      r = (rgb >> 16) & 0xff;
      g = (rgb >> 8) & 0xff;
      b = (rgb >> 0) & 0xff;
      if ((0.2126 * r + 0.7152 * g + 0.0722 * b) < 150) {
        return "white";
      } else {
        return "black";
      }
    } else {
      return "black";
    }
  };

  return AdminCheckpointMarker;

})(MapStick.Marker);

FellRace.Views.AdminCheckpointMarkers = (function(superClass) {
  extend(AdminCheckpointMarkers, superClass);

  function AdminCheckpointMarkers() {
    return AdminCheckpointMarkers.__super__.constructor.apply(this, arguments);
  }

  AdminCheckpointMarkers.prototype.itemView = FellRace.Views.AdminCheckpointMarker;

  return AdminCheckpointMarkers;

})(MapStick.OverlayCollection);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.Checkpoint = (function(superClass) {
  extend(Checkpoint, superClass);

  function Checkpoint() {
    this.latAndLng = bind(this.latAndLng, this);
    this.goTo = bind(this.goTo, this);
    this.getClass = bind(this.getClass, this);
    this.setSymbol = bind(this.setSymbol, this);
    this.setHref = bind(this.setHref, this);
    this.setName = bind(this.setName, this);
    this.onRender = bind(this.onRender, this);
    this.initialize = bind(this.initialize, this);
    return Checkpoint.__super__.constructor.apply(this, arguments);
  }

  Checkpoint.prototype.template = 'checkpoints/list_item';

  Checkpoint.prototype.tagName = "li";

  Checkpoint.prototype.className = "checkpoint";

  Checkpoint.prototype.events = {
    "click a": "goTo"
  };

  Checkpoint.prototype.bindings = {
    ':el': {
      observe: ["lat", "lng"],
      visible: "latAndLng",
      attributes: [
        {
          name: "class",
          observe: "fixed",
          onGet: "getClass"
        }
      ]
    },
    'span.symbol': {
      observe: "name",
      updateMethod: 'text',
      onGet: 'setSymbol'
    },
    'a.name': {
      observe: "name",
      attributes: [
        {
          name: "href",
          observe: "slug",
          onGet: "setHref"
        }
      ]
    },
    'span.gridref': "gridref"
  };

  Checkpoint.prototype.initialize = function(options) {
    return this._race_slug = options.race_slug;
  };

  Checkpoint.prototype.onRender = function() {
    return this.stickit();
  };

  Checkpoint.prototype.setName = function(vals) {
    var name;
    name = vals[0] || "";
    if (!vals[2]) {
      name = vals[1] + ": " + name;
    }
    return name;
  };

  Checkpoint.prototype.setHref = function(slug) {
    var href;
    return href = "/races/" + this._race_slug + "/checkpoints/" + slug;
  };

  Checkpoint.prototype.setSymbol = function(name) {
    var code;
    code = "\u25CB";
    if (name === "Start") {
      code = "\u25B3";
    } else if (name === "Finish") {
      code = "\u25CE";
    }
    return code;
  };

  Checkpoint.prototype.getClass = function(val) {
    if (val) {
      return this.model.get("name").toLowerCase();
    }
  };

  Checkpoint.prototype.goTo = function() {
    return this.model.trigger("go_to");
  };

  Checkpoint.prototype.latAndLng = function(arg) {
    var lat, lng, ref;
    ref = arg != null ? arg : [], lat = ref[0], lng = ref[1];
    return lat && lng;
  };

  return Checkpoint;

})(Backbone.Marionette.ItemView);

FellRace.Views.CheckpointsList = (function(superClass) {
  extend(CheckpointsList, superClass);

  function CheckpointsList() {
    this.initialize = bind(this.initialize, this);
    this.itemViewOptions = bind(this.itemViewOptions, this);
    return CheckpointsList.__super__.constructor.apply(this, arguments);
  }

  CheckpointsList.prototype.itemView = FellRace.Views.Checkpoint;

  CheckpointsList.prototype.itemViewOptions = function() {
    return {
      race_slug: this._race_slug
    };
  };

  CheckpointsList.prototype.initialize = function(options) {
    return this._race_slug = options.race_slug;
  };

  return CheckpointsList;

})(Backbone.Marionette.CollectionView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.CheckpointMarker = (function(superClass) {
  extend(CheckpointMarker, superClass);

  function CheckpointMarker() {
    this.click = bind(this.click, this);
    this.visible = bind(this.visible, this);
    this.textColour = bind(this.textColour, this);
    this.icon = bind(this.icon, this);
    this.labelVisible = bind(this.labelVisible, this);
    this.labelStyle = bind(this.labelStyle, this);
    return CheckpointMarker.__super__.constructor.apply(this, arguments);
  }

  CheckpointMarker.prototype.defaultOptions = {
    labelInBackground: true,
    labelClass: "label",
    labelAnchor: new google.maps.Point(-17, 10),
    opacity: 0.8
  };

  CheckpointMarker.prototype.overlayEvents = {
    "click": "click"
  };

  CheckpointMarker.prototype.bindings = {
    labelVisible: {
      attribute: "name",
      modelChanged: "labelVisible"
    },
    labelContent: "pos",
    labelStyle: {
      attributes: ["colour", "selected"],
      modelChanged: "labelStyle"
    },
    icon: {
      attributes: ["name", "colour"],
      modelChanged: "icon"
    },
    position: {
      lat: "lat",
      lng: "lng"
    },
    visible: {
      attribute: "selected",
      modelChanged: "visible"
    }
  };

  CheckpointMarker.prototype.labelStyle = function(arg) {
    var colour, ref, selected;
    ref = arg != null ? arg : {}, colour = ref.colour, selected = ref.selected;
    return {
      "background-color": colour,
      color: this.textColour(colour)
    };
  };

  CheckpointMarker.prototype.labelVisible = function(arg) {
    var name;
    name = (arg != null ? arg : {}).name;
    return name !== "Start" && name !== "Finish";
  };

  CheckpointMarker.prototype.icon = function(arg) {
    var colour, icon_path, name, ref;
    ref = arg != null ? arg : {}, colour = ref.colour, name = ref.name;
    icon_path = (function() {
      switch (name) {
        case "Start":
          return "M -20 15 L 0 -20 L 20 15 L -20 15";
        case "Finish":
          return "M -18 0 a18 18 0 0 0 36 0 a18 18 0 0 0 -36 0 M -12 0 a12 12 0 0 0 24 0 a12 12 0 0 0 -24 0";
        case "Start and Finish":
          return "M -18 0 a18 18 0 0 0 36 0 a18 18 0 0 0 -36 0 M -20 12 L 0 -23 L 20 12 L -20 12";
        default:
          return "M -18 0 a18 18 0 0 0 36 0 a18 18 0 0 0 -36 0";
      }
    })();
    return {
      scale: 1,
      path: icon_path,
      strokeColor: colour,
      strokeWeight: 3
    };
  };

  CheckpointMarker.prototype.textColour = function(colour) {
    var b, c, g, r, rgb;
    if (colour) {
      c = colour.substring(1);
      rgb = parseInt(c, 16);
      r = (rgb >> 16) & 0xff;
      g = (rgb >> 8) & 0xff;
      b = (rgb >> 0) & 0xff;
      if ((0.2126 * r + 0.7152 * g + 0.0722 * b) < 150) {
        return "white";
      } else {
        return "black";
      }
    } else {
      return "black";
    }
  };

  CheckpointMarker.prototype.visible = function(arg) {
    var selected;
    selected = (arg != null ? arg : {}).selected;
    return selected === true;
  };

  CheckpointMarker.prototype.click = function() {
    return _fr.navigate("/races/" + (this.model.race_publication.get("slug")) + "/checkpoints/" + (this.model.get("slug")));
  };

  return CheckpointMarker;

})(MapStick.Marker);

FellRace.Views.CheckpointMarkers = (function(superClass) {
  extend(CheckpointMarkers, superClass);

  function CheckpointMarkers() {
    return CheckpointMarkers.__super__.constructor.apply(this, arguments);
  }

  CheckpointMarkers.prototype.itemView = FellRace.Views.CheckpointMarker;

  return CheckpointMarkers;

})(MapStick.OverlayCollection);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AdminClubRow = (function(superClass) {
  extend(AdminClubRow, superClass);

  function AdminClubRow() {
    this.gotAlias = bind(this.gotAlias, this);
    this.cancelMerge = bind(this.cancelMerge, this);
    this.mergeTo = bind(this.mergeTo, this);
    this.removeAlias = bind(this.removeAlias, this);
    this.untrue = bind(this.untrue, this);
    this.merge = bind(this.merge, this);
    this.aliasName = bind(this.aliasName, this);
    this.onRender = bind(this.onRender, this);
    return AdminClubRow.__super__.constructor.apply(this, arguments);
  }

  AdminClubRow.prototype.template = "clubs/admin_row";

  AdminClubRow.prototype.tagName = "tr";

  AdminClubRow.prototype.className = "club";

  AdminClubRow.prototype.events = {
    "click a.merge": "merge",
    "click a.remove_alias": "removeAlias",
    "click a.merge_to": "mergeTo",
    "click a.cancel_merge": "cancelMerge"
  };

  AdminClubRow.prototype.bindings = {
    ":el": {
      attributes: [
        {
          name: "data-id",
          observe: "id"
        }
      ]
    },
    "span.id": "id",
    "span.name": "name",
    "span.full_name": "full_name",
    "span.short_name": "short_name",
    "span.display_name": "display_name",
    "span.alias_of": {
      observe: "original_club_id",
      onGet: "aliasName"
    },
    "a.merge_to": {
      observe: "original_club_id",
      visible: "untrue"
    },
    "a.merge, a.remove_alias": {
      observe: "original_club_id",
      visible: true
    },
    "a.cancel_merge": {
      observe: "merging",
      visible: true
    }
  };

  AdminClubRow.prototype.onRender = function() {
    this.$el.find('.editable').editable();
    return this.stickit();
  };

  AdminClubRow.prototype.aliasName = function(id) {
    var name;
    if (id) {
      if (name = _fr.clubs.findWhere({
        id: id
      }).get("name")) {
        return name;
      } else {
        return "missing club";
      }
    }
  };

  AdminClubRow.prototype.merge = function() {
    var alias, club_name;
    alias = this.model.get("name");
    club_name = _fr.clubs.findWhere({
      id: this.model.get("original_club_id")
    }).get("name");
    if (confirm("Merge '" + alias + "' into '" + club_name + "'?")) {
      return $.post((this.model.url()) + "/merge", (function(_this) {
        return function(data) {
          _fr.clubs.remove(_this.model);
          return $.notify("success", "Merged '" + alias + "' into '" + club_name);
        };
      })(this));
    }
  };

  AdminClubRow.prototype.untrue = function(val) {
    return !val;
  };

  AdminClubRow.prototype.removeAlias = function() {
    return this.model.set({
      original_club_id: null
    }, {
      persistChange: true
    });
  };

  AdminClubRow.prototype.mergeTo = function() {
    this.model.set({
      merging: true
    });
    $("table.clubs").addClass("merging");
    return $("tr.club").on("click", this.gotAlias);
  };

  AdminClubRow.prototype.cancelMerge = function() {
    this.model.set({
      merging: false
    });
    $("table.clubs").removeClass("merging");
    return $("tr.club").off("click", this.gotAlias);
  };

  AdminClubRow.prototype.gotAlias = function(e) {
    var id;
    id = parseInt(e.currentTarget.dataset.id, 10);
    if (id !== this.model.id) {
      $("table.clubs").removeClass("merging");
      $("tr.club").off("click", this.gotAlias);
      this.model.set({
        original_club_id: id
      }, {
        persistChange: true
      });
      return this.model.set({
        merging: false
      });
    }
  };

  return AdminClubRow;

})(Backbone.Marionette.ItemView);

FellRace.Views.AdminClubsTable = (function(superClass) {
  extend(AdminClubsTable, superClass);

  function AdminClubsTable() {
    return AdminClubsTable.__super__.constructor.apply(this, arguments);
  }

  AdminClubsTable.prototype.template = "clubs/admin_table";

  AdminClubsTable.prototype.tagName = "section";

  AdminClubsTable.prototype.itemView = FellRace.Views.AdminClubRow;

  AdminClubsTable.prototype.itemViewContainer = "tbody";

  AdminClubsTable.prototype.id = "clubs";

  AdminClubsTable.prototype.initialize = function() {
    this.collection = _fr.clubs;
    return this.collection.fetch();
  };

  return AdminClubsTable;

})(Backbone.Marionette.CompositeView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AdminClubsLayout = (function(superClass) {
  extend(AdminClubsLayout, superClass);

  function AdminClubsLayout() {
    this.index = bind(this.index, this);
    this.routes = bind(this.routes, this);
    return AdminClubsLayout.__super__.constructor.apply(this, arguments);
  }

  AdminClubsLayout.prototype.routes = function() {
    return {
      "(/)": this.index
    };
  };

  AdminClubsLayout.prototype.index = function() {
    var more_view;
    if (this._previous.route !== "index") {
      more_view = new FellRace.Views.AdminClubsTable;
      _fr.extraContentRegion.show(more_view);
      return this._previous = {
        route: "index"
      };
    }
  };

  return AdminClubsLayout;

})(FellRace.Views.LayoutView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.ClubSuggestion = (function(superClass) {
  extend(ClubSuggestion, superClass);

  function ClubSuggestion() {
    this.markWithTerms = bind(this.markWithTerms, this);
    this.highlight = bind(this.highlight, this);
    this.selectMe = bind(this.selectMe, this);
    this.onRender = bind(this.onRender, this);
    this.initialize = bind(this.initialize, this);
    this.bindings = bind(this.bindings, this);
    return ClubSuggestion.__super__.constructor.apply(this, arguments);
  }

  ClubSuggestion.prototype.template = "clubs/suggestion";

  ClubSuggestion.prototype.className = "suggestion";

  ClubSuggestion.prototype.tagName = "li";

  ClubSuggestion.prototype.events = {
    "click": "selectMe",
    "mouseenter": "highlight"
  };

  ClubSuggestion.prototype.bindings = function() {
    return {
      "span.name": {
        observe: "name",
        updateMethod: 'html',
        onGet: "markWithTerms"
      },
      ":el": {
        attributes: [
          {
            observe: "highlighted",
            name: "class",
            onGet: (function(_this) {
              return function(highlighted) {
                if (highlighted) {
                  return "current";
                } else {
                  return "";
                }
              };
            })(this)
          }
        ]
      }
    };
  };

  ClubSuggestion.prototype.initialize = function(options) {
    this._chooser = options.chooser;
    return ClubSuggestion.__super__.initialize.apply(this, arguments);
  };

  ClubSuggestion.prototype.onRender = function() {
    this.$el.find();
    this.stickit();
    return this.model.on("change:highlighted", (function(_this) {
      return function(highlighted) {
        if (highlighted) {
          return _this.el.scrollIntoView(false);
        }
      };
    })(this));
  };

  ClubSuggestion.prototype.selectMe = function(e) {
    return this._chooser.select(this.model);
  };

  ClubSuggestion.prototype.highlight = function() {
    return this._chooser.highlight(this.model);
  };

  ClubSuggestion.prototype.markWithTerms = function(name) {
    var marked_name, match, re, terms;
    if (terms = this._chooser.inputVal()) {
      terms = "(" + terms.split(/\s+/).join('|') + ")";
      re = new RegExp(terms, "gi");
      if (match = name.match(re)) {
        marked_name = name.replace(re, "<strong>$1</strong>");
        return marked_name;
      } else {
        return name;
      }
    } else {
      return name;
    }
  };

  return ClubSuggestion;

})(Backbone.Marionette.ItemView);

FellRace.Views.ClubChooser = (function(superClass) {
  extend(ClubChooser, superClass);

  function ClubChooser() {
    this.focus = bind(this.focus, this);
    this.clearSearch = bind(this.clearSearch, this);
    this.select = bind(this.select, this);
    this.selectHighlit = bind(this.selectHighlit, this);
    this.highlight = bind(this.highlight, this);
    this.moveHighlightDown = bind(this.moveHighlightDown, this);
    this.moveHighlightUp = bind(this.moveHighlightUp, this);
    this.moveHighlight = bind(this.moveHighlight, this);
    this.catchControlKeys = bind(this.catchControlKeys, this);
    this.showIfPopulated = bind(this.showIfPopulated, this);
    this.hide = bind(this.hide, this);
    this.hideSlowly = bind(this.hideSlowly, this);
    this.show = bind(this.show, this);
    this.setSuggestions = bind(this.setSuggestions, this);
    this.inputVal = bind(this.inputVal, this);
    this.bindSearchBox = bind(this.bindSearchBox, this);
    this.onRender = bind(this.onRender, this);
    this.itemViewOptions = bind(this.itemViewOptions, this);
    return ClubChooser.__super__.constructor.apply(this, arguments);
  }

  ClubChooser.prototype.tagName = "ul";

  ClubChooser.prototype.className = "chooser";

  ClubChooser.prototype.itemView = FellRace.Views.ClubSuggestion;

  ClubChooser.prototype.initialize = function(options) {
    if (options == null) {
      options = {};
    }
    this._search_box = options.input;
    this._source_collection = _fr.clubs;
    this.collection = new FellRace.Collections.Clubs;
    return this._hidden = true;
  };

  ClubChooser.prototype.itemViewOptions = function() {
    var options;
    return options = {
      chooser: this
    };
  };

  ClubChooser.prototype.onRender = function() {
    this.$el.insertAfter(this._search_box);
    if (this._source_collection.size()) {
      return this.bindSearchBox();
    } else {
      return this._source_collection.fetch().done(this.bindSearchBox);
    }
  };

  ClubChooser.prototype.bindSearchBox = function() {
    var refreshSuggestions;
    this._search_box.on('keydown', this.catchControlKeys);
    this._search_box.on('keyup', this.moveHighlight);
    refreshSuggestions = _.debounce(this.setSuggestions, 100);
    if (_fr.msie) {
      this._search_box.on('keyup paste', (function(_this) {
        return function(e) {
          _this._search_box.addClass('working');
          return refreshSuggestions(e);
        };
      })(this));
    } else {
      this._search_box.on('input', (function(_this) {
        return function(e) {
          _this._search_box.addClass('working');
          return refreshSuggestions(e);
        };
      })(this));
    }
    this._search_box.on("blur", this.hideSlowly);
    return this._search_box.on("focus", this.showIfPopulated);
  };

  ClubChooser.prototype.inputVal = function() {
    return _.trim(this._search_box.val());
  };

  ClubChooser.prototype.setSuggestions = function(e) {
    var re, ref, term;
    if (!(e != null ? e.keyCode : void 0) || !((ref = e.keyCode) === 13 || ref === 38 || ref === 40 || ref === 27)) {
      term = this.inputVal();
      if (term) {
        re = new RegExp(term, "i");
        this.collection.reset(this._source_collection.filter((function(_this) {
          return function(club) {
            return re.test(club.get("name"));
          };
        })(this)));
      } else {
        this.collection.reset();
      }
      if (this.collection.length) {
        if (this._hidden) {
          this.show();
        }
      } else {
        this.hide();
      }
    }
    return this._search_box.removeClass('working');
  };

  ClubChooser.prototype.show = function() {
    this.$el.show();
    this._hidden = false;
    return $(document).bind("click", this.hide);
  };

  ClubChooser.prototype.hideSlowly = function() {
    return this.$el.fadeOut("slow", (function(_this) {
      return function() {
        return _this.hide();
      };
    })(this));
  };

  ClubChooser.prototype.hide = function() {
    this.$el.hide();
    this._hidden = true;
    return $(document).unbind("click", this.hide);
  };

  ClubChooser.prototype.showIfPopulated = function() {
    if (this.collection.length) {
      return this.show();
    }
  };

  ClubChooser.prototype.catchControlKeys = function(e) {
    var code;
    code = e.keyCode;
    if (code === 13 || code === 38 || code === 40) {
      return e.preventDefault();
    }
  };

  ClubChooser.prototype.moveHighlight = function(e) {
    var code;
    code = e.keyCode;
    if (code === 13 || code === 38 || code === 40 || code === 27) {
      e.preventDefault();
      e.stopImmediatePropagation();
    }
    if (code === 13) {
      return this.selectHighlit();
    } else if (code === 38) {
      return this.moveHighlightUp();
    } else if (code === 40) {
      return this.moveHighlightDown();
    } else if (code === 27) {
      return this.hide();
    }
  };

  ClubChooser.prototype.moveHighlightUp = function() {
    var index;
    if (this.collection.length > 1) {
      index = this.collection.indexOfHighlight();
      if (index > 0) {
        return this.collection.highlight(index - 1);
      } else {
        return this.collection.highlight(this.collection.length - 1);
      }
    }
  };

  ClubChooser.prototype.moveHighlightDown = function() {
    var index;
    if (this.collection.length) {
      index = this.collection.indexOfHighlight();
      if (index < this.collection.length - 1) {
        return this.collection.highlight(index + 1);
      } else {
        return this.collection.highlight(0);
      }
    }
  };

  ClubChooser.prototype.highlight = function(club) {
    this.collection.clearHighlight();
    return club.set("highlighted", true);
  };

  ClubChooser.prototype.selectHighlit = function() {
    if (this.collection.length > 0) {
      return this.select(this.collection.getHighlit());
    }
  };

  ClubChooser.prototype.select = function(club) {
    if (club) {
      this._search_box.val(club.get("name"));
      this.trigger("chosen");
      return this.hide();
    }
  };

  ClubChooser.prototype.clearSearch = function() {
    this._search_box.text("");
    return this.collection.reset([]);
  };

  ClubChooser.prototype.focus = function() {
    return this._search_box.focus();
  };

  return ClubChooser;

})(Backbone.Marionette.CollectionView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.Club = (function(superClass) {
  extend(Club, superClass);

  function Club() {
    this.onRender = bind(this.onRender, this);
    return Club.__super__.constructor.apply(this, arguments);
  }

  Club.prototype.template = 'clubs/show';

  Club.prototype.className = "club";

  Club.prototype.bindings = {
    ".name": "name",
    ".website": {
      observe: "url",
      visible: true,
      attributes: [
        {
          observe: "url",
          name: "href"
        }
      ]
    }
  };

  Club.prototype.onRender = function() {
    var competitors;
    competitors = this.model.competitors;
    this._competitors_table = new FellRace.Views.CompetitorsList({
      collection: competitors,
      el: this.$el.find(".competitors")
    });
    return this.stickit();
  };

  return Club;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.ClubLink = (function(superClass) {
  extend(ClubLink, superClass);

  function ClubLink() {
    this.onRender = bind(this.onRender, this);
    return ClubLink.__super__.constructor.apply(this, arguments);
  }

  ClubLink.prototype.template = 'clubs/link';

  ClubLink.prototype.bindings = {
    ".name": {
      observe: "name",
      attributes: [
        {
          name: "href",
          observe: "id",
          onGet: function(val) {
            return "/clubs/" + val;
          }
        }
      ]
    }
  };

  ClubLink.prototype.onRender = function() {
    return this.stickit();
  };

  return ClubLink;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.ClubListItem = (function(superClass) {
  extend(ClubListItem, superClass);

  function ClubListItem() {
    this.onRender = bind(this.onRender, this);
    this.getUrl = bind(this.getUrl, this);
    return ClubListItem.__super__.constructor.apply(this, arguments);
  }

  ClubListItem.prototype.template = 'clubs/list_item';

  ClubListItem.prototype.className = "club";

  ClubListItem.prototype.tagName = "li";

  ClubListItem.prototype.bindings = {
    "a.name": {
      observe: "name",
      attributes: [
        {
          name: "href",
          observe: "id",
          onGet: "getUrl"
        }
      ]
    }
  };

  ClubListItem.prototype.getUrl = function(id) {
    return "/clubs/" + id;
  };

  ClubListItem.prototype.onRender = function() {
    return this.stickit();
  };

  return ClubListItem;

})(Backbone.Marionette.ItemView);var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.ClubsList = (function(superClass) {
  extend(ClubsList, superClass);

  function ClubsList() {
    return ClubsList.__super__.constructor.apply(this, arguments);
  }

  ClubsList.prototype.itemView = FellRace.Views.ClubListItem;

  ClubsList.prototype.itemViewContainer = ".clubs";

  ClubsList.prototype.template = "clubs/list";

  ClubsList.prototype.id = "clubs";

  return ClubsList;

})(Backbone.Marionette.CompositeView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.ClubLayout = (function(superClass) {
  extend(ClubLayout, superClass);

  function ClubLayout() {
    this.race = bind(this.race, this);
    this["default"] = bind(this["default"], this);
    this.routes = bind(this.routes, this);
    return ClubLayout.__super__.constructor.apply(this, arguments);
  }

  ClubLayout.prototype.routes = function() {
    return {
      "(/)": this["default"],
      ":race_slug(/*path)": this.race
    };
  };

  ClubLayout.prototype.initialize = function() {
    var view;
    ClubLayout.__super__.initialize.apply(this, arguments);
    view = new FellRace.Views.Club({
      model: this.model
    });
    return _fr.mainRegion.show(view);
  };

  ClubLayout.prototype["default"] = function() {
    _fr.closeRight();
    return this._previous = {
      route: "default"
    };
  };

  ClubLayout.prototype.race = function(race_slug, path) {
    var layout, race;
    race = new FellRace.Models.Race({
      slug: race_slug
    });
    layout = new FellRace.Views.ClubRaceLayout({
      model: race,
      club: this.model,
      path: path
    });
    return this._previous = {
      route: "race"
    };
  };

  return ClubLayout;

})(FellRace.Views.LayoutView);

FellRace.Views.ClubsLayout = (function(superClass) {
  extend(ClubsLayout, superClass);

  function ClubsLayout() {
    this.club = bind(this.club, this);
    this["default"] = bind(this["default"], this);
    this.routes = bind(this.routes, this);
    return ClubsLayout.__super__.constructor.apply(this, arguments);
  }

  ClubsLayout.prototype.routes = function() {
    return {
      "(/)": this["default"],
      ":id(/)": this.club
    };
  };

  ClubsLayout.prototype["default"] = function() {
    _fr.closeRight();
    $.notify("error", "no 'runners' page yet");
    return this._previous = {
      route: "default"
    };
  };

  ClubsLayout.prototype.club = function(id, path) {
    var model;
    if (this._previous.route === "club" && this._previous.param === id) {
      return this._previous.view.handle(path);
    } else {
      model = new FellRace.Models.Club({
        id: id
      });
      return model.fetch({
        success: (function(_this) {
          return function() {
            var view;
            view = new FellRace.Views.ClubLayout({
              model: model,
              path: path
            });
            return _this._previous = {
              route: "club",
              param: id,
              view: view
            };
          };
        })(this)
      });
    }
  };

  return ClubsLayout;

})(FellRace.Views.LayoutView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AdminCompetitor = (function(superClass) {
  extend(AdminCompetitor, superClass);

  function AdminCompetitor() {
    this.save = bind(this.save, this);
    this.setClubName = bind(this.setClubName, this);
    this.onRender = bind(this.onRender, this);
    return AdminCompetitor.__super__.constructor.apply(this, arguments);
  }

  AdminCompetitor.prototype.template = 'competitors/admin';

  AdminCompetitor.prototype.className = "competitor";

  AdminCompetitor.prototype.events = {
    "click a.save": "save"
  };

  AdminCompetitor.prototype.bindings = {
    "a.cancel": {
      attributes: [
        {
          name: "href",
          observe: "id",
          onGet: function(id) {
            return "/runners/" + id;
          }
        }
      ]
    },
    ".forename": {
      observe: "forename",
      updateModel: false
    },
    ".middlename": {
      observe: "middlename",
      updateModel: false
    },
    ".surname": {
      observe: "surname",
      updateModel: false
    },
    "#forename": "forename",
    "#surname": "surname",
    "#middlename": "middlename",
    "input[name='gender']": "gender",
    "input#dob": "dob",
    "input#postal_address_line_1": "postal_address_line_1",
    "input#postal_address_line_2": "postal_address_line_2",
    "input#postal_town": "postal_town",
    "input#postcode": "postcode",
    "input#email": "email",
    "input#phone": "phone",
    "input#mobile": "mobile",
    "select#postal_county": "postal_county",
    "select#postal_country": "postal_country",
    "input#club_name": "club_name"
  };

  AdminCompetitor.prototype.onRender = function() {
    if (!this.model.get("postal_country")) {
      this.model.set("postal_country", "GB");
    }
    this.stickit();
    this.$el.find("input").checkAndTriggerAutoFillEvent();
    this._club_input = this.$el.find("input#club_name");
    new FellRace.Views.Picture({
      model: this.model,
      el: this.$el.find(".picture")
    }).render();
    this._club_chooser = new FellRace.Views.ClubChooser({
      model: this.model,
      input: this._club_input
    });
    this._club_chooser.render();
    this._club_chooser.on("chosen", this.setClubName);
    return this._dob_picker = new Pikaday({
      field: this.$el.find('input#dob')[0],
      format: 'YYYY-MM-D'
    });
  };

  AdminCompetitor.prototype.setClubName = function() {
    return this.model.set({
      "club_name": this._club_input.val()
    }, {
      persistChange: true
    });
  };

  AdminCompetitor.prototype.save = function() {
    return this.model.save({
      club_name: this._club_input.val()
    }).done((function(_this) {
      return function() {
        return _fr.navigate("/runners/" + _this.model.id);
      };
    })(this));
  };

  return AdminCompetitor;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AdminCompetitorLayout = (function(superClass) {
  extend(AdminCompetitorLayout, superClass);

  function AdminCompetitorLayout() {
    this["default"] = bind(this["default"], this);
    this.routes = bind(this.routes, this);
    return AdminCompetitorLayout.__super__.constructor.apply(this, arguments);
  }

  AdminCompetitorLayout.prototype.routes = function() {
    return {
      "(/)": this["default"]
    };
  };

  AdminCompetitorLayout.prototype.initialize = function() {
    var view;
    AdminCompetitorLayout.__super__.initialize.apply(this, arguments);
    view = new FellRace.Views.AdminCompetitor({
      model: this.model
    });
    return _fr.mainRegion.show(view);
  };

  AdminCompetitorLayout.prototype["default"] = function() {
    return _fr.closeRight();
  };

  return AdminCompetitorLayout;

})(FellRace.Views.LayoutView);

FellRace.Views.AdminCompetitorsLayout = (function(superClass) {
  extend(AdminCompetitorsLayout, superClass);

  function AdminCompetitorsLayout() {
    this.competitor = bind(this.competitor, this);
    this.routes = bind(this.routes, this);
    return AdminCompetitorsLayout.__super__.constructor.apply(this, arguments);
  }

  AdminCompetitorsLayout.prototype.routes = function() {
    return {
      ":id(/*path)": this.competitor
    };
  };

  AdminCompetitorsLayout.prototype.competitor = function(id, path) {
    var model;
    if (this._previous.route === "competitor" && this._previous.param === id) {
      return this._previous.view.handle(path);
    } else {
      model = new FellRace.Models.Competitor({
        id: id
      });
      return $.getJSON((model.url()) + "/permissions", function(data) {
        var ref;
        if ((ref = data.permissions) != null ? ref.can_edit : void 0) {
          return $.getJSON((model.url()) + "/edit", function(data) {
            var view;
            model.set(data);
            view = new FellRace.Views.AdminCompetitorLayout({
              model: model
            });
            return this._previous = {
              route: "competitor",
              view: view,
              param: id
            };
          });
        } else {
          return _fr.navigate("/runners/" + id);
        }
      });
    }
  };

  return AdminCompetitorsLayout;

})(FellRace.Views.LayoutView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.CompetitorEntryRow = (function(superClass) {
  extend(CompetitorEntryRow, superClass);

  function CompetitorEntryRow() {
    this.withdraw = bind(this.withdraw, this);
    this.date = bind(this.date, this);
    this.onRender = bind(this.onRender, this);
    return CompetitorEntryRow.__super__.constructor.apply(this, arguments);
  }

  CompetitorEntryRow.prototype.template = "competitors/entry";

  CompetitorEntryRow.prototype.tagName = "tr";

  CompetitorEntryRow.prototype.events = {
    "click a.cancel": "withdraw"
  };

  CompetitorEntryRow.prototype.bindings = {
    ":el": {
      classes: {
        cancelled: "cancelled"
      }
    },
    "span.date": {
      observe: "instance_date",
      onGet: "date"
    },
    "a.race": {
      observe: "race_name",
      attributes: [
        {
          observe: ["race_slug", "instance_name"],
          name: "href",
          onGet: function(arg) {
            var instance_name, race_slug, ref;
            ref = arg != null ? arg : [], race_slug = ref[0], instance_name = ref[1];
            return "/races/" + race_slug + "/" + instance_name;
          }
        }
      ]
    },
    "a.cancel": {
      observe: ["permissions", "cancelled"],
      visible: true,
      onGet: function(arg) {
        var cancelled, permissions;
        permissions = arg[0], cancelled = arg[1];
        return (permissions != null ? permissions.can_cancel : void 0) && !cancelled;
      }
    },
    "span.cancelled": {
      observe: "cancelled",
      visible: true
    }
  };

  CompetitorEntryRow.prototype.onRender = function() {
    return this.stickit();
  };

  CompetitorEntryRow.prototype.date = function(date) {
    if (date) {
      return moment(date).format("D MMM YY");
    }
  };

  CompetitorEntryRow.prototype.currency = function(amount) {
    if (amount == null) {
      amount = 0;
    }
    return (amount / 100.0).toFixed(2);
  };

  CompetitorEntryRow.prototype.withdraw = function() {
    if (confirm("Cancel entry for " + (this.model.get("race_name")) + " " + (this.model.get("instance_name")) + "?")) {
      return this.model.set({
        cancelled: true
      }, {
        persistChange: true
      });
    }
  };

  return CompetitorEntryRow;

})(Backbone.Marionette.ItemView);

FellRace.Views.CompetitorEntriesTable = (function(superClass) {
  extend(CompetitorEntriesTable, superClass);

  function CompetitorEntriesTable() {
    this.onRender = bind(this.onRender, this);
    return CompetitorEntriesTable.__super__.constructor.apply(this, arguments);
  }

  CompetitorEntriesTable.prototype.template = "competitors/entries";

  CompetitorEntriesTable.prototype.itemView = FellRace.Views.CompetitorEntryRow;

  CompetitorEntriesTable.prototype.itemViewContainer = 'tbody';

  CompetitorEntriesTable.prototype.bindings = {
    ":el": {
      observe: "entries",
      visible: "any"
    }
  };

  CompetitorEntriesTable.prototype.onRender = function() {
    return this.stickit();
  };

  CompetitorEntriesTable.prototype.any = function(array) {
    if (array == null) {
      array = [];
    }
    return array.length > 0;
  };

  return CompetitorEntriesTable;

})(Backbone.Marionette.CompositeView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.CompetitorLayout = (function(superClass) {
  extend(CompetitorLayout, superClass);

  function CompetitorLayout() {
    this.race = bind(this.race, this);
    this.show = bind(this.show, this);
    this.routes = bind(this.routes, this);
    return CompetitorLayout.__super__.constructor.apply(this, arguments);
  }

  CompetitorLayout.prototype.routes = function() {
    return {
      "(/)": this.show,
      ":race_slug(/*path)": this.race
    };
  };

  CompetitorLayout.prototype.initialize = function() {
    var view;
    CompetitorLayout.__super__.initialize.apply(this, arguments);
    view = new FellRace.Views.Competitor({
      model: this.model
    });
    return _fr.mainRegion.show(view);
  };

  CompetitorLayout.prototype.show = function() {
    _fr.closeRight();
    return this._previous = {
      route: "default"
    };
  };

  CompetitorLayout.prototype.race = function(race_slug, path) {
    var race;
    if (this._previous.route === "race" && this._previous.param === race_slug) {
      return this._previous.view.handle(path);
    } else {
      race = new FellRace.Models.RacePublication({
        slug: race_slug
      });
      return race.fetch({
        success: (function(_this) {
          return function() {
            var view;
            view = new FellRace.Views.CompetitorRaceLayout({
              model: race,
              competitor: _this.model,
              path: path
            });
            return _this._previous = {
              route: "race",
              param: race_slug,
              view: view
            };
          };
        })(this)
      });
    }
  };

  return CompetitorLayout;

})(FellRace.Views.LayoutView);

FellRace.Views.CompetitorsLayout = (function(superClass) {
  extend(CompetitorsLayout, superClass);

  function CompetitorsLayout() {
    this.competitor = bind(this.competitor, this);
    this["default"] = bind(this["default"], this);
    this.routes = bind(this.routes, this);
    return CompetitorsLayout.__super__.constructor.apply(this, arguments);
  }

  CompetitorsLayout.prototype.routes = function() {
    return {
      "(/)": this["default"],
      ":id(/*path)": this.competitor
    };
  };

  CompetitorsLayout.prototype["default"] = function() {
    _fr.closeRight();
    $.notify("error", "no 'runners' page yet");
    return this._previous = {
      route: "default"
    };
  };

  CompetitorsLayout.prototype.competitor = function(id, path) {
    var model;
    if (this._previous.route === "competitor" && this._previous.param === id) {
      return this._previous.view.handle(path);
    } else {
      model = new FellRace.Models.Competitor({
        id: id
      });
      return model.fetch({
        success: (function(_this) {
          return function() {
            var view;
            view = new FellRace.Views.CompetitorLayout({
              model: model,
              path: path
            });
            return _this._previous = {
              route: "competitor",
              param: id,
              view: view
            };
          };
        })(this)
      });
    }
  };

  return CompetitorsLayout;

})(FellRace.Views.LayoutView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.CompetitorListItem = (function(superClass) {
  extend(CompetitorListItem, superClass);

  function CompetitorListItem() {
    this.name = bind(this.name, this);
    this.onRender = bind(this.onRender, this);
    return CompetitorListItem.__super__.constructor.apply(this, arguments);
  }

  CompetitorListItem.prototype.template = 'competitors/list_item';

  CompetitorListItem.prototype.className = "competitor";

  CompetitorListItem.prototype.bindings = {
    ".name": {
      observe: ["forename", "surname"],
      onGet: "name",
      attributes: [
        {
          name: "href",
          observe: "id",
          onGet: function(val) {
            return "/runners/" + val;
          }
        }
      ]
    }
  };

  CompetitorListItem.prototype.onRender = function() {
    return this.stickit();
  };

  CompetitorListItem.prototype.name = function(values) {
    return values[0] + " " + values[1];
  };

  return CompetitorListItem;

})(Backbone.Marionette.ItemView);

FellRace.Views.CompetitorsList = (function(superClass) {
  extend(CompetitorsList, superClass);

  function CompetitorsList() {
    return CompetitorsList.__super__.constructor.apply(this, arguments);
  }

  CompetitorsList.prototype.itemView = FellRace.Views.CompetitorListItem;

  return CompetitorsList;

})(Backbone.Marionette.CollectionView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.MatchRow = (function(superClass) {
  extend(MatchRow, superClass);

  function MatchRow() {
    this.merge = bind(this.merge, this);
    this.onRender = bind(this.onRender, this);
    return MatchRow.__super__.constructor.apply(this, arguments);
  }

  MatchRow.prototype.template = 'competitors/match_row';

  MatchRow.prototype.className = "competitor";

  MatchRow.prototype.tagName = "tr";

  MatchRow.prototype.events = {
    "click a.merge": "merge"
  };

  MatchRow.prototype.bindings = {
    "a.name": {
      attributes: [
        {
          observe: "id",
          name: "href",
          onGet: function(val) {
            return "/runners/" + val;
          }
        }
      ]
    },
    "span.forename": "forename",
    "span.middlename": "middlename",
    "span.surname": "surname",
    "span.gender": "gender",
    "span.club": "club_name"
  };

  MatchRow.prototype.onRender = function() {
    return this.stickit();
  };

  MatchRow.prototype.merge = function() {
    return $.ajax({
      url: (this.model.url()) + "/request_merge",
      type: "POST",
      dataType: "text",
      data: {
        competitor: {
          merge_to_id: this.model.collection.competitor.id
        }
      },
      success: (function(_this) {
        return function() {
          _this.model.collection.remove(_this.model);
          return $.notify("success", "Merge request sent to admin");
        };
      })(this)
    });
  };

  return MatchRow;

})(Backbone.Marionette.ItemView);

FellRace.Views.MatchTable = (function(superClass) {
  extend(MatchTable, superClass);

  function MatchTable() {
    return MatchTable.__super__.constructor.apply(this, arguments);
  }

  MatchTable.prototype.itemView = FellRace.Views.MatchRow;

  MatchTable.prototype.itemViewContainer = 'tbody';

  MatchTable.prototype.template = "competitors/match_table";

  MatchTable.prototype.bindings = {
    ":el": {
      observe: "match_count",
      visible: function(count) {
        return count > 0;
      }
    }
  };

  MatchTable.prototype.initialize = function() {
    this.stickit();
    this.collection = new FellRace.Collections.Competitors([]);
    this.collection.competitor = this.model;
    this.model.set({
      match_count: 0
    });
    $.getJSON((_fr.apiUrl()) + "/competitors/" + this.model.id + "/matches", (function(_this) {
      return function(data) {
        return _this.collection.reset(data);
      };
    })(this));
    return this.collection.on("add remove reset", (function(_this) {
      return function() {
        return _this.model.set({
          match_count: _this.collection.length
        });
      };
    })(this));
  };

  return MatchTable;

})(Backbone.Marionette.CompositeView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.CompetitorMergeRow = (function(superClass) {
  extend(CompetitorMergeRow, superClass);

  function CompetitorMergeRow() {
    this.accept = bind(this.accept, this);
    this.reject = bind(this.reject, this);
    this.name = bind(this.name, this);
    this.onRender = bind(this.onRender, this);
    return CompetitorMergeRow.__super__.constructor.apply(this, arguments);
  }

  CompetitorMergeRow.prototype.template = 'competitors/merge_row';

  CompetitorMergeRow.prototype.className = "competitor";

  CompetitorMergeRow.prototype.tagName = "tr";

  CompetitorMergeRow.prototype.events = {
    "click a.accept": "accept",
    "click a.reject": "reject"
  };

  CompetitorMergeRow.prototype.bindings = {
    ".name": {
      observe: ["forename", "surname"],
      onGet: "name",
      attributes: [
        {
          observe: "id",
          name: "href",
          onGet: function(val) {
            return "/runners/" + val;
          }
        }
      ]
    },
    ".club": "club_name",
    ".dob": "dob",
    ".gender": "gender"
  };

  CompetitorMergeRow.prototype.onRender = function() {
    this._main_competitor = new FellRace.Models.Competitor(this.model.get("main_competitor"));
    new FellRace.Views.MainCompetitor({
      model: this._main_competitor,
      el: this.$el.find(".main_competitor")
    }).render();
    return this.stickit();
  };

  CompetitorMergeRow.prototype.name = function(values) {
    return values[0] + " " + values[1];
  };

  CompetitorMergeRow.prototype.reject = function() {
    return this.model.save({
      merge_to_id: null
    }, {
      success: (function(_this) {
        return function(data) {
          _this.remove();
          return $.notify("success", "Merge rejected");
        };
      })(this)
    });
  };

  CompetitorMergeRow.prototype.accept = function() {
    return $.ajax({
      url: (this.model.url()) + "/merge",
      type: "POST",
      dataType: "text",
      success: (function(_this) {
        return function() {
          _this.remove();
          return $.notify("success", "Merge successful");
        };
      })(this)
    });
  };

  return CompetitorMergeRow;

})(Backbone.Marionette.ItemView);

FellRace.Views.MainCompetitor = (function(superClass) {
  extend(MainCompetitor, superClass);

  function MainCompetitor() {
    this.name = bind(this.name, this);
    this.onRender = bind(this.onRender, this);
    return MainCompetitor.__super__.constructor.apply(this, arguments);
  }

  MainCompetitor.prototype.template = 'competitors/main';

  MainCompetitor.prototype.className = "competitor";

  MainCompetitor.prototype.tagName = "tr";

  MainCompetitor.prototype.bindings = {
    ".main_name": {
      observe: ["forename", "surname"],
      onGet: "name",
      attributes: [
        {
          observe: "id",
          name: "href",
          onGet: function(val) {
            return "/runners/" + val;
          }
        }
      ]
    },
    ".main_club": "club_name",
    ".main_dob": "dob",
    ".main_gender": "gender"
  };

  MainCompetitor.prototype.onRender = function() {
    return this.stickit();
  };

  MainCompetitor.prototype.name = function(values) {
    return values[0] + " " + values[1];
  };

  return MainCompetitor;

})(Backbone.Marionette.ItemView);

FellRace.Views.CompetitorsMergeTable = (function(superClass) {
  extend(CompetitorsMergeTable, superClass);

  function CompetitorsMergeTable() {
    return CompetitorsMergeTable.__super__.constructor.apply(this, arguments);
  }

  CompetitorsMergeTable.prototype.itemView = FellRace.Views.CompetitorMergeRow;

  CompetitorsMergeTable.prototype.itemViewContainer = "table.competitors";

  CompetitorsMergeTable.prototype.template = "competitors/merge_table";

  CompetitorsMergeTable.prototype.id = "competitors";

  return CompetitorsMergeTable;

})(Backbone.Marionette.CompositeView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.CompetitorPerformanceRow = (function(superClass) {
  extend(CompetitorPerformanceRow, superClass);

  function CompetitorPerformanceRow() {
    this.date = bind(this.date, this);
    this.simplestTime = bind(this.simplestTime, this);
    this.fullName = bind(this.fullName, this);
    this.totalCompetitors = bind(this.totalCompetitors, this);
    this.url = bind(this.url, this);
    this.onRender = bind(this.onRender, this);
    return CompetitorPerformanceRow.__super__.constructor.apply(this, arguments);
  }

  CompetitorPerformanceRow.prototype.template = "competitors/performance";

  CompetitorPerformanceRow.prototype.tagName = "tr";

  CompetitorPerformanceRow.prototype.bindings = {
    "span.pos": "position",
    "span.time": {
      observe: "time",
      onGet: "simplestTime"
    },
    "span.date": {
      observe: "date",
      onGet: "date"
    },
    "span.total_competitors": {
      observe: "performances_count",
      onGet: "totalCompetitors"
    },
    "a.race_name": {
      observe: "race_name",
      attributes: [
        {
          name: "href",
          observe: ["competitor_id", "race_slug", "instance_name"],
          onGet: "url"
        }
      ]
    },
    "a.winner": {
      observe: "winner_name",
      attributes: [
        {
          name: "href",
          observe: ["winner_id", "race_slug", "instance_name"],
          onGet: "url"
        }
      ]
    },
    "span.winning_time": {
      observe: "winning_time",
      onGet: "simplestTime"
    }
  };

  CompetitorPerformanceRow.prototype.onRender = function() {
    return this.stickit();
  };

  CompetitorPerformanceRow.prototype.url = function(arg) {
    var competitor_id, name, race_slug, ref;
    ref = arg != null ? arg : [], competitor_id = ref[0], race_slug = ref[1], name = ref[2];
    return "/runners/" + competitor_id + "/" + race_slug + "/" + name;
  };

  CompetitorPerformanceRow.prototype.totalCompetitors = function(count) {
    if (count) {
      return "/" + count;
    }
  };

  CompetitorPerformanceRow.prototype.fullName = function(arg) {
    var first, last, ref;
    ref = arg != null ? arg : [], first = ref[0], last = ref[1];
    if (first && last) {
      return first + " " + last;
    }
  };

  CompetitorPerformanceRow.prototype.simplestTime = function(seconds) {
    return seconds != null ? seconds.toSimplestTime() : void 0;
  };

  CompetitorPerformanceRow.prototype.date = function(date) {
    if (date) {
      return moment(date).format("D MMM YY");
    }
  };

  return CompetitorPerformanceRow;

})(Backbone.Marionette.ItemView);

FellRace.Views.CompetitorPerformancesTable = (function(superClass) {
  extend(CompetitorPerformancesTable, superClass);

  function CompetitorPerformancesTable() {
    this.onRender = bind(this.onRender, this);
    return CompetitorPerformancesTable.__super__.constructor.apply(this, arguments);
  }

  CompetitorPerformancesTable.prototype.template = "competitors/performances";

  CompetitorPerformancesTable.prototype.itemView = FellRace.Views.CompetitorPerformanceRow;

  CompetitorPerformancesTable.prototype.itemViewContainer = 'tbody';

  CompetitorPerformancesTable.prototype.bindings = {
    ":el": {
      observe: "performances",
      visible: "any"
    }
  };

  CompetitorPerformancesTable.prototype.onRender = function() {
    return this.stickit();
  };

  CompetitorPerformancesTable.prototype.any = function(array) {
    return (array != null ? array.length : void 0) > 0;
  };

  return CompetitorPerformancesTable;

})(Backbone.Marionette.CompositeView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.CompetitorRaceView = (function(superClass) {
  extend(CompetitorRaceView, superClass);

  function CompetitorRaceView() {
    this.onRender = bind(this.onRender, this);
    return CompetitorRaceView.__super__.constructor.apply(this, arguments);
  }

  CompetitorRaceView.prototype.template = "competitors/race";

  CompetitorRaceView.prototype.onRender = function() {
    return this.stickit();
  };

  return CompetitorRaceView;

})(Backbone.Marionette.ItemView);

FellRace.Views.CompetitorRaceLayout = (function(superClass) {
  extend(CompetitorRaceLayout, superClass);

  function CompetitorRaceLayout() {
    this.instance = bind(this.instance, this);
    this["default"] = bind(this["default"], this);
    this.routes = bind(this.routes, this);
    return CompetitorRaceLayout.__super__.constructor.apply(this, arguments);
  }

  CompetitorRaceLayout.prototype.initialize = function(arg) {
    this.competitor = (arg != null ? arg : {}).competitor;
    return CompetitorRaceLayout.__super__.initialize.apply(this, arguments);
  };

  CompetitorRaceLayout.prototype.routes = function() {
    return {
      "(/)": this["default"],
      ":instance_name(/*path)": this.instance
    };
  };

  CompetitorRaceLayout.prototype["default"] = function() {
    var view;
    view = new FellRace.Views.CompetitorRaceView({
      model: this.model,
      competitor: this.competitor
    });
    _fr.extraContentRegion.show(view);
    return this._previous = {
      route: "default"
    };
  };

  CompetitorRaceLayout.prototype.instance = function(instance_name, path) {
    var instance;
    if (this._previous.route === "instance" && this._previous.param === instance_name) {
      return this._previous.view.handle(path);
    } else {
      instance = this.model.past_instances.findWhere({
        name: instance_name
      });
      return instance.fetch({
        success: (function(_this) {
          return function() {
            var view;
            view = new FellRace.Views.InstanceLayout({
              model: instance,
              competitor: _this.competitor,
              path: path
            });
            return _this._previous = {
              route: "instance",
              param: instance_name,
              view: view
            };
          };
        })(this)
      });
    }
  };

  return CompetitorRaceLayout;

})(FellRace.Views.LayoutView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.Competitor = (function(superClass) {
  extend(Competitor, superClass);

  function Competitor() {
    this.backgroundImageUrl = bind(this.backgroundImageUrl, this);
    this.inlineBlock = bind(this.inlineBlock, this);
    this.onRender = bind(this.onRender, this);
    return Competitor.__super__.constructor.apply(this, arguments);
  }

  Competitor.prototype.template = 'competitors/show';

  Competitor.prototype.id = "competitor";

  Competitor.prototype.events = {
    'click a.claim': "claim",
    'click a.disown': "disown"
  };

  Competitor.prototype.bindings = {
    'a.edit': {
      observe: "permissions",
      visible: "canEdit",
      attributes: [
        {
          observe: ["id", "permissions"],
          name: "href",
          onGet: function(arg) {
            var id, permissions, ref;
            ref = arg != null ? arg : [], id = ref[0], permissions = ref[1];
            if (permissions != null ? permissions.can_edit : void 0) {
              return "/admin/runners/" + id;
            }
          }
        }
      ]
    },
    "span.forename": "forename",
    "span.middlename": "middlename",
    "span.surname": "surname",
    ".picture": {
      attributes: [
        {
          name: "style",
          observe: 'picture',
          onGet: "backgroundImageUrl"
        }
      ]
    }
  };

  Competitor.prototype.onRender = function() {
    var entries_view, match_table, performances_view, ref;
    this.stickit();
    performances_view = new FellRace.Views.CompetitorPerformancesTable({
      model: this.model,
      collection: this.model.performances,
      el: this.$el.find(".results")
    });
    performances_view.render();
    entries_view = new FellRace.Views.CompetitorEntriesTable({
      model: this.model,
      collection: this.model.entries,
      el: this.$el.find(".entries")
    });
    entries_view.render();
    if (_fr.userConfirmed() && ((ref = this.model.get("permissions")) != null ? ref.can_edit : void 0)) {
      match_table = new FellRace.Views.MatchTable({
        model: this.model,
        el: this.$el.find(".matches")
      });
      return match_table.render();
    }
  };

  Competitor.prototype.canEdit = function(arg) {
    var can_edit;
    can_edit = (arg != null ? arg : {}).can_edit;
    return can_edit;
  };

  Competitor.prototype.inlineBlock = function($el, isVisible, options) {
    if (isVisible) {
      return $el.css({
        display: "inline-block"
      });
    } else {
      return $el.hide();
    }
  };

  Competitor.prototype.backgroundImageUrl = function(url) {
    if (url) {
      if (url.match(/data:image/)) {
        return "background-image: url(" + url + ")";
      } else if (url.match(/^\//)) {
        return "background-image: url(" + (_fr.apiUrl()) + url + ")";
      } else {
        return "background-image: url(" + url + ")";
      }
    }
  };

  return Competitor;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.CompetitorRow = (function(superClass) {
  extend(CompetitorRow, superClass);

  function CompetitorRow() {
    this.name = bind(this.name, this);
    this.onRender = bind(this.onRender, this);
    return CompetitorRow.__super__.constructor.apply(this, arguments);
  }

  CompetitorRow.prototype.template = 'competitors/row';

  CompetitorRow.prototype.className = "competitor";

  CompetitorRow.prototype.tagName = "tr";

  CompetitorRow.prototype.bindings = {
    ".name": {
      observe: ["forename", "surname"],
      onGet: "name",
      attributes: [
        {
          name: "href",
          observe: "id",
          onGet: function(val) {
            return "/runners/" + val;
          }
        }
      ]
    }
  };

  CompetitorRow.prototype.onRender = function() {
    var club;
    this.stickit();
    if (club = this.model.get("club")) {
      this._club = _fr.clubs.findOrAdd(club);
      if (!this._club.has("name")) {
        this._club.fetch();
      }
      this._club_link = new FellRace.Views.ClubLink({
        model: this._club,
        el: this.$el.find(".club")
      });
      return this._club_link.render();
    }
  };

  CompetitorRow.prototype.name = function(values) {
    return values[0] + " " + values[1];
  };

  return CompetitorRow;

})(Backbone.Marionette.ItemView);

FellRace.Views.CompetitorsTable = (function(superClass) {
  extend(CompetitorsTable, superClass);

  function CompetitorsTable() {
    this.doneSearching = bind(this.doneSearching, this);
    this.searching = bind(this.searching, this);
    this.keypress = bind(this.keypress, this);
    this.search = bind(this.search, this);
    this.onRender = bind(this.onRender, this);
    return CompetitorsTable.__super__.constructor.apply(this, arguments);
  }

  CompetitorsTable.prototype.itemView = FellRace.Views.CompetitorRow;

  CompetitorsTable.prototype.itemViewContainer = ".competitors";

  CompetitorsTable.prototype.template = "competitors/table";

  CompetitorsTable.prototype.id = "competitors";

  CompetitorsTable.prototype.events = {
    "click a.search": "search",
    "keypress": "keypress"
  };

  CompetitorsTable.prototype.bindings = {
    "span.forename": "forename",
    "span.surname": "surname",
    "span.club": "club"
  };

  CompetitorsTable.prototype.onRender = function() {
    this.$el.find('.editable').editable();
    return this.stickit();
  };

  CompetitorsTable.prototype.search = function(e) {
    var club, forename, surname;
    if (e) {
      e.preventDefault();
    }
    forename = this.model.get("forename") || "";
    surname = this.model.get("surname") || "";
    club = this.model.get("club") || "";
    this.searching();
    return $.getJSON("/api/competitors/search?forename=" + forename + "&surname=" + surname + "&club=" + club, (function(_this) {
      return function(response) {
        _this.collection.set(response);
        return _this.doneSearching();
      };
    })(this));
  };

  CompetitorsTable.prototype.keypress = function(e) {
    var code;
    code = e.keyCode || e.which;
    if (code === 13) {
      e.preventDefault();
      return this.search();
    }
  };

  CompetitorsTable.prototype.searching = function() {
    return this.$el.find("a.search").addClass("waiting");
  };

  CompetitorsTable.prototype.doneSearching = function() {
    return this.$el.find("a.search").removeClass("waiting");
  };

  return CompetitorsTable;

})(Backbone.Marionette.CompositeView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AdminEntryRow = (function(superClass) {
  extend(AdminEntryRow, superClass);

  function AdminEntryRow() {
    this.onRender = bind(this.onRender, this);
    return AdminEntryRow.__super__.constructor.apply(this, arguments);
  }

  AdminEntryRow.prototype.className = "entry";

  AdminEntryRow.prototype.tagName = "tr";

  AdminEntryRow.prototype.bindings = {
    "a.name": {
      attributes: [
        {
          observe: "competitor_id",
          name: "href",
          onGet: "competitorUrl"
        }
      ]
    },
    "span.fore": "forename",
    "span.middle": "middlename",
    "span.sur": "surname",
    "span.cat": "category",
    "span.paid_or_accepted": {
      attributes: [
        {
          name: "class",
          observe: "paid",
          onGet: "onlineOrPostal"
        }
      ]
    },
    ".club_name": {
      observe: "club_name"
    }
  };

  AdminEntryRow.prototype.onRender = function() {
    return this.stickit();
  };

  AdminEntryRow.prototype.competitorUrl = function(id) {
    return "/runners/" + id;
  };

  AdminEntryRow.prototype.name = function(arg) {
    var fore, middle, ref;
    ref = arg != null ? arg : [], fore = ref[0], middle = ref[1];
    if (middle) {
      return fore + " " + middle;
    } else {
      return fore;
    }
  };

  AdminEntryRow.prototype.onlineOrPostal = function(paid) {
    if (paid) {
      return "online";
    } else {
      return "postal";
    }
  };

  AdminEntryRow.prototype.clubUrl = function(id) {
    if (id) {
      return "/clubs/" + id;
    }
  };

  return AdminEntryRow;

})(Backbone.Marionette.ItemView);

FellRace.Views.NoEntryRow = (function(superClass) {
  extend(NoEntryRow, superClass);

  function NoEntryRow() {
    return NoEntryRow.__super__.constructor.apply(this, arguments);
  }

  NoEntryRow.prototype.template = "entries/no_entry_row";

  return NoEntryRow;

})(FellRace.Views.AdminEntryRow);

FellRace.Views.UncancelledAdminEntryRow = (function(superClass) {
  extend(UncancelledAdminEntryRow, superClass);

  function UncancelledAdminEntryRow() {
    this.cancelEntry = bind(this.cancelEntry, this);
    return UncancelledAdminEntryRow.__super__.constructor.apply(this, arguments);
  }

  UncancelledAdminEntryRow.prototype.template = "entries/admin_row";

  UncancelledAdminEntryRow.prototype.events = {
    "click a.withdraw": "cancelEntry"
  };

  UncancelledAdminEntryRow.prototype.cancelEntry = function() {
    return this.model.save({
      cancelled: true
    });
  };

  return UncancelledAdminEntryRow;

})(FellRace.Views.AdminEntryRow);

FellRace.Views.AdminEntriesTable = (function(superClass) {
  extend(AdminEntriesTable, superClass);

  function AdminEntriesTable() {
    return AdminEntriesTable.__super__.constructor.apply(this, arguments);
  }

  AdminEntriesTable.prototype.itemView = FellRace.Views.UncancelledAdminEntryRow;

  AdminEntriesTable.prototype.template = "entries/admin_table";

  AdminEntriesTable.prototype.tagName = "table";

  AdminEntriesTable.prototype.itemViewContainer = "tbody";

  return AdminEntriesTable;

})(Backbone.Marionette.CompositeView);

FellRace.Views.CancelledAdminEntryRow = (function(superClass) {
  extend(CancelledAdminEntryRow, superClass);

  function CancelledAdminEntryRow() {
    this.reinstateEntry = bind(this.reinstateEntry, this);
    return CancelledAdminEntryRow.__super__.constructor.apply(this, arguments);
  }

  CancelledAdminEntryRow.prototype.template = "entries/cancelled_admin_row";

  CancelledAdminEntryRow.prototype.events = {
    "click a.reinstate": "reinstateEntry"
  };

  CancelledAdminEntryRow.prototype.reinstateEntry = function() {
    return this.model.save({
      cancelled: false
    });
  };

  return CancelledAdminEntryRow;

})(FellRace.Views.AdminEntryRow);

FellRace.Views.AdminCancelledEntriesTable = (function(superClass) {
  extend(AdminCancelledEntriesTable, superClass);

  function AdminCancelledEntriesTable() {
    return AdminCancelledEntriesTable.__super__.constructor.apply(this, arguments);
  }

  AdminCancelledEntriesTable.prototype.itemView = FellRace.Views.CancelledAdminEntryRow;

  return AdminCancelledEntriesTable;

})(FellRace.Views.AdminEntriesTable);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.EditEntryCompetitor = (function(superClass) {
  extend(EditEntryCompetitor, superClass);

  function EditEntryCompetitor() {
    this.saveCompetitor = bind(this.saveCompetitor, this);
    this.setClubName = bind(this.setClubName, this);
    this.onRender = bind(this.onRender, this);
    return EditEntryCompetitor.__super__.constructor.apply(this, arguments);
  }

  EditEntryCompetitor.prototype.template = 'entries/edit_competitor';

  EditEntryCompetitor.prototype.bindings = {
    "input#forename": "forename",
    "input#middlename": "middlename",
    "input#surname": "surname",
    "input[name='gender']": "gender",
    "input#dob": "dob",
    "input#postal_address_line_1": "postal_address_line_1",
    "input#postal_address_line_2": "postal_address_line_2",
    "input#postal_town": "postal_town",
    "input#postcode": "postcode",
    "input#email": "email",
    "input#phone": "phone",
    "input#mobile": "mobile",
    "select#postal_county": "postal_county",
    "select#postal_country": "postal_country",
    "input#club_name": {
      observe: "club_name",
      updateModel: false
    }
  };

  EditEntryCompetitor.prototype.initialize = function() {
    this.model.updateable();
    return Backbone.Validation.bind(this);
  };

  EditEntryCompetitor.prototype.onRender = function() {
    if (!this.model.get("postal_country")) {
      this.model.set("postal_country", "GB");
    }
    this.stickit();
    this.$el.find("input").checkAndTriggerAutoFillEvent();
    this._club_input = this.$el.find("input#club_name");
    this._club_chooser = new FellRace.Views.ClubChooser({
      model: this.model,
      input: this._club_input
    });
    this._club_chooser.render();
    this._club_chooser.on("chosen", this.setClubName);
    return this._dob_picker = new Pikaday({
      field: this.$el.find('input#dob')[0],
      format: 'YYYY-MM-D'
    });
  };

  EditEntryCompetitor.prototype.setClubName = function() {
    return this.model.set({
      "club_name": this._club_input.val()
    }, {
      persistChange: true
    });
  };

  EditEntryCompetitor.prototype.saveCompetitor = function(callback) {
    if (this._club_input.val() !== this.model.get("club_name")) {
      return this.model.save({
        club_name: this._club_input.val()
      }).done(callback);
    } else {
      return callback();
    }
  };

  return EditEntryCompetitor;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.NewEntry = (function(superClass) {
  extend(NewEntry, superClass);

  function NewEntry() {
    this.calculateCharge = bind(this.calculateCharge, this);
    this.decimalize = bind(this.decimalize, this);
    this.isReady = bind(this.isReady, this);
    this.setReadiness = bind(this.setReadiness, this);
    this.onRender = bind(this.onRender, this);
    return NewEntry.__super__.constructor.apply(this, arguments);
  }

  NewEntry.prototype.template = 'entries/new';

  NewEntry.prototype.bindings = {
    "input#emergency_contact_name": "emergency_contact_name",
    "input#emergency_contact_phone": "emergency_contact_phone",
    "input#terms_accepted": "terms_accepted",
    "span#amount": {
      observe: "cost",
      onGet: "decimalize"
    },
    "span#deduction": {
      observe: "cost",
      onGet: "calculateCharge"
    }
  };

  NewEntry.prototype.initialize = function() {
    this._instance = this.model.collection.instance;
    return this.model.set("cost", this._instance.get("online_entry_fee"));
  };

  NewEntry.prototype.onRender = function() {
    this.stickit();
    this._edit_competitor_view = new FellRace.Views.EditEntryCompetitor({
      model: this.model.competitor,
      el: this.$el.find("section.competitor")
    });
    this._edit_competitor_view.render();
    this.setReadiness();
    this._competitor.on("change", this.setReadiness);
    return this.model.on("change", this.setReadiness);
  };

  NewEntry.prototype.setReadiness = function() {
    if (this.isReady()) {
      return this._edit_payment_view.enable();
    } else {
      return this._edit_payment_view.disable();
    }
  };

  NewEntry.prototype.isReady = function() {
    return this.model.isValid(true);
  };

  NewEntry.prototype.decimalize = function(value) {
    var decimal;
    return decimal = value != null ? value.toFixed(2) : void 0;
  };

  NewEntry.prototype.calculateCharge = function(value) {
    var fee, fr_fixed, fr_ratio, merchant_fixed, merchant_ratio;
    fee = parseFloat(value);
    merchant_ratio = 0.024;
    merchant_fixed = 0.2;
    fr_ratio = 0.025;
    fr_fixed = 0;
    return this.decimalize(fee * (merchant_ratio + fr_ratio) + merchant_fixed + fr_fixed) + ".";
  };

  return NewEntry;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.EditEntryPayment = (function(superClass) {
  extend(EditEntryPayment, superClass);

  function EditEntryPayment() {
    this.captureStripeToken = bind(this.captureStripeToken, this);
    this.prepareTransaction = bind(this.prepareTransaction, this);
    this.stopWorking = bind(this.stopWorking, this);
    this.disable = bind(this.disable, this);
    this.enable = bind(this.enable, this);
    this.dimUnlessMatchy = bind(this.dimUnlessMatchy, this);
    this.onRender = bind(this.onRender, this);
    return EditEntryPayment.__super__.constructor.apply(this, arguments);
  }

  EditEntryPayment.prototype.template = 'entries/edit_payment';

  EditEntryPayment.prototype.events = {
    "click a.create": "prepareTransaction"
  };

  EditEntryPayment.prototype.bindings = {
    "input#card_number": {
      observe: "card_number",
      attributes: [
        {
          name: "class",
          observe: "error_param",
          onGet: function(param) {
            if (param === "card_number") {
              return "error";
            }
          }
        }
      ]
    },
    "input#expiry_year": {
      observe: "exp_year",
      attributes: [
        {
          name: "class",
          observe: "error_param",
          onGet: function(param) {
            if (param === "exp_year") {
              return "error";
            }
          }
        }
      ]
    },
    "input#expiry_month": {
      observe: "exp_month",
      attributes: [
        {
          name: "class",
          observe: "error_param",
          onGet: function(param) {
            if (param === "exp_month") {
              return "error";
            }
          }
        }
      ]
    },
    "input#cvc": {
      observe: "cvc",
      attributes: [
        {
          name: "class",
          observe: "error_param",
          onGet: function(param) {
            if (param === "cvc") {
              return "error";
            }
          }
        }
      ]
    },
    "span.card": {
      observe: "card_type",
      update: "dimUnlessMatchy"
    },
    "span.error_message": "error_message"
  };

  EditEntryPayment.prototype.initialize = function() {
    Backbone.Validation.bind(this);
    return this.model.on("change:error_message change:error_param", this.stopWorking);
  };

  EditEntryPayment.prototype.onRender = function() {
    this.stickit();
    return this._stumbit = this.$el.find("a.create");
  };

  EditEntryPayment.prototype.dimUnlessMatchy = function($el, val, model, options) {
    if (!val) {
      return $el.fadeTo(200, 0.6);
    } else {
      return $el.each((function(_this) {
        return function(i, thisel) {
          var $thisel;
          $thisel = $(thisel);
          if ($thisel.hasClass(val)) {
            return $thisel.fadeTo(200, 1.0);
          } else {
            return $thisel.fadeTo(200, 0.1);
          }
        };
      })(this));
    }
  };

  EditEntryPayment.prototype.enable = function() {
    return this._stumbit.removeClass('unavailable');
  };

  EditEntryPayment.prototype.disable = function() {
    return this._stumbit.addClass('unavailable');
  };

  EditEntryPayment.prototype.stopWorking = function() {
    return this._stumbit.removeClass("working");
  };

  EditEntryPayment.prototype.prepareTransaction = function(e) {
    this.model.set({
      error_param: null,
      error_message: null
    });
    if (!this._stumbit.hasClass('unavailable')) {
      this._stumbit.addClass("working");
      return Stripe.card.createToken({
        number: this.model.get('card_number'),
        cvc: this.model.get('cvc'),
        exp_month: this.model.get('exp_month'),
        exp_year: this.model.get('exp_year')
      }, this.captureStripeToken);
    }
  };

  EditEntryPayment.prototype.captureStripeToken = function(status, response) {
    if (status < 400) {
      return this.model.set("stripeToken", response.id);
    } else if ((400 <= status && status < 500)) {
      return this.model.set({
        error_param: response.error.param,
        error_message: response.error.message
      });
    } else {
      return this.model.set({
        error_message: "Server error, please try again."
      });
    }
  };

  return EditEntryPayment;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.EntryRow = (function(superClass) {
  extend(EntryRow, superClass);

  function EntryRow() {
    this.visibleWithSlide = bind(this.visibleWithSlide, this);
    this.untrue = bind(this.untrue, this);
    this.rowClass = bind(this.rowClass, this);
    this.onRender = bind(this.onRender, this);
    return EntryRow.__super__.constructor.apply(this, arguments);
  }

  EntryRow.prototype.template = "entries/row";

  EntryRow.prototype.className = "entry";

  EntryRow.prototype.tagName = "tr";

  EntryRow.prototype.bindings = {
    ":el": {
      observe: "unmatched",
      visible: "untrue",
      visibleFn: "visibleWithSlide"
    },
    "a.name": {
      attributes: [
        {
          observe: "competitor_id",
          name: "href",
          onGet: "competitorUrl"
        }
      ]
    },
    "span.fore": {
      observe: "forename"
    },
    "span.sur": {
      observe: "surname"
    },
    "td.club": "club_name",
    "td.cat": "category"
  };

  EntryRow.prototype.onRender = function() {
    return this.stickit();
  };

  EntryRow.prototype.competitorUrl = function(id) {
    return "/runners/" + id;
  };

  EntryRow.prototype.clubUrl = function(id) {
    if (id) {
      return "/clubs/" + id;
    }
  };

  EntryRow.prototype.rowClass = function(value) {
    var cssclass;
    cssclass = "entry";
    if (value) {
      cssclass << " postal";
    }
    return cssclass;
  };

  EntryRow.prototype.untrue = function(value) {
    return !value;
  };

  EntryRow.prototype.visibleWithSlide = function($el, isVisible, options) {
    if (isVisible) {
      return $el.slideDown('fast');
    } else {
      return $el.slideUp('fast');
    }
  };

  return EntryRow;

})(Backbone.Marionette.ItemView);

FellRace.Views.EntriesTable = (function(superClass) {
  extend(EntriesTable, superClass);

  function EntriesTable() {
    this.onRender = bind(this.onRender, this);
    return EntriesTable.__super__.constructor.apply(this, arguments);
  }

  EntriesTable.prototype.itemView = FellRace.Views.EntryRow;

  EntriesTable.prototype.template = "entries/table";

  EntriesTable.prototype.itemViewContainer = "tbody";

  EntriesTable.prototype.onRender = function() {
    this._filter = new FellRace.Views.CollectionFilter({
      collection: this.collection,
      el: this.$el.find('input')
    });
    return this._filter.render();
  };

  return EntriesTable;

})(Backbone.Marionette.CompositeView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.IndexView = (function(superClass) {
  extend(IndexView, superClass);

  function IndexView() {
    this.signUpForEvent = bind(this.signUpForEvent, this);
    this.onRender = bind(this.onRender, this);
    this.initialize = bind(this.initialize, this);
    return IndexView.__super__.constructor.apply(this, arguments);
  }

  IndexView.prototype.template = "index";

  IndexView.prototype.id = "index";

  IndexView.prototype.events = {
    "click a.sign_up_for_event": "signUpForEvent"
  };

  IndexView.prototype.bindings = {
    ".get_yours": {
      observe: "state",
      visible: function(val) {
        return val === FellRace.Models.UserSession.unknownState;
      }
    },
    ".confirm": {
      observe: "state",
      visible: function(val) {
        return val === FellRace.Models.UserSession.unconfirmedState;
      }
    }
  };

  IndexView.prototype.initialize = function() {
    return this.model = _fr.session;
  };

  IndexView.prototype.onRender = function() {
    var confirmation, future_list, past_list;
    _fr.setMapOptions();
    this.stickit();
    confirmation = new FellRace.Views.UserConfirmationNotice({
      el: this.$el.find(".confirm")
    });
    confirmation.render();
    future_list = new FellRace.Views.FutureIndexInstances({
      collection: _fr.future_instances,
      template: "instances/future_list",
      el: this.$el.find("#future_instances")
    });
    future_list.render();
    past_list = new FellRace.Views.PastIndexInstances({
      collection: _fr.past_instances,
      template: "instances/past_list",
      el: this.$el.find("#past_instances")
    });
    return past_list.render();
  };

  IndexView.prototype.signUpForEvent = function() {
    return _fr.actionRegion.show(new FellRace.Views.UserSignupFormForRace());
  };

  return IndexView;

})(Backbone.Marionette.Layout);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

FellRace.Views.AdminEntriesImport = (function(superClass) {
  extend(AdminEntriesImport, superClass);

  function AdminEntriesImport() {
    this.splitName = bind(this.splitName, this);
    this.setFieldNames = bind(this.setFieldNames, this);
    this.addEntry = bind(this.addEntry, this);
    this.parseFile = bind(this.parseFile, this);
    this.onRender = bind(this.onRender, this);
    return AdminEntriesImport.__super__.constructor.apply(this, arguments);
  }

  AdminEntriesImport.prototype.template = 'instances/admin_entries_import';

  AdminEntriesImport.prototype.tagName = "section";

  AdminEntriesImport.prototype.events = {
    "change input#entries_file": 'parseFile'
  };

  AdminEntriesImport.prototype._aliases = {
    firstname: "forename",
    lastname: "surname",
    fullname: "name",
    clubname: "club_name",
    club: "club_name",
    cat: "category_name",
    category: "category_name",
    "class": "category_name",
    ageclass: "category_name",
    sex: "gender",
    dateofbirth: "dob"
  };

  AdminEntriesImport.prototype._model_fields = ["forename", "middlename", "surname", "name", "email", "club_name", "category_name", "dob", "gender", "emergency_contact_name", "emergency_contact_phone"];

  AdminEntriesImport.prototype.initialize = function() {
    return this._entries = this.model.entries;
  };

  AdminEntriesImport.prototype.onRender = function() {
    this._filefield = this.$el.find('input.file');
    this._filefield.click(function() {
      return this.value = null;
    });
    return this.stickit();
  };

  AdminEntriesImport.prototype.parseFile = function() {
    var files;
    if (files = this._filefield[0].files) {
      Papa.parse(files[0], {
        header: true,
        complete: (function(_this) {
          return function(arg) {
            var data, errors, meta, ref;
            ref = arg != null ? arg : {}, data = ref.data, errors = ref.erros, meta = ref.meta;
            _this.setFieldNames(meta.fields);
            return _.each(data, function(entry) {
              return _this.addEntry(entry);
            });
          };
        })(this)
      });
      return this._filefield;
    }
  };

  AdminEntriesImport.prototype.addEntry = function(object) {
    var entry, model;
    model = {};
    if (object.name) {
      this.splitName(object);
    }
    _.each(this._fields, (function(_this) {
      return function(file_attr, model_attr) {
        return model[model_attr] = object[file_attr];
      };
    })(this));
    if (this._entries.present({
      forename: model.forename,
      surname: model.surname,
      dob: model.dob,
      gender: model.gender
    })) {
      return console.log(model.forename + " " + model.surname + " is already entered");
    } else {
      model.accepted = true;
      model.instance_id = this.model.id;
      entry = this._entries.add(model);
      return entry.save();
    }
  };

  AdminEntriesImport.prototype.setFieldNames = function(meta_fields) {
    var base, base1, base2;
    this._fields = {};
    _.each(meta_fields, (function(_this) {
      return function(field) {
        var model_field, sanitized_field;
        sanitized_field = field.toLowerCase().replace(/\W/g, '');
        if (indexOf.call(_this._model_fields, sanitized_field) >= 0) {
          return _this._fields[sanitized_field] = field;
        } else if (model_field = _this._aliases[sanitized_field]) {
          return _this._fields[model_field] = field;
        }
      };
    })(this));
    if (this._fields.name) {
      (base = this._fields)["forename"] || (base["forename"] = "forename");
      (base1 = this._fields)["middlename"] || (base1["middlename"] = "middlename");
      (base2 = this._fields)["surname"] || (base2["surname"] = "surname");
      return delete this._fields.name;
    }
  };

  AdminEntriesImport.prototype.splitName = function(object) {
    var name;
    if (name = _.str.words(object.name)) {
      object.forename = name[0];
      if (name.length > 1) {
        object.surname = name[name.length - 1];
      }
      if (name.length > 2) {
        object.middlename = name[1];
      }
      return delete object.name;
    }
  };

  return AdminEntriesImport;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AdminFutureInstance = (function(superClass) {
  extend(AdminFutureInstance, superClass);

  function AdminFutureInstance() {
    this.exportAllData = bind(this.exportAllData, this);
    this.exportMultiSport = bind(this.exportMultiSport, this);
    this.exportAutoDownload = bind(this.exportAutoDownload, this);
    this.onClose = bind(this.onClose, this);
    this.dateForStorage = bind(this.dateForStorage, this);
    this.dateForDisplay = bind(this.dateForDisplay, this);
    this.quickSlide = bind(this.quickSlide, this);
    this["delete"] = bind(this["delete"], this);
    this.renderEntries = bind(this.renderEntries, this);
    this.renderCatCharts = bind(this.renderCatCharts, this);
    this.renderEntryChart = bind(this.renderEntryChart, this);
    this.onRender = bind(this.onRender, this);
    return AdminFutureInstance.__super__.constructor.apply(this, arguments);
  }

  AdminFutureInstance.prototype.template = 'instances/admin_future';

  AdminFutureInstance.prototype.className = "instance future admin";

  AdminFutureInstance.prototype.tagName = "section";

  AdminFutureInstance.prototype.storage_date_format = "YYYY-MM-DD";

  AdminFutureInstance.prototype.display_date_format = "Do MMM YYYY";

  AdminFutureInstance.prototype.events = {
    'click a.delete': "delete",
    "change input#entries_file": 'getPickedFile',
    'click a.autodownload': 'exportAutoDownload',
    'click a.multisport': 'exportMultiSport',
    'click a.export_all': 'exportAllData',
    "click a.toggle": "toggleMore"
  };

  AdminFutureInstance.prototype.bindings = {
    ".race_name": "race_name",
    ".instance_name": {
      observe: "name",
      onGet: "deSlugify"
    },
    "span.race_date": {
      observe: "date",
      onSet: "dateForStorage",
      onGet: "dateForDisplay"
    },
    "span.time": "time",
    "span.entry_limit": "entry_limit",
    "input#eod": "eod",
    ".eod_details": {
      observe: "eod",
      visible: true,
      visibleFn: "quickSlide"
    },
    "span.eod_fee": {
      observe: "eod_fee",
      onGet: "currency"
    },
    "input#online_entry": "online_entry",
    ".online_details": {
      observe: "online_entry",
      visible: true,
      visibleFn: "quickSlide"
    },
    "span.online_entry_opening": {
      observe: "online_entry_opening",
      onSet: "dateForStorage",
      onGet: "dateForDisplay"
    },
    "span.online_entry_closing": {
      observe: "online_entry_closing",
      onSet: "dateForStorage",
      onGet: "dateForDisplay"
    },
    "span.online_entry_fee": {
      observe: "online_entry_fee",
      onGet: "currency"
    },
    "span.admin_charge": {
      observe: "online_entry_fee",
      onGet: "adminCharge"
    },
    ".income": {
      observe: "online_total_income",
      visible: true
    },
    ".online_total_income": {
      observe: "online_total_income",
      onGet: "totalOnlineIncome"
    },
    ".online_total_fee": {
      observe: "online_total_fee",
      onGet: "totalAdminCharge"
    },
    "input#postal_entry": "postal_entry",
    ".postal_details": {
      observe: "postal_entry",
      visible: true,
      visibleFn: "quickSlide"
    },
    "span.postal_entry_opening": {
      observe: "postal_entry_opening",
      onSet: "dateForStorage",
      onGet: "dateForDisplay"
    },
    "span.postal_entry_closing": {
      observe: "postal_entry_closing",
      onSet: "dateForStorage",
      onGet: "dateForDisplay"
    },
    "span.postal_entry_fee": {
      observe: "postal_entry_fee",
      onGet: "currency"
    },
    "input.accept_cheque": "accept_cheque",
    "input.cheque_paid_to": "cheque_paid_to",
    "input.accept_cash": "accept_cash",
    ".total_count": "total_count",
    ".online_count": "online_count",
    ".postal_count": "postal_count",
    ".cancelled_count": "cancelled_count",
    "a.close": {
      attributes: [
        {
          observe: "race_slug",
          name: "href",
          onGet: "raceUrl"
        }
      ]
    }
  };

  AdminFutureInstance.prototype.onRender = function() {
    var category_picker, entries_import, entry_form;
    this.$el.find('.editable').editable();
    $.defer;
    this.stickit();
    this.$el.find('span.date').each((function(_this) {
      return function(i, el) {
        var picker;
        picker = $(el);
        picker.attr('contenteditable', 'true');
        return new Pikaday({
          field: el,
          format: _this.display_date_format,
          onSelect: function() {
            return picker.text(this.getMoment().format(this._o.format));
          }
        });
      };
    })(this));
    category_picker = new FellRace.Views.CategoryPicker({
      model: this.model,
      el: this.$el.find(".category_picker")
    });
    category_picker.render();
    entry_form = new FellRace.Views.AdminPostalEntryForm({
      model: this.model,
      el: this.$el.find(".entry_form")
    });
    entry_form.render();
    entries_import = new FellRace.Views.AdminEntriesImport({
      model: this.model,
      el: this.$el.find(".entries_import")
    });
    entries_import.render();
    this.model.entries.on("reset add remove", this.renderEntries);
    this.model.on("change:entry_data", this.renderEntryChart);
    return this.model.on("change:cat_data", this.renderCatCharts);
  };

  AdminFutureInstance.prototype.renderEntryChart = function(model, data) {
    return this._entry_chart = new Chartist.Pie('.entries_chart.ct-chart', this.model.get('entry_data'), {
      donut: true,
      donutWidth: 40,
      startAngle: 0,
      showLabel: true,
      plugins: [Chartist.plugins.tooltip()]
    });
  };

  AdminFutureInstance.prototype.renderCatCharts = function(model, data) {
    return this._cat_chart = new Chartist.Bar('.categories_chart.ct-chart', this.model.get('cat_data'), {
      stackBars: true,
      chartPadding: {
        top: 15,
        right: 15,
        bottom: 5,
        left: 10
      },
      axisY: {
        offset: 0,
        showGrid: false,
        showLabel: false
      },
      axisX: {
        offset: 30,
        showGrid: false
      },
      plugins: [Chartist.plugins.tooltip()]
    });
  };

  AdminFutureInstance.prototype.renderEntries = function() {
    var active_entries_table, cancelled_entries_table;
    active_entries_table = new FellRace.Views.AdminEntriesTable({
      collection: this.model.active_entries,
      el: this.$el.find("table.entries")
    });
    active_entries_table.render();
    cancelled_entries_table = new FellRace.Views.AdminCancelledEntriesTable({
      collection: this.model.cancelled_entries,
      el: this.$el.find("table.cancelled_entries")
    });
    return cancelled_entries_table.render();
  };

  AdminFutureInstance.prototype["delete"] = function(e) {
    if (e) {
      e.preventDefault();
    }
    return this.model.destroy();
  };

  AdminFutureInstance.prototype.adminCharge = function(fee) {
    var charge, fixed, fr_fixed, fr_ratio, merchant_fixed, merchant_ratio, ratio;
    if (fee == null) {
      fee = 0;
    }
    merchant_ratio = 0.024;
    merchant_fixed = 0.2;
    fr_ratio = 0.025;
    fr_fixed = 0;
    ratio = merchant_ratio + fr_ratio;
    fixed = merchant_fixed + fr_fixed;
    charge = 0;
    if (fee > fixed) {
      charge = (fee * ratio + fixed).toFixed(4);
    }
    return this.currency(Math.ceil(charge * 100) / 100);
  };

  AdminFutureInstance.prototype.totalOnlineIncome = function(amount) {
    return this.currency(parseFloat(amount) / 100.0);
  };

  AdminFutureInstance.prototype.totalAdminCharge = function(amount) {
    var fee;
    fee = this.currency(parseFloat(amount) / 100.0);
    return "after deductions totalling £" + fee;
  };

  AdminFutureInstance.prototype.raceUrl = function(slug) {
    return "/admin/races/" + slug;
  };

  AdminFutureInstance.prototype.currency = function(amount) {
    return amount != null ? amount.toFixed(2) : void 0;
  };

  AdminFutureInstance.prototype.quickSlide = function($el, isVisible, options) {
    if (isVisible) {
      return $el.slideDown('fast');
    } else {
      return $el.slideUp('fast');
    }
  };

  AdminFutureInstance.prototype.dateForDisplay = function(string) {
    if (string && string !== "") {
      return new moment(string, this.storage_date_format).format(this.display_date_format);
    } else {
      return "";
    }
  };

  AdminFutureInstance.prototype.dateForStorage = function(string) {
    return new moment(string, this.display_date_format).toDate();
  };

  AdminFutureInstance.prototype.deSlugify = function(string) {
    if (string) {
      return string.split("-").map(function(w) {
        return _.str.capitalize(w);
      }).join(" ");
    }
  };

  AdminFutureInstance.prototype.onClose = function() {
    return $(".pika-single").remove();
  };

  AdminFutureInstance.prototype.toggleMore = function(e) {
    var clicked, ref, showing, toggled, toggled_selector;
    if (e) {
      e.preventDefault();
    }
    clicked = $(e.target);
    toggled_selector = (ref = clicked.data('toggle')) != null ? ref : '.expansion';
    toggled = this.$el.find(toggled_selector);
    showing = toggled.is(":visible");
    if (showing) {
      return toggled.slideUp(function() {
        toggled.hide();
        return clicked.removeClass("showing");
      });
    } else {
      toggled.slideDown();
      return clicked.addClass("showing");
    }
  };

  AdminFutureInstance.prototype.exportAutoDownload = function() {
    var csv, i, link;
    i = 0;
    csv = Papa.unparse(this.model.entries.map((function(_this) {
      return function(e) {
        return {
          RaceNumber: "",
          CardNumbers: "",
          MembershipNumbers: "",
          Name: e.name(),
          AgeClass: e.get("category"),
          Club: e.get("club_name"),
          Country: "",
          CourseClass: _this.model.get('name'),
          StartTime: "",
          StartTimePreference: "",
          EnvelopeNumber: "",
          NonCompetitive: "",
          Seeded: "",
          NotUsed1: "",
          Handicap: "",
          RegistrationNotes: "",
          SiEntriesIDs: "",
          Eligibility: ""
        };
      };
    })(this)));
    link = document.createElement("a");
    link.setAttribute("href", encodeURI("data:text/csv;charset=utf-8," + csv));
    link.setAttribute("download", (this.model.get("race_slug")) + "-" + (this.model.get("name")) + "-entries-autodownload.csv");
    return link.click();
  };

  AdminFutureInstance.prototype.exportMultiSport = function() {
    var csv, link;
    csv = Papa.unparse({
      fields: ["Stno", "Chip no", "Database Id", "Surname", "First name", "YB", "S", "Block", "nc", "Start", "Finish", "Time", "Classifier", "Club no.", "Cl. name", "City", "Nat", "Cl. no.", "Short", "Long", "Num1", "Num2", "Num3", "Text1", "Text2", "Text3", "Adr. name", "Street", "Line2", "Zip", "City", "Phone", "Fax", "EMail", "Id/Club", "Rented", "Start fee", "Paid"],
      data: this.model.entries.map((function(_this) {
        return function(e) {
          return ["", "", e.get("id"), e.get("surname"), e.get("forename"), "", e.get("gender"), "", 0, "", "", "", 0, e.get("club_id"), "", e.get("club_name"), "", e.get("category_id"), e.get("category").toUpperCase(), e.get("category").toUpperCase(), "", "", "", "", "", "", e.get("postal_address_line_1"), "", e.get("postal_address_line_2"), e.get("postcode"), e.get("postal_town"), e.get("mobile") || e.get("phone"), "", e.get("email"), "", "", e.get("cost"), "X"];
        };
      })(this))
    });
    link = document.createElement("a");
    link.setAttribute("href", encodeURI("data:text/csv;charset=utf-8," + csv));
    link.setAttribute("download", (this.model.get("race_slug")) + "-" + (this.model.get("name")) + "-entries-multisport.csv");
    return link.click();
  };

  AdminFutureInstance.prototype.exportAllData = function() {
    var csv, link;
    csv = Papa.unparse(this.model.entries.map(function(e) {
      var address, name;
      name = _.compact(_.map(['forename', 'middlename', 'surname'], function(c) {
        return e.get(c);
      })).join(' ');
      address = _.compact(_.map(['postal_address_line_1', 'postal_address_line_2', 'postal_town', 'postal_county', 'postal_country'], function(c) {
        return e.get(c);
      })).join(', ');
      return {
        id: e.get('id'),
        name: name,
        club: e.get("club_name"),
        cat: e.get("category"),
        gender: e.get("gender"),
        dob: e.get("dob"),
        emergency_contact: e.get("emergency_contact_name"),
        emergency_contact_phone: e.get("emergency_contact_phone"),
        address: address,
        postcode: e.get("postcode"),
        phone: e.get("phone"),
        mobile: e.get("mobile"),
        email: e.get("email")
      };
    }));
    link = document.createElement("a");
    link.setAttribute("href", encodeURI("data:text/csv;charset=utf-8," + csv));
    link.setAttribute("download", (this.model.get("race_slug")) + "-" + (this.model.get("name")) + "-entries-all.csv");
    return link.click();
  };

  return AdminFutureInstance;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AdminListedInstance = (function(superClass) {
  extend(AdminListedInstance, superClass);

  function AdminListedInstance() {
    this.url = bind(this.url, this);
    this.onRender = bind(this.onRender, this);
    return AdminListedInstance.__super__.constructor.apply(this, arguments);
  }

  AdminListedInstance.prototype.tagName = "li";

  AdminListedInstance.prototype.className = "instance";

  AdminListedInstance.prototype.events = {
    'click a.delete': "delete"
  };

  AdminListedInstance.prototype.onRender = function() {
    return this.stickit();
  };

  AdminListedInstance.prototype.url = function(arg) {
    var name, race_slug, ref;
    ref = arg != null ? arg : [], race_slug = ref[0], name = ref[1];
    return "/admin/races/" + race_slug + "/" + name;
  };

  return AdminListedInstance;

})(Backbone.Marionette.ItemView);

FellRace.Views.AdminFutureListedInstance = (function(superClass) {
  extend(AdminFutureListedInstance, superClass);

  function AdminFutureListedInstance() {
    this.time = bind(this.time, this);
    this.date = bind(this.date, this);
    return AdminFutureListedInstance.__super__.constructor.apply(this, arguments);
  }

  AdminFutureListedInstance.prototype.template = 'instances/admin_future_list_item';

  AdminFutureListedInstance.prototype.bindings = {
    "a.name": {
      observe: "name",
      attributes: [
        {
          observe: ["race_slug", "name"],
          name: "href",
          onGet: "url"
        }
      ]
    },
    "span.date": {
      observe: "date",
      onGet: "date"
    },
    "span.time": {
      observe: "time",
      onGet: "time"
    }
  };

  AdminFutureListedInstance.prototype.date = function(date) {
    if (date) {
      return moment(date).format("D MMMM YYYY");
    }
  };

  AdminFutureListedInstance.prototype.time = function(time) {
    if (time) {
      return "at " + time;
    }
  };

  return AdminFutureListedInstance;

})(FellRace.Views.AdminListedInstance);

FellRace.Views.AdminPastListedInstance = (function(superClass) {
  extend(AdminPastListedInstance, superClass);

  function AdminPastListedInstance() {
    this.summarise = bind(this.summarise, this);
    return AdminPastListedInstance.__super__.constructor.apply(this, arguments);
  }

  AdminPastListedInstance.prototype.template = 'instances/admin_past_list_item';

  AdminPastListedInstance.prototype.bindings = {
    "a.name": {
      observe: "name",
      attributes: [
        {
          observe: ["race_slug", "name"],
          name: "href",
          onGet: "url"
        }
      ]
    },
    "span.total": {
      observe: "performances_count",
      onGet: "summarise"
    },
    "span.splits": {
      observe: "has_splits",
      visible: true
    }
  };

  AdminPastListedInstance.prototype.summarise = function(value, options) {
    if ((value == null) || value === 0) {
      return "";
    } else {
      return value + " runners";
    }
  };

  return AdminPastListedInstance;

})(FellRace.Views.AdminListedInstance);

FellRace.Views.AddPastInstance = (function(superClass) {
  extend(AddPastInstance, superClass);

  function AddPastInstance() {
    return AddPastInstance.__super__.constructor.apply(this, arguments);
  }

  AddPastInstance.prototype.template = 'instances/add_results';

  AddPastInstance.prototype.tagName = "li";

  AddPastInstance.prototype.className = "note";

  return AddPastInstance;

})(Backbone.Marionette.ItemView);

FellRace.Views.AdminPastInstancesList = (function(superClass) {
  extend(AdminPastInstancesList, superClass);

  function AdminPastInstancesList() {
    return AdminPastInstancesList.__super__.constructor.apply(this, arguments);
  }

  AdminPastInstancesList.prototype.emptyView = FellRace.Views.AddPastInstance;

  AdminPastInstancesList.prototype.itemView = FellRace.Views.AdminPastListedInstance;

  return AdminPastInstancesList;

})(Backbone.Marionette.CollectionView);

FellRace.Views.AdminFutureInstancesList = (function(superClass) {
  extend(AdminFutureInstancesList, superClass);

  function AdminFutureInstancesList() {
    return AdminFutureInstancesList.__super__.constructor.apply(this, arguments);
  }

  AdminFutureInstancesList.prototype.itemView = FellRace.Views.AdminFutureListedInstance;

  return AdminFutureInstancesList;

})(Backbone.Marionette.CollectionView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AdminPastInstance = (function(superClass) {
  extend(AdminPastInstance, superClass);

  function AdminPastInstance() {
    this.date = bind(this.date, this);
    this.summarise = bind(this.summarise, this);
    this["delete"] = bind(this["delete"], this);
    this.filePicked = bind(this.filePicked, this);
    this.onRender = bind(this.onRender, this);
    return AdminPastInstance.__super__.constructor.apply(this, arguments);
  }

  AdminPastInstance.prototype.template = 'instances/admin_past';

  AdminPastInstance.prototype.className = "instance";

  AdminPastInstance.prototype.tagName = "section";

  AdminPastInstance.prototype.events = {
    'click a.delete': "delete"
  };

  AdminPastInstance.prototype.bindings = {
    ".race_name": "race_name",
    ".instance_name": {
      observe: "name",
      onGet: "deSlugify"
    },
    "span.date": "date",
    "span.time": "time",
    "h3.date": {
      observe: "date",
      onGet: "date"
    },
    "span.time": "time",
    "p.report": "summary",
    "span.total": {
      observe: "performances_count",
      onGet: "summarise"
    },
    "input#excluded": "excluded",
    "a.race_name, a.close": {
      attributes: [
        {
          name: "href",
          observe: "race_slug",
          onGet: "raceUrl"
        }
      ]
    }
  };

  AdminPastInstance.prototype.onRender = function() {
    new FellRace.Views.ResultsFile({
      model: this.model,
      el: this.$el.find(".results_file")
    }).render();
    new FellRace.Views.ResultsPreview({
      model: this.model,
      el: this.$el.find(".results_preview")
    }).render();
    this.$el.find('.editable').editable();
    return this.stickit();
  };

  AdminPastInstance.prototype.filePicked = function(e) {
    var files;
    if (files = this._filefield[0].files) {
      return this.model.set({
        file: files.item(0)
      }, {
        persistChange: true
      });
    }
  };

  AdminPastInstance.prototype["delete"] = function(e) {
    if (e) {
      e.preventDefault();
    }
    return this.model.destroy();
  };

  AdminPastInstance.prototype.summarise = function(value, options) {
    if (value == null) {
      return "";
    } else if (value === "processing") {
      return "calculating";
    } else {
      return value + " runners";
    }
  };

  AdminPastInstance.prototype.date = function(date) {
    if (date) {
      return moment(date).format("D MMMM YYYY");
    }
  };

  AdminPastInstance.prototype.deSlugify = function(string) {
    if (string) {
      return string.split("-").map(function(w) {
        return _.str.capitalize(w);
      }).join(" ");
    }
  };

  AdminPastInstance.prototype.raceUrl = function(slug) {
    return "/admin/races/" + slug;
  };

  return AdminPastInstance;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AdminPostalEntryForm = (function(superClass) {
  extend(AdminPostalEntryForm, superClass);

  function AdminPostalEntryForm() {
    this.buttonClass = bind(this.buttonClass, this);
    this.buttonText = bind(this.buttonText, this);
    this.visibleInline = bind(this.visibleInline, this);
    this.fileNameOrDefault = bind(this.fileNameOrDefault, this);
    this.complain = bind(this.complain, this);
    this.niceSize = bind(this.niceSize, this);
    this.fileNameOk = bind(this.fileNameOk, this);
    this.fileSizeOk = bind(this.fileSizeOk, this);
    this.fileOk = bind(this.fileOk, this);
    this.readLocalFile = bind(this.readLocalFile, this);
    this.removeFile = bind(this.removeFile, this);
    this.getPickedFile = bind(this.getPickedFile, this);
    this.onRender = bind(this.onRender, this);
    return AdminPostalEntryForm.__super__.constructor.apply(this, arguments);
  }

  AdminPostalEntryForm.prototype.template = "instances/admin_postal_entry_form";

  AdminPostalEntryForm.prototype.size_limit = 1;

  AdminPostalEntryForm.prototype.allowed_extensions = [".pdf"];

  AdminPostalEntryForm.prototype.events = {
    "change input.file": 'getPickedFile',
    "click a.detach": 'removeFile'
  };

  AdminPostalEntryForm.prototype.bindings = {
    "label.pick": {
      observe: ['entry_form', 'entry_form_name'],
      onGet: "buttonText",
      attributes: [
        {
          name: "class",
          observe: 'entry_form_name',
          onGet: "buttonClass"
        }
      ]
    },
    "a.detach": {
      observe: 'entry_form',
      visible: true
    },
    ".confirmation": {
      observe: 'entry_form',
      visible: true,
      visibleFn: "visibleInline"
    },
    "span.note": {
      observe: "entry_form_size",
      onGet: "niceSize"
    }
  };

  AdminPostalEntryForm.prototype.onRender = function() {
    this._filefield = this.$el.find('input.file');
    return this.stickit();
  };

  AdminPostalEntryForm.prototype.getPickedFile = function(e) {
    var files;
    if (files = this._filefield[0].files) {
      return this.readLocalFile(files[0]);
    }
  };

  AdminPostalEntryForm.prototype.removeFile = function(e) {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    return this.model.dropFile();
  };

  AdminPostalEntryForm.prototype.readLocalFile = function(file) {
    if (file != null) {
      if (this.fileOk(file.name, file.size)) {
        return this.model.set({
          entry_form: file,
          entry_form_changed: true,
          entry_form_name: file.name,
          entry_form_type: file.type,
          entry_form_size: file.size
        }, {
          persistChange: true
        });
      }
    }
  };

  AdminPostalEntryForm.prototype.fileOk = function(filename, filesize) {
    return this.fileNameOk(filename, filesize) && this.fileSizeOk(filename, filesize);
  };

  AdminPostalEntryForm.prototype.fileSizeOk = function(filename, filesize) {
    if (filesize > this.size_limit * 1048576) {
      this.complain('toobig', filename, filesize);
      return false;
    } else {
      return true;
    }
  };

  AdminPostalEntryForm.prototype.fileNameOk = function(filename, filesize) {
    var ext;
    ext = filename.split('.').pop().toLowerCase();
    if (this.allowed_extensions.indexOf("." + ext) === -1) {
      this.complain('wrongtype', filename, filesize);
      return false;
    } else {
      return true;
    }
  };

  AdminPostalEntryForm.prototype.niceSize = function(value) {
    var kb, mb;
    if (value) {
      if (value > 1048576) {
        mb = Math.floor(value / 10485.76) / 100;
        return mb + "MB";
      } else {
        kb = Math.floor(value / 1024);
        return kb + "KB";
      }
    } else {
      return "PDF files only, please";
    }
  };

  AdminPostalEntryForm.prototype.complain = function(error, filename, filesize) {
    if (error === "toobig") {
      return _fr.notify("refusal", "Sorry: there is a limit of " + this.size_limit + "MB for these files and " + filename + " is " + (this.niceSize(filesize)) + ".");
    } else if (error === "wrongtype") {
      return _fr.notify("refusal", "Sorry: " + filename + " doesn't look like a PDF file. Please choose another, or make sure that your file has the right extension.");
    } else {
      return _fr.notify("error", "Unknown file-selection error");
    }
  };

  AdminPostalEntryForm.prototype.fileNameOrDefault = function(name) {
    if (name) {
      return name;
    } else {
      return "Previously uploaded file";
    }
  };

  AdminPostalEntryForm.prototype.visibleInline = function($el, isVisible, options) {
    if (isVisible) {
      return $el.css("display", "inline-block");
    } else {
      return $el.css("display", "none");
    }
  };

  AdminPostalEntryForm.prototype.buttonText = function(arg) {
    var file, file_name, ref;
    ref = arg != null ? arg : [], file = ref[0], file_name = ref[1];
    if (file) {
      return file_name;
    } else {
      return "Upload entry form";
    }
  };

  AdminPostalEntryForm.prototype.buttonClass = function(filename) {
    var ext;
    ext = filename != null ? filename.split('.').pop() : void 0;
    return "pick " + ext;
  };

  return AdminPostalEntryForm;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.InstanceEnter = (function(superClass) {
  extend(InstanceEnter, superClass);

  function InstanceEnter() {
    this.racePublicationUrl = bind(this.racePublicationUrl, this);
    this.onRender = bind(this.onRender, this);
    return InstanceEnter.__super__.constructor.apply(this, arguments);
  }

  InstanceEnter.prototype.template = 'instances/enter';

  InstanceEnter.prototype.bindings = {
    ".race_name": "race_name",
    ".instance_name": "name",
    "a.close, a.race_name": {
      attributes: [
        {
          name: "href",
          observe: "race_slug",
          onGet: "racePublicationUrl"
        }
      ]
    }
  };

  InstanceEnter.prototype.initialize = function() {
    return _fr.vent.on("auth.change", this.render);
  };

  InstanceEnter.prototype.onRender = function() {
    this.stickit();
    if (_fr.userConfirmed()) {
      this.model.entries.url = (_fr.apiUrl()) + "/entries";
      this._entry = this.model.entries.add({
        instance_id: this.model.id
      });
      this._entry_view = new FellRace.Views.NewEntry({
        model: this._entry,
        el: this.$el.find("section.entry")
      });
      return this._entry_view.render();
    } else {
      return _fr.user_actions().requestConfirmation();
    }
  };

  InstanceEnter.prototype.racePublicationUrl = function(slug) {
    return "/races/" + slug;
  };

  return InstanceEnter;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.ResultsFile = (function(superClass) {
  extend(ResultsFile, superClass);

  function ResultsFile() {
    this.buttonText = bind(this.buttonText, this);
    this.visibleInline = bind(this.visibleInline, this);
    this.fileNameOrDefault = bind(this.fileNameOrDefault, this);
    this.complain = bind(this.complain, this);
    this.niceSize = bind(this.niceSize, this);
    this.fileNameOk = bind(this.fileNameOk, this);
    this.fileSizeOk = bind(this.fileSizeOk, this);
    this.fileOk = bind(this.fileOk, this);
    this.setFile = bind(this.setFile, this);
    this.readLocalFile = bind(this.readLocalFile, this);
    this.removeFile = bind(this.removeFile, this);
    this.getPickedFile = bind(this.getPickedFile, this);
    this.clickFileField = bind(this.clickFileField, this);
    this.onRender = bind(this.onRender, this);
    return ResultsFile.__super__.constructor.apply(this, arguments);
  }

  ResultsFile.prototype.template = "instances/results_file";

  ResultsFile.prototype.size_limit = 10;

  ResultsFile.prototype.allowed_extensions = [".csv"];

  ResultsFile.prototype.events = {
    "change input.file": 'getPickedFile',
    "click a.detach": 'removeFile'
  };

  ResultsFile.prototype.bindings = {
    "label.pick": {
      observe: 'file',
      onGet: "buttonText"
    },
    "a.detach": {
      observe: 'file',
      visible: true
    },
    ".file_metadata": {
      observe: 'file',
      visible: true
    },
    ".confirmation": {
      observe: 'file',
      visible: true,
      visibleFn: "visibleInline"
    },
    ".filesize": {
      observe: "file_size",
      onGet: "niceSize"
    },
    ".filename": {
      observe: "file_name",
      onGet: "fileNameOrDefault"
    }
  };

  ResultsFile.prototype.onRender = function() {
    this._filefield = this.$el.find('input.file');
    return this.stickit();
  };

  ResultsFile.prototype.clickFileField = function(e) {
    return this._filefield.trigger('click');
  };

  ResultsFile.prototype.getPickedFile = function(e) {
    var files;
    if (files = this._filefield[0].files) {
      return this.setFile(files.item(0));
    }
  };

  ResultsFile.prototype.removeFile = function(e) {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    return this.model.dropFile();
  };

  ResultsFile.prototype.readLocalFile = function(file) {
    var reader;
    if (file != null) {
      if (this.fileOk(file.name, file.size)) {
        reader = new FileReader();
        reader.onprogress = function(e) {};
        reader.onloadend = (function(_this) {
          return function() {
            return _this.setFile(reader.result, file.name, file.size);
          };
        })(this);
        return reader.readAsDataURL(file);
      }
    }
  };

  ResultsFile.prototype.setFile = function(data, name, size) {
    return this.model.set({
      file: data,
      file_changed: true
    }, {
      persistChange: true
    });
  };

  ResultsFile.prototype.fileOk = function(filename, filesize) {
    return this.fileNameOk(filename, filesize) && this.fileSizeOk(filename, filesize);
  };

  ResultsFile.prototype.fileSizeOk = function(filename, filesize) {
    if (filesize > this.size_limit * 1048576) {
      this.complain('toobig', filename, filesize);
      return false;
    } else {
      return true;
    }
  };

  ResultsFile.prototype.fileNameOk = function(filename, filesize) {
    var ext;
    ext = filename.split('.').pop().toLowerCase();
    if (this.allowed_extensions.indexOf("." + ext) === -1) {
      this.complain('notcsv', filename, filesize);
      return false;
    } else {
      return true;
    }
  };

  ResultsFile.prototype.niceSize = function(value) {
    var kb, mb;
    if (value) {
      if (value > 1048576) {
        mb = Math.floor(value / 10485.76) / 100;
        return mb + "MB, ";
      } else {
        kb = Math.floor(value / 1024);
        return kb + "KB, ";
      }
    } else {
      return "";
    }
  };

  ResultsFile.prototype.complain = function(error, filename, filesize) {
    if (error === "toobig") {
      return _fr.notify("refusal", "Sorry: there is a limit of " + this.size_limit + "MB for these files and " + filename + " is " + (this.niceSize(filesize)) + ".");
    } else if (error === "notcsv") {
      return _fr.notify("refusal", "Sorry: " + filename + " doesn't look like a CSV file. Please choose another, or make sure that your file has the right extension.");
    } else {
      return _fr.notify("error", "Unknown file-selection error");
    }
  };

  ResultsFile.prototype.fileNameOrDefault = function(name) {
    if (name) {
      return name;
    } else {
      return "Previously uploaded file";
    }
  };

  ResultsFile.prototype.visibleInline = function($el, isVisible, options) {
    if (isVisible) {
      return $el.css("display", "inline-block");
    } else {
      return $el.css("display", "none");
    }
  };

  ResultsFile.prototype.buttonText = function(file) {
    if (file) {
      return "Replace results file";
    } else {
      return "Upload CSV results file";
    }
  };

  return ResultsFile;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.FutureInstance = (function(superClass) {
  extend(FutureInstance, superClass);

  function FutureInstance() {
    this.entryFormUrl = bind(this.entryFormUrl, this);
    this.adminUrl = bind(this.adminUrl, this);
    this.entryUrl = bind(this.entryUrl, this);
    this.racePublicationUrl = bind(this.racePublicationUrl, this);
    this.untrue = bind(this.untrue, this);
    this.some = bind(this.some, this);
    this.date = bind(this.date, this);
    this.renderEntries = bind(this.renderEntries, this);
    this.renderCatCharts = bind(this.renderCatCharts, this);
    this.renderClubChart = bind(this.renderClubChart, this);
    this.onRender = bind(this.onRender, this);
    return FutureInstance.__super__.constructor.apply(this, arguments);
  }

  FutureInstance.prototype.template = 'instances/future';

  FutureInstance.prototype.className = "instance future";

  FutureInstance.prototype.bindings = {
    ".entry_count": "total_count",
    ".race_name": {
      observe: "race_name",
      attributes: [
        {
          observe: "race_slug",
          name: "href",
          onGet: "racePublicationUrl"
        }
      ]
    },
    ".instance_name": {
      observe: "name",
      onGet: "deSlugify"
    },
    "a.close": {
      attributes: [
        {
          observe: "race_slug",
          name: "href",
          onGet: "racePublicationUrl"
        }
      ]
    },
    "a.edit": {
      observe: "permissions",
      onGet: function(arg) {
        var can_edit;
        can_edit = (arg != null ? arg : {}).can_edit;
        return can_edit;
      },
      visible: true,
      attributes: [
        {
          observe: ["race_slug", "name"],
          name: "href",
          onGet: "adminUrl"
        }
      ]
    },
    ".race_date": {
      observe: "date",
      onGet: "date"
    },
    "span.time": "time",
    "span.entry_limit": "entry_limit",
    ".limit": {
      observe: "entry_limit",
      visible: true
    },
    ".full": {
      observe: ["entry_limit", "total_count"],
      onGet: "full",
      visible: true
    },
    ".not_full": {
      observe: ["entry_limit", "total_count"],
      onGet: "full",
      visible: "untrue"
    },
    "p.no_eod": {
      observe: "eod",
      visible: "untrue"
    },
    "p.eod": {
      observe: "eod",
      visible: true
    },
    "p.online": {
      observe: "online_entry_active",
      visible: true
    },
    "p.postal": {
      observe: "postal_entry_active",
      visible: true
    },
    ".eod_fee": {
      observe: "eod_fee",
      onGet: "currency"
    },
    "span.online_entry_fee": {
      observe: "online_entry_fee",
      onGet: "currency"
    },
    "a.enter": {
      observe: ['online_entry_active', "entered"],
      onGet: function(vals) {
        return vals[0] && !vals[1];
      },
      visible: true,
      attributes: [
        {
          name: "href",
          observe: ["race_slug", "name"],
          onGet: "entryUrl"
        }
      ]
    },
    "span.online_entry_opening": {
      observe: "online_entry_opening",
      onGet: "date"
    },
    "span.online_entry_closing": {
      observe: "online_entry_closing",
      onGet: "date"
    },
    "span.postal_entry_opening": {
      observe: "postal_entry_opening",
      onGet: "date"
    },
    "span.postal_entry_closing": {
      observe: "postal_entry_closing",
      onGet: "date"
    },
    "span.postal_entry_fee": {
      observe: "postal_entry_fee",
      onGet: "currency"
    },
    "span.postal_entry_address": "postal_entry_address",
    "p.postal_entry_address": {
      observe: "postal_entry_active",
      visible: true
    },
    "p.postal_form": {
      observe: "postal_entry_active",
      visible: true
    },
    'a.postal_form': {
      attributes: [
        {
          name: "href",
          observe: "entry_form",
          onGet: "entryFormUrl"
        }, {
          name: "class",
          observe: "entry_form_type"
        }
      ]
    },
    ".total_count": "total_count",
    ".entries": {
      observe: "total_entries",
      visible: "some"
    }
  };

  FutureInstance.prototype.onRender = function() {
    var ref;
    $["in"] = this.model;
    this.stickit();
    if (_fr.userConfirmed() && this.model.entries.findWhere({
      competitor_id: _fr.getCurrentCompetitor().id
    })) {
      this.model.set({
        entered: true
      });
    }
    if ((ref = this.model.entries) != null ? ref.length : void 0) {
      this.renderEntries();
    }
    if (this.model.get('club_data')) {
      this.renderClubChart();
    }
    if (this.model.get('cat_data')) {
      this.renderCatCharts();
    }
    this.model.entries.on("reset add remove", this.renderEntries);
    this.model.on("change:club_data", this.renderClubChart);
    this.model.on("change:cat_data", this.renderCatCharts);
    _.defer(this.model.setEntryCounts);
    return _fr.vent.trigger('loaded');
  };

  FutureInstance.prototype.renderClubChart = function(model, data) {
    return this._clubs_chart = new Chartist.Pie('.clubs_chart.ct-chart', this.model.get('club_data'), {
      donut: true,
      donutWidth: 40,
      startAngle: 0,
      showLabel: true,
      plugins: [Chartist.plugins.tooltip()]
    });
  };

  FutureInstance.prototype.renderCatCharts = function(model, data) {
    return this._cat_chart = new Chartist.Bar('.categories_chart.ct-chart', this.model.get('cat_data'), {
      stackBars: true,
      chartPadding: {
        top: 15,
        right: 15,
        bottom: 5,
        left: 10
      },
      axisY: {
        offset: 0,
        showGrid: false,
        showLabel: false
      },
      axisX: {
        offset: 30,
        showGrid: false
      },
      plugins: [Chartist.plugins.tooltip()]
    });
  };

  FutureInstance.prototype.renderEntries = function() {
    var entries_table;
    entries_table = new FellRace.Views.EntriesTable({
      collection: this.model.entries,
      el: this.$el.find("table.entries")
    });
    return entries_table.render();
  };

  FutureInstance.prototype.date = function(date) {
    if (date) {
      return moment(date).format("D MMMM YYYY");
    }
  };

  FutureInstance.prototype.some = function(val) {
    return val > 0;
  };

  FutureInstance.prototype.untrue = function(val) {
    return !val;
  };

  FutureInstance.prototype.racePublicationUrl = function(slug) {
    return "/races/" + slug;
  };

  FutureInstance.prototype.entryUrl = function(arg) {
    var name, slug;
    slug = arg[0], name = arg[1];
    return "/races/" + slug + "/" + name + "/enter";
  };

  FutureInstance.prototype.adminUrl = function(arg) {
    var name, slug;
    slug = arg[0], name = arg[1];
    return "/admin/races/" + slug + "/" + name;
  };

  FutureInstance.prototype.full = function(arg) {
    var count, limit, ref;
    ref = arg != null ? arg : [], limit = ref[0], count = ref[1];
    return limit && count >= limit;
  };

  FutureInstance.prototype.currency = function(fee) {
    return fee != null ? fee.toFixed(2) : void 0;
  };

  FutureInstance.prototype.entryFormUrl = function(url) {
    if (url) {
      if (url.match(/^\//)) {
        return "" + (_fr.apiUrl()) + url;
      } else {
        return url;
      }
    }
  };

  FutureInstance.prototype.deSlugify = function(string) {
    if (string) {
      return string.split("-").map(function(w) {
        return _.str.capitalize(w);
      }).join(" ");
    }
  };

  return FutureInstance;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.IndexInstance = (function(superClass) {
  extend(IndexInstance, superClass);

  function IndexInstance() {
    this.instanceUrl = bind(this.instanceUrl, this);
    this.date = bind(this.date, this);
    this.raceUrl = bind(this.raceUrl, this);
    this.peify = bind(this.peify, this);
    this.simplifyProfile = bind(this.simplifyProfile, this);
    this.onRender = bind(this.onRender, this);
    return IndexInstance.__super__.constructor.apply(this, arguments);
  }

  IndexInstance.prototype.className = "instance";

  IndexInstance.prototype.bindings = {
    ".date": {
      observe: "date",
      onGet: "date"
    },
    "a.race_link": {
      attributes: [
        {
          name: "href",
          observe: "race_slug",
          onGet: "raceUrl"
        }
      ]
    },
    "span.race_name": "race_name",
    'span.profile': {
      observe: 'route_profile',
      onGet: 'simplifyProfile'
    }
  };

  IndexInstance.prototype.onRender = function() {
    if (this.extra_bindings) {
      _.extend(this.bindings, this.extra_bindings);
    }
    this.stickit();
    console.log(this.model);
    if (this.model.has("route_profile") && this.model.get("route_profile") !== "") {
      return _.defer(this.peify);
    }
  };

  IndexInstance.prototype.simplifyProfile = function(profile) {
    var elevations;
    if (profile && profile !== "") {
      elevations = profile.split(',').map(function(e) {
        return parseInt(e);
      });
      return elevations.join(',');
    }
  };

  IndexInstance.prototype.peify = function() {
    return this.$el.find('span.profile').peity("line", {
      fill: "#e2e1dd",
      stroke: "#d6d6d4",
      width: 40,
      height: 24
    });
  };

  IndexInstance.prototype.raceUrl = function(slug) {
    return "/races/" + slug;
  };

  IndexInstance.prototype.date = function(datestring) {
    var date;
    return date = new Date(datestring).simpleDate();
  };

  IndexInstance.prototype.instanceUrl = function(arg) {
    var name, race_slug, ref;
    ref = arg != null ? arg : [], name = ref[0], race_slug = ref[1];
    if (name && race_slug) {
      return "/races/" + race_slug + "/" + name;
    }
  };

  return IndexInstance;

})(Backbone.Marionette.ItemView);

FellRace.Views.FutureIndexInstance = (function(superClass) {
  extend(FutureIndexInstance, superClass);

  function FutureIndexInstance() {
    return FutureIndexInstance.__super__.constructor.apply(this, arguments);
  }

  FutureIndexInstance.prototype.template = "instances/index/future";

  FutureIndexInstance.prototype.extra_bindings = {
    ".entry_count": 'entry_count',
    "a.online_entries": {
      observe: "online_entry_active",
      visible: true,
      attributes: [
        {
          observe: ["name", "race_slug"],
          name: "href",
          onGet: "instanceUrl"
        }
      ]
    }
  };

  return FutureIndexInstance;

})(FellRace.Views.IndexInstance);

FellRace.Views.PastIndexInstance = (function(superClass) {
  extend(PastIndexInstance, superClass);

  function PastIndexInstance() {
    return PastIndexInstance.__super__.constructor.apply(this, arguments);
  }

  PastIndexInstance.prototype.template = "instances/index/past";

  PastIndexInstance.prototype.extra_bindings = {
    ".results": {
      observe: "performances_count",
      visible: true
    },
    "a.results_link": {
      observe: "has_results",
      visible: true,
      attributes: [
        {
          observe: ["name", "race_slug"],
          name: "href",
          onGet: "instanceUrl"
        }
      ]
    },
    "span.performances_count": "performances_count"
  };

  return PastIndexInstance;

})(FellRace.Views.IndexInstance);

FellRace.Views.FutureIndexInstances = (function(superClass) {
  extend(FutureIndexInstances, superClass);

  function FutureIndexInstances() {
    return FutureIndexInstances.__super__.constructor.apply(this, arguments);
  }

  FutureIndexInstances.prototype.itemView = FellRace.Views.FutureIndexInstance;

  return FutureIndexInstances;

})(Backbone.Marionette.CompositeView);

FellRace.Views.PastIndexInstances = (function(superClass) {
  extend(PastIndexInstances, superClass);

  function PastIndexInstances() {
    return PastIndexInstances.__super__.constructor.apply(this, arguments);
  }

  PastIndexInstances.prototype.itemView = FellRace.Views.PastIndexInstance;

  return PastIndexInstances;

})(Backbone.Marionette.CollectionView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.InstanceLayout = (function(superClass) {
  extend(InstanceLayout, superClass);

  function InstanceLayout() {
    this.enter = bind(this.enter, this);
    this.myEntry = bind(this.myEntry, this);
    this.splits = bind(this.splits, this);
    this["default"] = bind(this["default"], this);
    this.defaultUrl = bind(this.defaultUrl, this);
    this.routes = bind(this.routes, this);
    return InstanceLayout.__super__.constructor.apply(this, arguments);
  }

  InstanceLayout.prototype.routes = function() {
    return {
      "(/)": this["default"],
      "splits(/)": this.splits,
      "enter(/)": this.enter,
      "my_entry(/)": this.myEntry
    };
  };

  InstanceLayout.prototype.defaultUrl = function() {
    return "/races/" + (this.model.get("race_slug")) + "/" + (this.model.get("name"));
  };

  InstanceLayout.prototype.initialize = function(opts) {
    this._competitor = opts.competitor;
    return InstanceLayout.__super__.initialize.apply(this, arguments);
  };

  InstanceLayout.prototype["default"] = function() {
    var view;
    if (this._previous.route === "splits") {
      this.model.set({
        show_splits: false
      });
      _fr.content.removeClass("collapsed");
    } else {
      if (this.model.inFuture()) {
        view = new FellRace.Views.FutureInstance({
          model: this.model
        });
      } else {
        view = new FellRace.Views.InstanceResults({
          model: this.model,
          competitor: this._competitor
        });
      }
      _fr.extraContentRegion.show(view);
    }
    return this._previous = {
      route: "default"
    };
  };

  InstanceLayout.prototype.splits = function() {
    var view;
    this.model.set({
      show_splits: true
    });
    _fr.content.addClass("collapsed");
    if (this._previous.route !== "default") {
      view = new FellRace.Views.InstanceResults({
        model: this.model,
        competitor: this._competitor
      });
      _fr.extraContentRegion.show(view);
    }
    return this._previous = {
      route: "splits"
    };
  };

  InstanceLayout.prototype.myEntry = function() {
    var entry, view;
    if (_fr.userSignedIn() && (entry = _fr.getCurrentCompetitor().entries.findWhere({
      instance_id: this.model.id
    }))) {
      view = new FellRace.Views.MyEntry({
        model: entry
      });
      _fr.extraContentRegion.show(view);
      this._previous = {
        route: "myEntry"
      };
      return _fr.vent.once("login:changed", (function(_this) {
        return function() {
          return _fr.navigate(_this.defaultUrl());
        };
      })(this));
    } else if (_fr.authPending()) {
      return _fr.vent.once("login:changed", (function(_this) {
        return function() {
          return _this.myEntry();
        };
      })(this));
    } else {
      return _fr.navigate(this.defaultUrl());
    }
  };

  InstanceLayout.prototype.enter = function() {
    var entry, view;
    if (_fr.userSignedIn()) {
      if (entry = _fr.getCurrentCompetitor().entries.findWhere({
        instance_id: this.model.id
      })) {
        return _fr.navigate((this.defaultUrl()) + "/my_entry", {
          replace: true
        });
      } else {
        view = new FellRace.Views.InstanceEnter({
          model: this.model
        });
        _fr.extraContentRegion.show(view);
        return this._previous = {
          route: "enter"
        };
      }
    } else {
      _fr.user_actions().signIn({
        destination_url: (this.defaultUrl()) + "/enter",
        heading: "Sign in to enter race"
      });
      return _fr.navigate(this.defaultUrl(), {
        replace: true
      });
    }
  };

  return InstanceLayout;

})(FellRace.Views.LayoutView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.FutureListedInstance = (function(superClass) {
  extend(FutureListedInstance, superClass);

  function FutureListedInstance() {
    this.time = bind(this.time, this);
    this.date = bind(this.date, this);
    this.onRender = bind(this.onRender, this);
    return FutureListedInstance.__super__.constructor.apply(this, arguments);
  }

  FutureListedInstance.prototype.template = 'instances/future_list_item';

  FutureListedInstance.prototype.tagName = "li";

  FutureListedInstance.prototype.className = "instance";

  FutureListedInstance.prototype.bindings = {
    "a.name": {
      observe: "name",
      attributes: [
        {
          name: "href",
          observe: ["race_slug", "name"],
          onGet: function(vals) {
            return "/races/" + vals[0] + "/" + vals[1];
          }
        }
      ]
    },
    "span.date": {
      observe: "date",
      onGet: "date"
    },
    "span.time": {
      observe: "time",
      onGet: "time"
    }
  };

  FutureListedInstance.prototype.onRender = function() {
    return this.stickit();
  };

  FutureListedInstance.prototype.date = function(date) {
    if (date) {
      return moment(date).format("D MMMM YYYY");
    }
  };

  FutureListedInstance.prototype.time = function(time) {
    if (time) {
      return "at " + time;
    }
  };

  return FutureListedInstance;

})(Backbone.Marionette.ItemView);

FellRace.Views.PastListedInstance = (function(superClass) {
  extend(PastListedInstance, superClass);

  function PastListedInstance() {
    this.summarise = bind(this.summarise, this);
    this.onRender = bind(this.onRender, this);
    return PastListedInstance.__super__.constructor.apply(this, arguments);
  }

  PastListedInstance.prototype.template = 'instances/past_list_item';

  PastListedInstance.prototype.tagName = "li";

  PastListedInstance.prototype.className = "instance";

  PastListedInstance.prototype.bindings = {
    ":el": {
      observe: ["has_results", "summary"],
      onGet: function(vals) {
        return vals[0] || vals[1];
      },
      visible: true
    },
    "a.name": {
      observe: "name",
      attributes: [
        {
          name: "href",
          observe: ["race_slug", "name"],
          onGet: function(vals) {
            return "/races/" + vals[0] + "/" + vals[1];
          }
        }, {
          name: "class",
          observe: "fetching",
          onGet: function(fetching) {
            if (fetching) {
              return "loading";
            }
          }
        }
      ]
    },
    "span.total": {
      observe: "performances_count",
      onGet: "summarise"
    },
    "span.splits": {
      observe: "has_splits",
      visible: true
    }
  };

  PastListedInstance.prototype.onRender = function() {
    return this.stickit();
  };

  PastListedInstance.prototype.summarise = function(value, options) {
    if (value == null) {
      return "";
    } else {
      return value + " runners";
    }
  };

  return PastListedInstance;

})(Backbone.Marionette.ItemView);

FellRace.Views.FutureInstancesList = (function(superClass) {
  extend(FutureInstancesList, superClass);

  function FutureInstancesList() {
    return FutureInstancesList.__super__.constructor.apply(this, arguments);
  }

  FutureInstancesList.prototype.itemView = FellRace.Views.FutureListedInstance;

  return FutureInstancesList;

})(Backbone.Marionette.CollectionView);

FellRace.Views.PastInstancesList = (function(superClass) {
  extend(PastInstancesList, superClass);

  function PastInstancesList() {
    return PastInstancesList.__super__.constructor.apply(this, arguments);
  }

  PastInstancesList.prototype.itemView = FellRace.Views.PastListedInstance;

  return PastInstancesList;

})(Backbone.Marionette.CollectionView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.MyEntry = (function(superClass) {
  extend(MyEntry, superClass);

  function MyEntry() {
    this.instanceUrl = bind(this.instanceUrl, this);
    this.racePublicationUrl = bind(this.racePublicationUrl, this);
    this.onRender = bind(this.onRender, this);
    return MyEntry.__super__.constructor.apply(this, arguments);
  }

  MyEntry.prototype.template = 'entries/my_entry';

  MyEntry.prototype.bindings = {
    ".race_name": "race_name",
    ".instance_name": "instance_name",
    "a.entry_list": {
      attributes: [
        {
          name: "href",
          observe: ["race_slug", "instance_name"],
          onGet: "instanceUrl"
        }
      ]
    },
    "a.close, a.race_name": {
      attributes: [
        {
          name: "href",
          observe: "race_slug",
          onGet: "racePublicationUrl"
        }
      ]
    }
  };

  MyEntry.prototype.onRender = function() {
    return this.stickit();
  };

  MyEntry.prototype.racePublicationUrl = function(slug) {
    return "/races/" + slug;
  };

  MyEntry.prototype.instanceUrl = function(arg) {
    var name, ref, slug;
    ref = arg != null ? arg : [], slug = ref[0], name = ref[1];
    return "/races/" + slug + "/" + name;
  };

  return MyEntry;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

FellRace.Views.NewInstance = (function(superClass) {
  extend(NewInstance, superClass);

  function NewInstance() {
    this.onClose = bind(this.onClose, this);
    this.year = bind(this.year, this);
    this.hasDate = bind(this.hasDate, this);
    this.absent = bind(this.absent, this);
    this.taken = bind(this.taken, this);
    this.dateForStorage = bind(this.dateForStorage, this);
    this.dateForDisplay = bind(this.dateForDisplay, this);
    this.redirect = bind(this.redirect, this);
    this.setName = bind(this.setName, this);
    this.both = bind(this.both, this);
    this.save = bind(this.save, this);
    this.onRender = bind(this.onRender, this);
    return NewInstance.__super__.constructor.apply(this, arguments);
  }

  NewInstance.prototype.template = 'instances/new';

  NewInstance.prototype.className = "instance new";

  NewInstance.prototype.tagName = "section";

  NewInstance.prototype.storage_date_format = "YYYY-MM-DD";

  NewInstance.prototype.display_date_format = "Do MMM YYYY";

  NewInstance.prototype.events = {
    "click a.save": "save"
  };

  NewInstance.prototype.bindings = {
    "span.race_name": "race_name",
    "input#name": {
      observe: "name",
      onGet: "deSlugify",
      onSet: "slugify"
    },
    "span.taken": {
      observe: "name",
      visible: "taken"
    },
    ".name": {
      observe: "date",
      visible: "hasDate"
    },
    "input#date": {
      observe: "date",
      onSet: "dateForStorage",
      onGet: "dateForDisplay"
    },
    "span.name_info": {
      observe: "name",
      visible: "absent"
    },
    "span.year": {
      observe: "date",
      onGet: "year"
    },
    "a.close": {
      attributes: [
        {
          observe: "race_slug",
          name: "href",
          onGet: "raceUrl"
        }
      ]
    },
    "a.cancel": {
      attributes: [
        {
          observe: "race_slug",
          name: "href",
          onGet: "raceUrl"
        }
      ]
    },
    "a.save": {
      observe: ["date", "name"],
      visible: "both"
    }
  };

  NewInstance.prototype._names_taken = [];

  NewInstance.prototype.initialize = function() {
    $.getJSON((_fr.apiUrl()) + "/races/" + (this.model.get("race_slug")) + "/instances/taken", (function(_this) {
      return function(response) {
        return _this._names_taken = response;
      };
    })(this));
    return this.model.on("change:date", this.setName);
  };

  NewInstance.prototype.onRender = function() {
    this.$el.find('.editable').editable();
    this.stickit();
    Backbone.Validation.bind(this);
    return this.$el.find('input.date').each((function(_this) {
      return function(i, el) {
        var picker;
        picker = $(el);
        return new Pikaday({
          field: el,
          format: _this.display_date_format
        });
      };
    })(this));
  };

  NewInstance.prototype.save = function() {
    return this.model.save({}, {
      success: this.redirect
    });
  };

  NewInstance.prototype.both = function(arg) {
    var date, name, ref;
    ref = arg != null ? arg : [], date = ref[0], name = ref[1];
    return date && name && indexOf.call(this._names_taken, name) < 0;
  };

  NewInstance.prototype.setName = function(model, date) {
    var name, year;
    name = model.get("name");
    if (!(name && indexOf.call(this._names_taken, name) < 0)) {
      if (year = date != null ? date.getFullYear() : void 0) {
        if ((1800 < year && year < 2200)) {
          name = "" + year;
        }
      }
      return model.set({
        name: name || null
      });
    }
  };

  NewInstance.prototype.raceUrl = function(slug) {
    return "/admin/races/" + slug;
  };

  NewInstance.prototype.redirect = function() {
    return _fr.navigate("/admin/races/" + (this.model.get("race_slug")) + "/" + (this.model.get("name")));
  };

  NewInstance.prototype.dateForDisplay = function(string) {
    if (string) {
      return new moment(string, this.storage_date_format).format(this.display_date_format);
    }
  };

  NewInstance.prototype.dateForStorage = function(string) {
    return new moment(string, this.display_date_format).toDate();
  };

  NewInstance.prototype.taken = function(name) {
    return indexOf.call(this._names_taken, name) >= 0;
  };

  NewInstance.prototype.absent = function(name) {
    return !name;
  };

  NewInstance.prototype.hasDate = function(date) {
    if (typeof date === "string") {
      date = this.dateForStorage(date);
    }
    return date && date.getFullYear() > 0;
  };

  NewInstance.prototype.year = function(date) {
    if (date) {
      if (typeof date === "string") {
        date = this.dateForStorage(date);
      }
      return "(" + (date.getFullYear()) + ")";
    }
  };

  NewInstance.prototype.deSlugify = function(string) {
    if (string) {
      return _.str.capitalize(string.split("-").join(" "));
    }
  };

  NewInstance.prototype.slugify = function(string) {
    if (string) {
      return _.str.slugify(string.trim());
    }
  };

  NewInstance.prototype.onClose = function() {
    return $(".pika-single").remove();
  };

  return NewInstance;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.InstanceResults = (function(superClass) {
  extend(InstanceResults, superClass);

  function InstanceResults() {
    this.adminUrl = bind(this.adminUrl, this);
    this.notCSV = bind(this.notCSV, this);
    this.fileClass = bind(this.fileClass, this);
    this.fileUrl = bind(this.fileUrl, this);
    this.onRender = bind(this.onRender, this);
    return InstanceResults.__super__.constructor.apply(this, arguments);
  }

  InstanceResults.prototype.template = 'instances/results';

  InstanceResults.prototype.bindings = {
    ".race_name": "race_name",
    ".instance_name": "name",
    "p.summary": {
      observe: "summary",
      updateView: true,
      visible: true
    },
    "a.race_name": {
      attributes: [
        {
          name: "href",
          observe: "race_slug",
          onGet: function(race_slug) {
            return "/races/" + race_slug;
          }
        }
      ]
    },
    "a.close": {
      attributes: [
        {
          name: "href",
          observe: ["race_slug", "competitor_id"],
          onGet: function(arg) {
            var id, ref, slug;
            ref = arg != null ? arg : [], slug = ref[0], id = ref[1];
            if (id) {
              return "/runners/" + id;
            } else {
              return "/races/" + slug;
            }
          }
        }
      ]
    },
    "a.edit": {
      observe: "permissions",
      onGet: function(arg) {
        var can_edit;
        can_edit = (arg != null ? arg : {}).can_edit;
        return can_edit;
      },
      visible: true,
      attributes: [
        {
          observe: ["race_slug", "name"],
          name: "href",
          onGet: "adminUrl"
        }
      ]
    },
    "p.download": {
      observe: "file_name",
      visible: "notCSV"
    },
    "a.file_icon": {
      observe: "file_name",
      attributes: [
        {
          name: "href",
          observe: "file"
        }, {
          name: "class",
          observe: "file_name",
          onGet: "fileClass"
        }
      ]
    },
    "table#results_table": {
      observe: "has_results",
      visible: true,
      attributes: [
        {
          observe: "show_splits",
          name: "class",
          onGet: function(show) {
            if (!show) {
              return "simple";
            }
          }
        }
      ]
    },
    "a.show_splits": {
      observe: ["checkpoints", "show_splits"],
      visible: function(arg) {
        var cps, ref, show;
        ref = arg != null ? arg : [], cps = ref[0], show = ref[1];
        return cps && cps.length && !show;
      },
      attributes: [
        {
          observe: ["race_slug", "name", "competitor_id"],
          name: "href",
          onGet: function(arg) {
            var comp_id, name, ref, slug, stem, url;
            ref = arg != null ? arg : [], slug = ref[0], name = ref[1], comp_id = ref[2];
            stem = comp_id ? "/runners/" + comp_id : "/races";
            return url = stem + "/" + slug + "/" + name + "/splits";
          }
        }
      ]
    },
    "a.hide_splits": {
      observe: "show_splits",
      visible: true,
      attributes: [
        {
          observe: ["race_slug", "name", "competitor_id"],
          name: "href",
          onGet: function(arg) {
            var comp_id, name, ref, slug, stem, url;
            ref = arg != null ? arg : [], slug = ref[0], name = ref[1], comp_id = ref[2];
            stem = comp_id ? "/runners/" + comp_id : "/races";
            return url = stem + "/" + slug + "/" + name;
          }
        }
      ]
    }
  };

  InstanceResults.prototype.initialize = function(arg) {
    this._competitor = (arg != null ? arg : {}).competitor;
    if (this._competitor) {
      return this.model.set({
        competitor_id: this._competitor.id
      });
    }
  };

  InstanceResults.prototype.onRender = function() {
    var ref, table;
    this.stickit();
    this._performances = this.model.performances;
    if (this._performances.length) {
      if (this._competitor) {
        if ((ref = this._performances.findWhere({
          competitor_id: this._competitor.id
        })) != null) {
          ref.set({
            current: true
          });
        }
      }
      this._filter = new FellRace.Views.CollectionFilter({
        collection: this._performances,
        el: this.$el.find('input')
      });
      this._filter.render();
    }
    table = new FellRace.Views.ResultsTable({
      collection: this._performances,
      model: this.model,
      el: this.$el.find("#results_table")
    });
    return table.render();
  };

  InstanceResults.prototype.fileUrl = function(path) {
    return "http://api.fr.dev" + path;
  };

  InstanceResults.prototype.fileClass = function(filename) {
    if (filename) {
      return filename.split('.').pop();
    }
  };

  InstanceResults.prototype.notCSV = function(filename) {
    return this.fileClass(filename) !== "csv";
  };

  InstanceResults.prototype.adminUrl = function(arg) {
    var name, slug;
    slug = arg[0], name = arg[1];
    return "/admin/races/" + slug + "/" + name;
  };

  return InstanceResults;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.ResultsPreview = (function(superClass) {
  extend(ResultsPreview, superClass);

  function ResultsPreview() {
    this.onRender = bind(this.onRender, this);
    return ResultsPreview.__super__.constructor.apply(this, arguments);
  }

  ResultsPreview.prototype.template = 'instances/results_preview';

  ResultsPreview.prototype.initialize = function(arg) {
    this._competitor = arg.competitor;
    return this._performances = this.model.performances;
  };

  ResultsPreview.prototype.onRender = function() {};

  return ResultsPreview;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.Instance = (function(superClass) {
  extend(Instance, superClass);

  function Instance() {
    this.entryOpening = bind(this.entryOpening, this);
    this.canEnter = bind(this.canEnter, this);
    this.year = bind(this.year, this);
    this.month = bind(this.month, this);
    this.day = bind(this.day, this);
    this.summarise = bind(this.summarise, this);
    this.isFuture = bind(this.isFuture, this);
    this.isPast = bind(this.isPast, this);
    this.onRender = bind(this.onRender, this);
    return Instance.__super__.constructor.apply(this, arguments);
  }

  Instance.prototype.template = 'instances/show';

  Instance.prototype.className = "instance";

  Instance.prototype.bindings = {
    "#past": {
      observe: "date",
      visible: "isPast"
    },
    "#future": {
      observe: "date",
      visible: "isFuture"
    },
    "#entry_details": {
      observe: "online_entry",
      visible: true
    },
    "span.entry_limit": "entry_limit",
    "span.entry_fee": {
      observe: "entry_fee",
      onGet: function(fee) {
        if (fee) {
          return fee.toFixed(2);
        }
      }
    },
    "span.enter": {
      observe: ["entry_closing", "entry_opening"],
      visible: "canEnter"
    },
    "span.entry_open_close": {
      observe: ["entry_closing", "entry_opening"],
      onGet: "entryClosing"
    },
    "span.name": "name",
    "span.day": {
      observe: "date",
      onGet: "day"
    },
    "span.month": {
      observe: "date",
      onGet: "month"
    },
    "span.year": {
      observe: "date",
      onGet: "year"
    },
    "span.time": "time",
    "p.report": "report",
    "span.summary": "summary",
    "span.total": {
      observe: "performances_count",
      onGet: "summarise"
    }
  };

  Instance.prototype.onRender = function() {
    var entries_table;
    this.stickit();
    if (this.model.inFuture() && this.model.get("online_entry")) {
      entries_table = new FellRace.Views.EntriesTable({
        collection: this.model.entries,
        el: this.$el.find(".entries")
      });
      entries_table.render();
      this.model.entries.url = "/api/instances/" + this.model.id + "/entries";
      return this.model.entries.fetch();
    }
  };

  Instance.prototype.isPast = function(date) {
    return date && new Date(date) <= new Date();
  };

  Instance.prototype.isFuture = function(date) {
    return date && new Date(date) > new Date();
  };

  Instance.prototype.summarise = function(value, options) {
    if (value == null) {
      return "";
    } else {
      return value + " runners";
    }
  };

  Instance.prototype.day = function(date) {
    return date.split("-")[2];
  };

  Instance.prototype.month = function(date) {
    return date.split("-")[1];
  };

  Instance.prototype.year = function(date) {
    return date.split("-")[0];
  };

  Instance.prototype.canEnter = function(arg) {
    var closing, opening, ref;
    ref = arg != null ? arg : [], closing = ref[0], opening = ref[1];
  };

  Instance.prototype.entryOpening = function(arg) {
    var closing, opening, ref;
    ref = arg != null ? arg : [], closing = ref[0], opening = ref[1];
    if (Date.parse(opening) < Date.now()) {
      return "Entries are open";
    }
  };

  return Instance;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AdminLink = (function(superClass) {
  extend(AdminLink, superClass);

  function AdminLink() {
    this["delete"] = bind(this["delete"], this);
    this.onRender = bind(this.onRender, this);
    return AdminLink.__super__.constructor.apply(this, arguments);
  }

  AdminLink.prototype.template = 'links/admin_list_item';

  AdminLink.prototype.tagName = "li";

  AdminLink.prototype.className = "link";

  AdminLink.prototype.events = {
    'click a.delete': "delete",
    'click a.visit': "goto"
  };

  AdminLink.prototype.bindings = {
    "span.title": "title",
    'span.url': 'url'
  };

  AdminLink.prototype.onRender = function() {
    this.$el.find('.editable').editable();
    return this.stickit();
  };

  AdminLink.prototype["delete"] = function(e) {
    if (e) {
      e.preventDefault();
    }
    return this.model.destroy();
  };

  return AdminLink;

})(Backbone.Marionette.ItemView);

FellRace.Views.AddLink = (function(superClass) {
  extend(AddLink, superClass);

  function AddLink() {
    return AddLink.__super__.constructor.apply(this, arguments);
  }

  AddLink.prototype.template = 'links/empty';

  AddLink.prototype.tagName = "li";

  AddLink.prototype.className = "note";

  return AddLink;

})(Backbone.Marionette.ItemView);

FellRace.Views.AdminLinksList = (function(superClass) {
  extend(AdminLinksList, superClass);

  function AdminLinksList() {
    return AdminLinksList.__super__.constructor.apply(this, arguments);
  }

  AdminLinksList.prototype.emptyView = FellRace.Views.AddLink;

  AdminLinksList.prototype.itemView = FellRace.Views.AdminLink;

  return AdminLinksList;

})(Backbone.Marionette.CollectionView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.Link = (function(superClass) {
  extend(Link, superClass);

  function Link() {
    this.openTab = bind(this.openTab, this);
    this.onRender = bind(this.onRender, this);
    return Link.__super__.constructor.apply(this, arguments);
  }

  Link.prototype.template = 'links/list_item';

  Link.prototype.tagName = "li";

  Link.prototype.className = "link";

  Link.prototype.bindings = {
    "a.title": {
      observe: ["title", "url"],
      onGet: function(vals) {
        if (vals[0] && vals[0] !== "") {
          return vals[0];
        } else {
          return vals[1];
        }
      },
      attributes: [
        {
          name: "href",
          observe: "url",
          onGet: function(url) {
            return "http://" + url;
          }
        }
      ]
    }
  };

  Link.prototype.events = {
    "click a": "openTab"
  };

  Link.prototype.onRender = function() {
    return this.stickit();
  };

  Link.prototype.openTab = function(e) {
    if (e) {
      e.preventDefault();
    }
    return window.open("http://" + (this.model.get("url")));
  };

  return Link;

})(Backbone.Marionette.ItemView);

FellRace.Views.LinksList = (function(superClass) {
  extend(LinksList, superClass);

  function LinksList() {
    return LinksList.__super__.constructor.apply(this, arguments);
  }

  LinksList.prototype.itemView = FellRace.Views.Link;

  return LinksList;

})(Backbone.Marionette.CollectionView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.Map = (function(superClass) {
  extend(Map, superClass);

  function Map() {
    this.addMapTypes = bind(this.addMapTypes, this);
    this.setState = bind(this.setState, this);
    this.moveTo = bind(this.moveTo, this);
    this.getMap = bind(this.getMap, this);
    this.setOptions = bind(this.setOptions, this);
    this.adminView = bind(this.adminView, this);
    this.publicView = bind(this.publicView, this);
    this.indexView = bind(this.indexView, this);
    this.removeRace = bind(this.removeRace, this);
    this.showRace = bind(this.showRace, this);
    this.initBingTiles = bind(this.initBingTiles, this);
    this.onRender = bind(this.onRender, this);
    this.mapConfig = bind(this.mapConfig, this);
    return Map.__super__.constructor.apply(this, arguments);
  }

  Map.prototype.template = 'map';

  Map.prototype.className = 'gmap';

  Map.prototype.mapConfig = function() {
    return {
      center: new google.maps.LatLng(this.startLat(), this.startLng()),
      zoom: this.startZoom(),
      mapTypeId: "Open",
      zoomControlOptions: {
        position: google.maps.ControlPosition.RIGHT_TOP
      },
      panControlOptions: {
        position: google.maps.ControlPosition.RIGHT_TOP
      },
      mapTypeControlOptions: {
        position: google.maps.ControlPosition.TOP_RIGHT,
        mapTypeIds: ["Open", "OS", "OOM", google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE],
        style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
      }
    };
  };

  Map.prototype._race = null;

  Map.prototype.startLat = function() {
    return parseFloat(localStorage["fr_lat"]) || 54.4098399744;
  };

  Map.prototype.startLng = function() {
    return parseFloat(localStorage["fr_lng"]) || -2.9730033900;
  };

  Map.prototype.startZoom = function() {
    return parseInt(localStorage["fr_zoom"], 10) || 11;
  };

  Map.prototype.onRender = function() {
    if (!(google && google.maps)) {
      throw new Error("Google maps API is not loaded.");
    }
    return this.initBingTiles().done((function(_this) {
      return function() {
        _this._gmap = new google.maps.Map(_this.$el.find('.map_holder')[0], _this.mapConfig());
        google.maps.event.addListener(_this._gmap, "dragend", _this.setState);
        _this.addMapTypes();
        _this.userMarker = new FellRace.Views.UserMarker({
          model: typeof _fr.currentUser === "function" ? _fr.currentUser() : void 0,
          map: _this._gmap
        });
        return _this._polys = new FellRace.Views.RacePublicationPolylines({
          collection: _fr.race_publications,
          map: _this._gmap
        });
      };
    })(this));
  };

  Map.prototype.initBingTiles = function() {
    var apikey, getter, inited;
    apikey = _fr.config('bing_api_key');
    inited = $.Deferred();
    getter = $.getJSON("https://dev.virtualearth.net/REST/V1/Imagery/Metadata/Road?output=json&include=ImageryProviders&key=" + apikey).done((function(_this) {
      return function(response) {
        var res;
        if (res = response.resourceSets[0].resources[0]) {
          _this._bing = {
            url: res.imageUrl,
            subdomains: res.imageUrlSubdomains,
            w: res.imageWidth,
            h: res.imageHeight
          };
        }
        return inited.resolve();
      };
    })(this));
    return inited.promise();
  };

  Map.prototype.showRace = function(race) {
    this.removeRace();
    this._race_poly = new FellRace.Views.RacePolyline({
      model: race,
      map: this._gmap
    });
    return this.moveTo(race);
  };

  Map.prototype.removeRace = function() {
    var ref;
    if ((ref = this._race_poly) != null) {
      ref.hide();
    }
    return this._race_poly = null;
  };

  Map.prototype.indexView = function() {
    return _fr.race_publications.deselectAll();
  };

  Map.prototype.publicView = function() {
    this.removeRace();
    return this._polys.show();
  };

  Map.prototype.adminView = function() {
    return this._polys.hide();
  };

  Map.prototype.setOptions = function(opts) {
    if (opts == null) {
      opts = {};
    }
    return this._gmap.setOptions(_.extend(_.clone(this.mapConfig), opts));
  };

  Map.prototype.getMap = function() {
    return this._gmap;
  };

  Map.prototype.moveTo = function(model, zoom) {
    var bounds;
    if (zoom == null) {
      zoom = 16;
    }
    if (model.isPoint) {
      this._gmap.panTo(model.getLatLng());
      this._gmap.setZoom(zoom);
    } else {
      if (bounds = model.getBounds()) {
        if (bounds.isEmpty()) {
          this.setOptions(model.getMapOptions());
        } else {
          this._gmap.fitBounds(bounds);
        }
      }
    }
    return this._gmap.panBy(_fr.offsetX(), 0);
  };

  Map.prototype.setState = function() {
    localStorage["fr_lat"] = this._gmap.center.lat();
    localStorage["fr_lng"] = this._gmap.center.lng();
    return localStorage["fr_zoom"] = this._gmap.zoom;
  };

  Map.prototype.addMapTypes = function() {
    var bs, bu, shadow;
    this._gmap.mapTypes.set("Open", new google.maps.ImageMapType({
      getTileUrl: function(coord, zoom) {
        var apikey;
        apikey = _fr.config('osm_api_key');
        return "https://tile.thunderforest.com/outdoors/" + zoom + "/" + coord.x + "/" + coord.y + ".png?apikey=" + apikey;
      },
      tileSize: new google.maps.Size(256, 256),
      name: "OSM",
      maxZoom: 18
    }));
    bu = this._bing.url;
    bs = this._bing.subdomains;
    this._gmap.mapTypes.set("OS", new google.maps.ImageMapType({
      getTileUrl: (function(_this) {
        return function(coord, zoom) {
          var apikey, url;
          apikey = _fr.config('bing_api_key');
          url = bu.replace('{subdomain}', bs[Math.floor(Math.random() * bs.length)]).replace('{quadkey}', _this.tileXYToQuadKey(coord.x, coord.y, zoom)).replace('{culture}', "en-GB");
          return url + "&productSet=mmOS&key=" + apikey + "&c4w=1";
        };
      })(this),
      tileSize: new google.maps.Size(this._bing.w, this._bing.h),
      name: "OS",
      maxZoom: 17,
      minZoom: 10
    }));
    shadow = new google.maps.ImageMapType({
      getTileUrl: function(coord, zoom) {
        return "http://" + ("abc".charAt(Math.floor(Math.random() * 2))) + ".tiles.wmflabs.org/hillshading/" + zoom + "/" + coord.x + "/" + coord.y + ".png";
      },
      tileSize: new google.maps.Size(256, 256),
      name: "OS",
      maxZoom: 17,
      minZoom: 10
    });
    if (!((document.all != null) && (document.documentMode != null) && document.documentMode < 9)) {
      this._gmap.overlayMapTypes.insertAt(0, shadow);
      google.maps.event.addListener(this._gmap, 'maptypeid_changed', (function(_this) {
        return function() {
          var type;
          type = _this._gmap.getMapTypeId();
          if (type === "OS" || type === "roadmap" || type === "OSM") {
            return shadow.setOpacity(0.8);
          } else {
            return shadow.setOpacity(0);
          }
        };
      })(this));
      return google.maps.event.trigger(this._gmap, "maptypeid_changed");
    }
  };

  Map.prototype.tileXYToQuadKey = function(tileX, tileY, levelOfDetail) {
    var digit, i, j, mask, quadKey, ref;
    quadKey = "";
    for (i = j = ref = levelOfDetail; ref <= 1 ? j <= 1 : j >= 1; i = ref <= 1 ? ++j : --j) {
      digit = '0';
      mask = 1 << (i - 1);
      if ((tileX & mask) !== 0) {
        digit++;
      }
      if ((tileY & mask) !== 0) {
        digit++;
        digit++;
      }
      quadKey = "" + quadKey + digit;
    }
    return quadKey;
  };

  return Map;

})(Backbone.Marionette.ItemView);var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.Page = (function(superClass) {
  extend(Page, superClass);

  function Page() {
    return Page.__super__.constructor.apply(this, arguments);
  }

  Page.prototype.initialize = function(opts) {
    return this.template = opts.template;
  };

  return Page;

})(Backbone.Marionette.Layout);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.HistoryRow = (function(superClass) {
  extend(HistoryRow, superClass);

  function HistoryRow() {
    this.visibleWithSlide = bind(this.visibleWithSlide, this);
    this.untrue = bind(this.untrue, this);
    this.compUrl = bind(this.compUrl, this);
    this.onRender = bind(this.onRender, this);
    this.time = bind(this.time, this);
    return HistoryRow.__super__.constructor.apply(this, arguments);
  }

  HistoryRow.prototype.template = "performances/history_row";

  HistoryRow.prototype.tagName = "tr";

  HistoryRow.prototype.bindings = {
    ":el": {
      observe: "unmatched",
      visible: "untrue",
      visibleFn: "visibleWithSlide",
      attributes: [
        {
          observe: ["cat_name", "c_pos"],
          name: "class",
          onGet: function(arg) {
            var c_pos, cat, klass, ref;
            ref = arg != null ? arg : [], cat = ref[0], c_pos = ref[1];
            klass = "";
            if (cat != null ? cat.match(/[lfw]/i) : void 0) {
              klass += "female";
            }
            if (!c_pos) {
              klass += " additional";
            }
            return klass;
          }
        }
      ]
    },
    "span.pos": "p_pos",
    "span.race_position": "position",
    "span.comp_pos": "c_pos",
    "span.club": "club_name",
    "span.cat": "cat_name",
    "span.forename": "forename",
    "span.middlename": "middlename",
    "span.surname": "surname",
    "a.name": {
      attributes: [
        {
          name: "href",
          observe: "competitor_id",
          onGet: "compUrl"
        }
      ]
    },
    "span.time": {
      observe: "elapsed_time",
      onGet: "time"
    },
    "span.instance": "instance_name"
  };

  HistoryRow.prototype.time = function(seconds) {
    return seconds != null ? seconds.toSimplestTime() : void 0;
  };

  HistoryRow.prototype.onRender = function() {
    return this.stickit();
  };

  HistoryRow.prototype.compUrl = function(id) {
    return "/runners/" + id + "/";
  };

  HistoryRow.prototype.untrue = function(value) {
    return !value;
  };

  HistoryRow.prototype.visibleWithSlide = function($el, isVisible, options) {
    if (isVisible) {
      return $el.slideDown('fast');
    } else {
      return $el.slideUp('fast');
    }
  };

  return HistoryRow;

})(Backbone.Marionette.ItemView);

FellRace.Views.NoHistory = (function(superClass) {
  extend(NoHistory, superClass);

  function NoHistory() {
    return NoHistory.__super__.constructor.apply(this, arguments);
  }

  NoHistory.prototype.template = "performances/history_loading";

  NoHistory.prototype.tagName = "tr";

  return NoHistory;

})(Backbone.Marionette.ItemView);

FellRace.Views.HistoryTable = (function(superClass) {
  extend(HistoryTable, superClass);

  function HistoryTable() {
    this.onRender = bind(this.onRender, this);
    return HistoryTable.__super__.constructor.apply(this, arguments);
  }

  HistoryTable.prototype.itemView = FellRace.Views.HistoryRow;

  HistoryTable.prototype.emptyView = FellRace.Views.NoHistory;

  HistoryTable.prototype.onRender = function() {
    this._filter = new FellRace.Views.CollectionFilter({
      collection: this.collection,
      el: this.$el.find('input')
    });
    return this._filter.render();
  };

  return HistoryTable;

})(Backbone.Marionette.CollectionView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.ResultRow = (function(superClass) {
  extend(ResultRow, superClass);

  function ResultRow() {
    this.visibleWithSlide = bind(this.visibleWithSlide, this);
    this.untrue = bind(this.untrue, this);
    this.compUrl = bind(this.compUrl, this);
    this.fullName = bind(this.fullName, this);
    this.perfFullName = bind(this.perfFullName, this);
    this.compFullName = bind(this.compFullName, this);
    this.onRender = bind(this.onRender, this);
    this.time = bind(this.time, this);
    return ResultRow.__super__.constructor.apply(this, arguments);
  }

  ResultRow.prototype.template = "performances/result_row";

  ResultRow.prototype.tagName = "tr";

  ResultRow.prototype.bindings = {
    ":el": {
      observe: "unmatched",
      visible: "untrue",
      visibleFn: "visibleWithSlide",
      attributes: [
        {
          observe: "cat",
          name: "class",
          onGet: function(cat) {
            if (cat != null ? cat.match(/[lfw]/i) : void 0) {
              return "female";
            }
          }
        }
      ]
    },
    "span.pos": {
      observe: ["position", "status"],
      onGet: function(arg) {
        var pos, ref, status;
        ref = arg != null ? arg : [], pos = ref[0], status = ref[1];
        if (status.id !== 100) {
          return status.name;
        } else {
          return pos;
        }
      }
    },
    "span.club": "club",
    "span.cat": "cat",
    "span.name": {
      observe: ["competitor_id", "forename", "middlename", "surname"],
      onGet: "perfFullName"
    },
    "a.name": {
      observe: ["competitor_id", "competitor_forename", "competitor_middlename", "competitor_surname"],
      onGet: "compFullName",
      attributes: [
        {
          name: "href",
          observe: ["competitor_id", "race_slug", "instance_name"],
          onGet: "compUrl"
        }, {
          observe: "current",
          name: "class",
          onGet: function(current) {
            if (current) {
              return "current";
            }
          }
        }
      ]
    },
    "span.time": {
      observe: "time",
      onGet: "time"
    }
  };

  ResultRow.prototype.time = function(seconds) {
    return seconds.toSimplestTime();
  };

  ResultRow.prototype.initialize = function(arg) {
    this._checkpoints = (arg != null ? arg : {}).checkpoints;
  };

  ResultRow.prototype.onRender = function() {
    this.stickit();
    return _.each(this._checkpoints, (function(_this) {
      return function(cp) {
        var ref, view;
        view = new FellRace.Views.CheckpointCell({
          model: new Backbone.Model((ref = _this.model.get("checkpoints")) != null ? ref[cp] : void 0)
        });
        return _this.$el.append(view.render().$el);
      };
    })(this));
  };

  ResultRow.prototype.compFullName = function(arg) {
    var first, id, last, middle, ref;
    ref = arg != null ? arg : [], id = ref[0], first = ref[1], middle = ref[2], last = ref[3];
    if (id) {
      return this.fullName([first, middle, last]);
    }
  };

  ResultRow.prototype.perfFullName = function(arg) {
    var first, id, last, middle, ref;
    ref = arg != null ? arg : [], id = ref[0], first = ref[1], middle = ref[2], last = ref[3];
    if (!id) {
      return this.fullName([first, middle, last]);
    }
  };

  ResultRow.prototype.fullName = function(arg) {
    var first, last, middle, name, ref;
    ref = arg != null ? arg : [], first = ref[0], middle = ref[1], last = ref[2];
    name = first;
    if (middle) {
      name = name + " " + middle;
    }
    return name + " " + last;
  };

  ResultRow.prototype.compUrl = function(arg) {
    var id, instance_name, race_slug, ref;
    ref = arg != null ? arg : [], id = ref[0], race_slug = ref[1], instance_name = ref[2];
    return "/runners/" + id + "/" + race_slug + "/" + instance_name;
  };

  ResultRow.prototype.untrue = function(value) {
    return !value;
  };

  ResultRow.prototype.visibleWithSlide = function($el, isVisible, options) {
    if (isVisible) {
      return $el.slideDown('fast');
    } else {
      return $el.slideUp('fast');
    }
  };

  return ResultRow;

})(Backbone.Marionette.ItemView);

FellRace.Views.ResultsTable = (function(superClass) {
  extend(ResultsTable, superClass);

  function ResultsTable() {
    this.sort = bind(this.sort, this);
    this.sortByColumn = bind(this.sortByColumn, this);
    this.onRender = bind(this.onRender, this);
    this.itemViewOptions = bind(this.itemViewOptions, this);
    return ResultsTable.__super__.constructor.apply(this, arguments);
  }

  ResultsTable.prototype.template = "performances/results_table";

  ResultsTable.prototype.itemView = FellRace.Views.ResultRow;

  ResultsTable.prototype.itemViewContainer = "tbody";

  ResultsTable.prototype.collectionEvents = {
    sort: "sort"
  };

  ResultsTable.prototype.events = {
    "click th a": "sortByColumn"
  };

  ResultsTable.prototype.itemViewOptions = function() {
    return {
      checkpoints: this._checkpoints
    };
  };

  ResultsTable.prototype.initialize = function() {
    return this._checkpoints = _.without(this.model.checkpoints.pluck('name'), 'Start');
  };

  ResultsTable.prototype.onRender = function() {
    return _.each(this._checkpoints, (function(_this) {
      return function(cp) {
        return _this.$el.find("thead tr").append("<th class='checkpoint'>" + cp + "</th>");
      };
    })(this));
  };

  ResultsTable.prototype.sortByColumn = function(e) {
    var attr, order, ref;
    if (attr = e.target.getAttribute("data-sort")) {
      if (((ref = this._sort) != null ? ref.attr : void 0) === attr && this._sort.order === "Asc") {
        order = "Desc";
      } else {
        order = "Asc";
      }
      this.collection.comparator = this.collection["" + attr + order];
      this.collection.sort();
      return this._sort = {
        attr: attr,
        order: order
      };
    }
  };

  ResultsTable.prototype.sort = function() {
    return this.render();
  };

  return ResultsTable;

})(Backbone.Marionette.CompositeView);

FellRace.Views.CheckpointCell = (function(superClass) {
  extend(CheckpointCell, superClass);

  function CheckpointCell() {
    this.onRender = bind(this.onRender, this);
    return CheckpointCell.__super__.constructor.apply(this, arguments);
  }

  CheckpointCell.prototype.template = "performances/checkpoint_cell";

  CheckpointCell.prototype.tagName = "td";

  CheckpointCell.prototype.className = "checkpoint";

  CheckpointCell.prototype.bindings = {
    "span.elapsed": {
      observe: ["elapsed_time", "position"],
      onGet: "timeAndPos"
    },
    "span.split": {
      observe: ["interval", "split_position"],
      onGet: "timeAndPos"
    }
  };

  CheckpointCell.prototype.timeAndPos = function(arg) {
    var pos, ref, time;
    ref = arg != null ? arg : [], time = ref[0], pos = ref[1];
    if (pos) {
      return (time != null ? time.toSimplestTime() : void 0) + " (" + pos + ")";
    }
  };

  CheckpointCell.prototype.onRender = function() {
    return this.stickit();
  };

  return CheckpointCell;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.RaceHistory = (function(superClass) {
  extend(RaceHistory, superClass);

  function RaceHistory() {
    this.full = bind(this.full, this);
    this.compact = bind(this.compact, this);
    this.racePublicationUrl = bind(this.racePublicationUrl, this);
    this.onRender = bind(this.onRender, this);
    return RaceHistory.__super__.constructor.apply(this, arguments);
  }

  RaceHistory.prototype.template = 'race_publications/history';

  RaceHistory.prototype.className = "race";

  RaceHistory.prototype.events = {
    "click a.compact": "compact",
    "click a.full": "full"
  };

  RaceHistory.prototype.bindings = {
    ".race_name": "name",
    "a.compact, span.all_runs": {
      observe: "compact",
      visible: "untrue"
    },
    "a.full, span.all_runners": {
      observe: "compact",
      visible: true
    },
    "span.performances_count": "performances_count",
    "span.competitors_count": "competitors_count",
    "span.since": {
      observe: "earliest_year",
      onGet: function(year) {
        if (year) {
          return "since " + year;
        }
      }
    },
    "table.history": {
      attributes: [
        {
          observe: "compact",
          name: "class",
          onGet: function(compact) {
            if (compact) {
              return "compact";
            }
          }
        }
      ]
    },
    "a.close, a.race_name": {
      attributes: [
        {
          name: "href",
          observe: "slug",
          onGet: "racePublicationUrl"
        }
      ]
    }
  };

  RaceHistory.prototype.initialize = function() {
    if (!this.model.performances) {
      this._comp_count = 0;
      this._earliest_date = moment();
      this.model.performances = new FellRace.Collections.Performances;
      this.model.performances.url = (this.model.url()) + "/performances/best";
      return this.model.performances.fetch().done((function(_this) {
        return function() {
          _this.model.performances.forEach(function(model) {
            var date;
            model.set({
              p_pos: _this.model.performances.indexOf(model) + 1
            });
            date = moment(model.get("date"), "YYYY-MM-DD");
            if (date < _this._earliest_date) {
              _this._earliest_date = date;
            }
            if (!(_this.model.performances.filter(function(p) {
              return p.get("competitor_id") === model.get("competitor_id") && p.get("p_pos");
            }).length > 1)) {
              return model.set({
                c_pos: _this._comp_count += 1
              });
            }
          });
          return _this.model.set({
            competitors_count: _this._comp_count,
            performances_count: _this.model.performances.length,
            earliest_year: _this._earliest_date.year()
          });
        };
      })(this));
    }
  };

  RaceHistory.prototype.onRender = function() {
    var table;
    this.stickit();
    this._filter = new FellRace.Views.CollectionFilter({
      collection: this.model.performances,
      el: this.$el.find('input.filter')
    });
    this._filter.render();
    this.table_el = this.$el.find("table.history tbody");
    table = new FellRace.Views.HistoryTable({
      collection: this.model.performances,
      el: this.table_el
    });
    table.render();
    return _fr.vent.trigger('loaded');
  };

  RaceHistory.prototype.racePublicationUrl = function(slug) {
    return "/races/" + slug;
  };

  RaceHistory.prototype.compact = function() {
    return this.model.set({
      compact: true
    });
  };

  RaceHistory.prototype.full = function() {
    return this.model.set({
      compact: false
    });
  };

  RaceHistory.prototype.untrue = function(val) {
    return !val;
  };

  return RaceHistory;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.RacePublicationIndexItem = (function(superClass) {
  extend(RacePublicationIndexItem, superClass);

  function RacePublicationIndexItem() {
    this.peify = bind(this.peify, this);
    this.simplifyProfile = bind(this.simplifyProfile, this);
    this.onRender = bind(this.onRender, this);
    return RacePublicationIndexItem.__super__.constructor.apply(this, arguments);
  }

  RacePublicationIndexItem.prototype.template = "race_publications/index_item";

  RacePublicationIndexItem.prototype.bindings = {
    "span.name": "name",
    "a.race_link": {
      attributes: [
        {
          name: "href",
          observe: "slug",
          onGet: "raceUrl"
        }
      ]
    },
    'span.profile': {
      observe: 'route_profile',
      onGet: 'simplifyProfile'
    },
    'a.edit': {
      observe: "permissions",
      visible: "canEdit",
      attributes: [
        {
          observe: ["slug", "permissions"],
          name: "href",
          onGet: function(arg) {
            var permissions, ref, slug;
            ref = arg != null ? arg : [], slug = ref[0], permissions = ref[1];
            if (permissions != null ? permissions.can_edit : void 0) {
              return "/admin/races/" + slug;
            }
          }
        }
      ]
    }
  };

  RacePublicationIndexItem.prototype.onRender = function() {
    this.stickit();
    if (this.model.has("route_profile") && this.model.get("route_profile") !== "") {
      return _.defer(this.peify);
    }
  };

  RacePublicationIndexItem.prototype.simplifyProfile = function(profile) {
    var elevations;
    if (profile && profile !== "") {
      elevations = profile.split(',').map(function(e) {
        return parseInt(e);
      });
      return elevations.join(',');
    }
  };

  RacePublicationIndexItem.prototype.peify = function() {
    return this.$el.find('span.profile').peity("line", {
      fill: "#e2e1dd",
      stroke: "#d6d6d4",
      width: 40,
      height: 24
    });
  };

  RacePublicationIndexItem.prototype.raceUrl = function(slug) {
    return "/races/" + slug;
  };

  RacePublicationIndexItem.prototype.canEdit = function(arg) {
    var can_edit;
    can_edit = (arg != null ? arg : {}).can_edit;
    return can_edit;
  };

  return RacePublicationIndexItem;

})(Backbone.Marionette.ItemView);

FellRace.Views.RacePublicationsIndex = (function(superClass) {
  extend(RacePublicationsIndex, superClass);

  function RacePublicationsIndex() {
    return RacePublicationsIndex.__super__.constructor.apply(this, arguments);
  }

  RacePublicationsIndex.prototype.template = "race_publications/index";

  RacePublicationsIndex.prototype.tagName = "section";

  RacePublicationsIndex.prototype.itemView = FellRace.Views.RacePublicationIndexItem;

  RacePublicationsIndex.prototype.itemViewContainer = ".races";

  return RacePublicationsIndex;

})(Backbone.Marionette.CompositeView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.RacePublicationLayout = (function(superClass) {
  extend(RacePublicationLayout, superClass);

  function RacePublicationLayout() {
    this.history = bind(this.history, this);
    this.checkpoint = bind(this.checkpoint, this);
    this.instance = bind(this.instance, this);
    this["default"] = bind(this["default"], this);
    this.handle = bind(this.handle, this);
    this.routes = bind(this.routes, this);
    return RacePublicationLayout.__super__.constructor.apply(this, arguments);
  }

  RacePublicationLayout.prototype.routes = function() {
    return {
      "(/)": this["default"],
      "checkpoints/:checkpoint_slug(/*path)": this.checkpoint,
      "history(/*path)": this.history,
      ":instance_name(/*path)": this.instance
    };
  };

  RacePublicationLayout.prototype.handle = function() {
    RacePublicationLayout.__super__.handle.apply(this, arguments);
    return _fr.vent.on('login:changed', (function(_this) {
      return function() {
        return _this.model.fetchPermissions();
      };
    })(this));
  };

  RacePublicationLayout.prototype.initialize = function() {
    _fr.mainRegion.show(new FellRace.Views.RacePublication({
      model: this.model
    }));
    $.r = this.model;
    return RacePublicationLayout.__super__.initialize.apply(this, arguments);
  };

  RacePublicationLayout.prototype["default"] = function() {
    _fr.closeRight();
    return this._previous = {
      route: "default"
    };
  };

  RacePublicationLayout.prototype.instance = function(instance_name, path) {
    var instance, view;
    if (this._previous.route === "instance" && this._previous.param === instance_name) {
      return this._previous.view.handle(path);
    } else {
      instance = this.model.past_instances.findWhere({
        name: instance_name
      });
      if (instance == null) {
        instance = this.model.future_instances.findWhere({
          name: instance_name
        });
      }
      if (instance) {
        if (instance.populated) {
          view = new FellRace.Views.InstanceLayout({
            model: instance,
            path: path
          });
          return this._previous = {
            route: "instance",
            param: instance_name,
            view: view
          };
        } else {
          instance.set({
            fetching: true
          });
          return instance.fetch().done((function(_this) {
            return function() {
              instance.build();
              instance.populated = true;
              instance.set({
                fetching: false
              });
              return _this.instance(instance_name, path);
            };
          })(this));
        }
      } else {
        $.notify("error", "This instance doesn't exist. Redirecting to the race page.");
        return _fr.navigate("/races/" + (this.model.get("slug")), {
          replace: true
        });
      }
    }
  };

  RacePublicationLayout.prototype.checkpoint = function(slug, path) {
    var cp;
    if (cp = this.model.checkpoints.findWhere({
      slug: slug
    })) {
      _fr.closeRight();
      _fr.moveMapTo(cp);
    }
    return this._previous = {
      route: "checkpoint",
      param: slug
    };
  };

  RacePublicationLayout.prototype.history = function(path) {
    var view;
    view = new FellRace.Views.RaceHistory({
      model: this.model
    });
    _fr.extraContentRegion.show(view);
    return this._previous = {
      route: "history"
    };
  };

  return RacePublicationLayout;

})(FellRace.Views.LayoutView);

FellRace.Views.RacePublicationsLayout = (function(superClass) {
  extend(RacePublicationsLayout, superClass);

  function RacePublicationsLayout() {
    this.racePublication = bind(this.racePublication, this);
    this.index = bind(this.index, this);
    this.routes = bind(this.routes, this);
    return RacePublicationsLayout.__super__.constructor.apply(this, arguments);
  }

  RacePublicationsLayout.prototype.routes = function() {
    return {
      "(/)": this.index,
      ":slug(/*path)": this.racePublication
    };
  };

  RacePublicationsLayout.prototype.index = function() {
    _fr.mainRegion.show(new FellRace.Views.RacePublicationsIndex({
      collection: _fr.race_publications
    }));
    _fr.closeRight();
    return this._previous = {
      route: "index"
    };
  };

  RacePublicationsLayout.prototype.racePublication = function(slug, path) {
    var model;
    model = _fr.race_publications.add({
      slug: slug
    });
    return model.fetch({
      success: (function(_this) {
        return function() {
          var layout;
          if (_this._previous.route === "racePublication" && _this._previous.param === slug) {
            return _this._previous.view.handle(path);
          } else {
            layout = new FellRace.Views.RacePublicationLayout({
              model: model,
              path: path
            });
            return _this._previous = {
              route: "racePublication",
              param: slug,
              view: layout
            };
          }
        };
      })(this),
      error: (function(_this) {
        return function(model, response) {
          return $.getJSON((_fr.apiUrl()) + "/races/" + slug + "/permissions", function(data) {
            if (data.permissions.can_edit) {
              $.notify('error', "This race needs to be published.");
              return _fr.navigate("/admin/races/" + slug, {
                replace: true
              });
            } else {
              $.notify('error', slug + ".fellrace.org.uk does not exist.");
              return _fr.navigate("/", {
                replace: true
              });
            }
          });
        };
      })(this)
    });
  };

  return RacePublicationsLayout;

})(FellRace.Views.LayoutView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.NextOrRecentInstance = (function(superClass) {
  extend(NextOrRecentInstance, superClass);

  function NextOrRecentInstance() {
    this.ifPast = bind(this.ifPast, this);
    this.ifFuture = bind(this.ifFuture, this);
    this.linkWorking = bind(this.linkWorking, this);
    this.entryFormUrl = bind(this.entryFormUrl, this);
    this.decimalize = bind(this.decimalize, this);
    this.untrue = bind(this.untrue, this);
    this.visibleBlock = bind(this.visibleBlock, this);
    this.niceDate = bind(this.niceDate, this);
    this.niceTime = bind(this.niceTime, this);
    this.enterOnlineHref = bind(this.enterOnlineHref, this);
    this.url = bind(this.url, this);
    this.entryActiveAndFormAvailable = bind(this.entryActiveAndFormAvailable, this);
    this.entryActive = bind(this.entryActive, this);
    this.onRender = bind(this.onRender, this);
    return NextOrRecentInstance.__super__.constructor.apply(this, arguments);
  }

  NextOrRecentInstance.prototype.template = "race_publications/next_or_recent_instance";

  NextOrRecentInstance.prototype.events = {
    "click a.history": "linkWorking",
    "click a.date": "linkWorking",
    "click a.entries": "linkWorking"
  };

  NextOrRecentInstance.prototype.bindings = {
    "p.entry": {
      observe: "date",
      visible: "ifFuture"
    },
    "p.results": {
      observe: 'file',
      visible: true
    },
    "a.date": {
      observe: "date",
      onGet: "niceDate",
      attributes: [
        {
          observe: ["race_slug", "name"],
          name: "href",
          onGet: "url"
        }
      ]
    },
    ".time": {
      observe: "time",
      onGet: "niceTime"
    },
    'a.enter_online': {
      observe: 'online_entry_active',
      visible: true,
      visibleFn: "visibleBlock",
      attributes: [
        {
          name: "href",
          observe: ["race_slug", "name"],
          onGet: "enterOnlineHref"
        }
      ]
    },
    'a.enter_postal': {
      observe: 'postal_entry_active',
      visible: true,
      visibleFn: "visibleBlock",
      attributes: [
        {
          name: "href",
          observe: "entry_form",
          onGet: "entryFormUrl"
        }, {
          name: "class",
          observe: "entry_form_type"
        }
      ]
    },
    'span.both': {
      observe: ["online_entry_active", "postal_entry_active"],
      visible: function(arg) {
        var a, b, ref;
        ref = arg != null ? arg : [], a = ref[0], b = ref[1];
        return a && b;
      }
    },
    'span.online_entry_fee': {
      observe: 'online_entry_fee',
      onGet: 'decimalize'
    },
    'span.postal_entry_fee': {
      observe: 'postal_entry_fee',
      onGet: 'decimalize'
    },
    'span.eod_fee': {
      observe: 'eod_fee',
      onGet: 'decimalize'
    },
    'span.eod': {
      observe: "eod",
      visible: true,
      visibleFn: "visibleBlock"
    },
    'span.no_eod': {
      observe: "eod",
      visible: "untrue",
      visibleFn: "visibleBlock"
    },
    'a.results': {
      attributes: [
        {
          observe: ["race_slug", "name"],
          name: "href",
          onGet: "url"
        }
      ]
    },
    'a.entries': {
      observe: "online_entry",
      visible: true,
      attributes: [
        {
          observe: ["race_slug", "name"],
          name: "href",
          onGet: "url"
        }
      ]
    },
    'a.history': {
      attributes: [
        {
          name: "href",
          observe: "race_slug",
          onGet: function(slug) {
            return "/races/" + slug + "/history";
          }
        }
      ]
    }
  };

  NextOrRecentInstance.prototype.onRender = function() {
    return this.stickit();
  };

  NextOrRecentInstance.prototype.entryActive = function(arg) {
    var atall, end, ref, ref1, start;
    ref = arg != null ? arg : [], atall = ref[0], start = ref[1], end = ref[2];
    return atall && ((start < (ref1 = new Date) && ref1 < end));
  };

  NextOrRecentInstance.prototype.entryActiveAndFormAvailable = function(arg) {
    var atall, end, ref, ref1, start, url;
    ref = arg != null ? arg : [], atall = ref[0], start = ref[1], end = ref[2], url = ref[3];
    return atall && url && ((start < (ref1 = new Date) && ref1 < end));
  };

  NextOrRecentInstance.prototype.url = function(arg) {
    var name, race_slug, ref;
    ref = arg != null ? arg : [], race_slug = ref[0], name = ref[1];
    return "/races/" + race_slug + "/" + name;
  };

  NextOrRecentInstance.prototype.enterOnlineHref = function(arg) {
    var name, race_slug, ref;
    ref = arg != null ? arg : [], race_slug = ref[0], name = ref[1];
    return "/races/" + race_slug + "/" + name + "/enter";
  };

  NextOrRecentInstance.prototype.niceTime = function(time) {
    return time;
  };

  NextOrRecentInstance.prototype.niceDate = function(date) {
    if (date) {
      return moment(date).format("D MMMM YYYY");
    }
  };

  NextOrRecentInstance.prototype.visibleBlock = function($el, isVisible, options) {
    if (isVisible) {
      return $el.css({
        display: "block"
      });
    } else {
      return $el.hide();
    }
  };

  NextOrRecentInstance.prototype.untrue = function(value) {
    return !value;
  };

  NextOrRecentInstance.prototype.decimalize = function(value) {
    return value != null ? value.toFixed(2) : void 0;
  };

  NextOrRecentInstance.prototype.entryFormUrl = function(url) {
    if (url) {
      if (url.match(/^\//)) {
        return "" + (_fr.apiUrl()) + url;
      } else {
        return url;
      }
    }
  };

  NextOrRecentInstance.prototype.linkWorking = function(e) {
    var link;
    if (link = e.currentTarget) {
      $(link).addClass('working');
      return _fr.vent.once('loaded', function() {
        return $(link).removeClass('working');
      });
    }
  };

  NextOrRecentInstance.prototype.ifFuture = function(date) {
    return date > new Date();
  };

  NextOrRecentInstance.prototype.ifPast = function(date) {
    return date <= new Date();
  };

  return NextOrRecentInstance;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.RacePublicationPolyline = (function(superClass) {
  extend(RacePublicationPolyline, superClass);

  function RacePublicationPolyline() {
    this.unclickable = bind(this.unclickable, this);
    this.show = bind(this.show, this);
    this.hide = bind(this.hide, this);
    this.strokeOpacity = bind(this.strokeOpacity, this);
    this.visible = bind(this.visible, this);
    this.icons = bind(this.icons, this);
    this.select = bind(this.select, this);
    return RacePublicationPolyline.__super__.constructor.apply(this, arguments);
  }

  RacePublicationPolyline.prototype.defaultOptions = {
    strokeWeight: 4,
    strokeOpacity: 0.3,
    strokeColor: "#d1005d",
    zIndex: 1
  };

  RacePublicationPolyline.prototype.bindings = {
    path: {
      attributes: ["route", "checkpoint_route"],
      modelChanged: "path"
    },
    icons: {
      attributes: ["colour", "selected"],
      modelChanged: "icons"
    },
    strokeOpacity: {
      attribute: "selected",
      modelChanged: "strokeOpacity"
    },
    visible: {
      attributes: ["route", "selected"],
      modelChanged: "visible"
    },
    clickable: {
      attribute: "selected",
      modelChanged: "unclickable"
    }
  };

  RacePublicationPolyline.prototype.overlayEvents = {
    click: "select"
  };

  RacePublicationPolyline.prototype.initialize = function(arg) {
    var map;
    map = (arg != null ? arg : {}).map;
    return this.checkpoints = new FellRace.Views.CheckpointMarkers({
      collection: this.model.checkpoints,
      map: map
    });
  };

  RacePublicationPolyline.prototype.select = function() {
    if (!this.model.get("selected")) {
      return _fr.navigate("/races/" + (this.model.get("slug")));
    }
  };

  RacePublicationPolyline.prototype.path = function(arg) {
    var cp_route_string, ref, route_string;
    ref = arg != null ? arg : {}, route_string = ref.route, cp_route_string = ref.checkpoint_route;
    return MapStick.decodePathString(route_string || cp_route_string || "");
  };

  RacePublicationPolyline.prototype.icons = function(arg) {
    var colour, ref, selected;
    ref = arg != null ? arg : {}, colour = ref.colour, selected = ref.selected;
    if (selected) {
      return [
        {
          icon: {
            path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
            fillOpacity: 0.8,
            scale: 5,
            strokeWeight: 1,
            strokeColor: colour,
            strokeOpacity: 0.8
          },
          offset: "80px",
          repeat: "180px",
          icon: {
            path: 'M 0,-1 0,1',
            strokeColor: colour,
            strokeOpacity: 0.8,
            strokeWeight: 5,
            scale: 5
          },
          offset: "0",
          repeat: "20px"
        }
      ];
    }
  };

  RacePublicationPolyline.prototype.visible = function(arg) {
    var ref, route, selected;
    ref = arg != null ? arg : {}, route = ref.route, selected = ref.selected;
    return !(!route && selected);
  };

  RacePublicationPolyline.prototype.strokeOpacity = function(arg) {
    var selected;
    selected = (arg != null ? arg : {}).selected;
    if (selected) {
      return 0;
    } else {
      return this.defaultOptions.strokeOpacity;
    }
  };

  RacePublicationPolyline.prototype.hide = function() {
    RacePublicationPolyline.__super__.hide.apply(this, arguments);
    return this.checkpoints.hide();
  };

  RacePublicationPolyline.prototype.show = function() {
    RacePublicationPolyline.__super__.show.apply(this, arguments);
    return this.checkpoints.show();
  };

  RacePublicationPolyline.prototype.unclickable = function(arg) {
    var selected;
    selected = (arg != null ? arg : {}).selected;
    return !selected;
  };

  return RacePublicationPolyline;

})(MapStick.Polyline);

FellRace.Views.RacePublicationPolylines = (function(superClass) {
  extend(RacePublicationPolylines, superClass);

  function RacePublicationPolylines() {
    return RacePublicationPolylines.__super__.constructor.apply(this, arguments);
  }

  RacePublicationPolylines.prototype.itemView = FellRace.Views.RacePublicationPolyline;

  return RacePublicationPolylines;

})(MapStick.OverlayCollection);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.RacePublication = (function(superClass) {
  extend(RacePublication, superClass);

  function RacePublication() {
    this.canEdit = bind(this.canEdit, this);
    this.backgroundImageUrl = bind(this.backgroundImageUrl, this);
    this.standOutIfPicture = bind(this.standOutIfPicture, this);
    this.date = bind(this.date, this);
    this.pictureUrl = bind(this.pictureUrl, this);
    this.openTab = bind(this.openTab, this);
    this.moreThanOne = bind(this.moreThanOne, this);
    this.hasAnyWithLocation = bind(this.hasAnyWithLocation, this);
    this.hasAny = bind(this.hasAny, this);
    this.old_peify = bind(this.old_peify, this);
    this.peify = bind(this.peify, this);
    this.visibleBlock = bind(this.visibleBlock, this);
    this.showPresence = bind(this.showPresence, this);
    this.onRender = bind(this.onRender, this);
    this.quickSlide = bind(this.quickSlide, this);
    return RacePublication.__super__.constructor.apply(this, arguments);
  }

  RacePublication.prototype.template = 'race_publications/show';

  RacePublication.prototype.className = "race";

  RacePublication.prototype.events = {
    'click a.social': 'openTab'
  };

  RacePublication.prototype.bindings = {
    'a.edit': {
      observe: "permissions",
      visible: "canEdit",
      attributes: [
        {
          observe: ["slug", "permissions"],
          name: "href",
          onGet: function(arg) {
            var permissions, ref, slug;
            ref = arg != null ? arg : [], slug = ref[0], permissions = ref[1];
            if (permissions != null ? permissions.can_edit : void 0) {
              return "/admin/races/" + slug;
            }
          }
        }
      ]
    },
    ".date": {
      observe: "date",
      onGet: "date"
    },
    ".time": "time",
    ".picture": {
      attributes: [
        {
          name: "style",
          observe: 'picture',
          onGet: "backgroundImageUrl"
        }
      ]
    },
    '.name': {
      observe: 'name',
      attributes: [
        {
          name: "class",
          observe: "picture",
          onGet: "standOutIfPicture"
        }
      ]
    },
    '.distance': 'distance',
    '.description': {
      observe: 'description',
      updateMethod: 'html'
    },
    '.climb': "climb",
    '.cat': 'cat',
    'a.twit': {
      observe: 'twitter_id',
      visible: true,
      visibleFn: "visibleBlock",
      attributes: [
        {
          name: "href",
          onGet: function(val) {
            return "http://www.twitter.com/" + val;
          }
        }
      ]
    },
    'a.fb': {
      observe: 'fb_event_id',
      visible: true,
      visibleFn: "visibleBlock",
      attributes: [
        {
          name: "href",
          onGet: function(val) {
            return "https://www.facebook.com/events/" + val;
          }
        }
      ]
    },
    'a.shr': {
      observe: 'shr_id',
      visible: true,
      visibleFn: "visibleBlock",
      attributes: [
        {
          name: "href",
          onGet: function(val) {
            return "http://www.scottishhillracing.co.uk/RaceDetails.aspx?RaceID=RA-" + val;
          }
        }
      ]
    },
    'a.fra': {
      observe: 'fra_id',
      visible: true,
      visibleFn: "visibleBlock",
      attributes: [
        {
          name: "href",
          onGet: function(val) {
            return "http://fellrunner.org.uk/races.php?id=" + val;
          }
        }
      ]
    },
    'span.age_limit': {
      observe: "age_limit"
    },
    '.route_elevation': "route_elevation",
    'span.race_profile': {
      observe: 'route_profile',
      update: "peify"
    },
    '.race_organiser': {
      observe: ["organiser_email", 'organiser_phone', 'organiser_name', 'organiser_address'],
      updateView: false,
      visible: function(vals) {
        return vals[0] !== "" || vals[1] !== "" || vals[2] !== "" || vals[3] !== "";
      }
    },
    '.organiser_name': {
      observe: "organiser_name",
      onGet: function(val) {
        if (!val || val === "") {
          val = "@";
        }
        return val;
      },
      attributes: [
        {
          name: "href",
          observe: "organiser_email",
          onGet: function(val) {
            if (val) {
              return "mailto:" + val;
            } else {
              return null;
            }
          }
        }
      ]
    },
    '.organiser_phone': "organiser_phone",
    '.organiser_address': {
      observe: "organiser_address",
      updateMethod: "html",
      onSet: function(val) {
        if (/(\<div\>\<br\>\<\/div\>|\<br\>)/.test(val)) {
          val = null;
        }
        return val;
      }
    },
    '.requirements': {
      observe: "requirements",
      updateMethod: "html"
    },
    '.race_requirements': {
      observe: "requirements",
      visible: true
    },
    '.attachments': {
      observe: "attachments",
      visible: "hasAny"
    },
    '.links': {
      observe: "links",
      visible: function(links) {
        return links.length > 0;
      }
    },
    'a.history': {
      attributes: [
        {
          name: "href",
          observe: "slug",
          onGet: function(slug) {
            return "/races/" + slug + "/history";
          }
        }
      ]
    },
    '.past_instances': {
      observe: "instances",
      visible: "hasAny"
    },
    '.records': {
      observe: "records",
      visible: "hasAny"
    },
    '.checkpoints': {
      observe: "checkpoints",
      visible: "hasAnyWithLocation"
    }
  };

  RacePublication.prototype.quickSlide = function($el, isVisible, options) {
    if (isVisible) {
      return $el.slideDown('fast');
    } else {
      return $el.slideUp('fast');
    }
  };

  RacePublication.prototype.onRender = function() {
    var instance;
    this.stickit();
    this.model.trigger("select");
    new FellRace.Views.AttachmentsList({
      collection: this.model.attachments,
      el: this.$el.find("ul.attachments")
    }).render();
    new FellRace.Views.LinksList({
      collection: this.model.links,
      el: this.$el.find("ul.links")
    }).render();
    new FellRace.Views.CheckpointsList({
      collection: this.model.checkpoints,
      el: this.$el.find("ul.checkpoints"),
      race_slug: this.model.get('slug')
    }).render();
    new FellRace.Views.RecordsList({
      collection: this.model.records,
      el: this.$el.find("ul.records")
    }).render();
    new FellRace.Views.PastInstancesList({
      collection: this.model.past_instances,
      el: this.$el.find("ul.past_instances")
    }).render();
    if (instance = this.model.nextOrRecentInstance()) {
      return new FellRace.Views.NextOrRecentInstance({
        model: instance,
        el: this.$el.find(".next_or_recent")
      }).render();
    }
  };

  RacePublication.prototype.showPresence = function(e) {
    var el, val;
    el = $(e.currentTarget);
    val = _.str.trim(el.text());
    if (val !== "") {
      return el.addClass('present');
    } else {
      return el.removeClass('present');
    }
  };

  RacePublication.prototype.visibleBlock = function($el, isVisible, options) {
    if (isVisible) {
      return $el.css({
        display: "inline-block"
      });
    } else {
      return $el.hide();
    }
  };

  RacePublication.prototype.peify = function($el, value, model, options) {
    var checkExist;
    $(window).on("resize", (function(_this) {
      return function() {
        return _this.old_peify($el);
      };
    })(this));
    return checkExist = setInterval((function(_this) {
      return function() {
        if ($el.length) {
          clearInterval(checkExist);
          $el.text(value);
          return _this.old_peify($el);
        }
      };
    })(this), 100);
  };

  RacePublication.prototype.old_peify = function($el) {
    var holder;
    holder = $el.parent();
    return $el.peity("line", {
      fill: "#e2e1dd",
      stroke: "#d6d6d4",
      width: holder.width(),
      height: 64
    });
  };

  RacePublication.prototype.hasAny = function(array) {
    return array.length > 0;
  };

  RacePublication.prototype.hasAnyWithLocation = function(cps) {
    return _.filter(cps, function(cp) {
      return cp.lat && cp.lng;
    }).length > 0;
  };

  RacePublication.prototype.moreThanOne = function(array) {
    return array.length > 1;
  };

  RacePublication.prototype.openTab = function(e) {
    if (e) {
      e.preventDefault();
    }
    return window.open(e.currentTarget.href);
  };

  RacePublication.prototype.pictureUrl = function(url) {
    if (url) {
      if (url.match(/^\//)) {
        return "" + (_fr.apiUrl()) + url;
      } else {
        return url;
      }
    }
  };

  RacePublication.prototype.date = function(date) {
    return moment(date).format("D MMMM YYYY");
  };

  RacePublication.prototype.standOutIfPicture = function(picture) {
    if (picture) {
      return "on_picture";
    }
  };

  RacePublication.prototype.backgroundImageUrl = function(url) {
    if (url) {
      if (url.match(/data:image/)) {
        return "background-image: url(" + url + ")";
      } else if (url.match(/^\//)) {
        return "background-image: url(" + (_fr.apiUrl()) + url + ")";
      } else {
        return "background-image: url(" + url + ")";
      }
    }
  };

  RacePublication.prototype.canEdit = function(arg) {
    var can_edit;
    can_edit = (arg != null ? arg : {}).can_edit;
    return can_edit;
  };

  return RacePublication;

})(Backbone.Marionette.ItemView);

FellRace.Views.RacePublicationsList = (function(superClass) {
  extend(RacePublicationsList, superClass);

  function RacePublicationsList() {
    return RacePublicationsList.__super__.constructor.apply(this, arguments);
  }

  RacePublicationsList.prototype.itemView = FellRace.Views.RacePublication;

  return RacePublicationsList;

})(Backbone.Marionette.CollectionView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.Race = (function(superClass) {
  extend(Race, superClass);

  function Race() {
    this.onClose = bind(this.onClose, this);
    this.date = bind(this.date, this);
    this.buttonText = bind(this.buttonText, this);
    this.old_peify = bind(this.old_peify, this);
    this.peify = bind(this.peify, this);
    this.error = bind(this.error, this);
    this.publish = bind(this.publish, this);
    this.newInstanceUrl = bind(this.newInstanceUrl, this);
    this.getRouteDistance = bind(this.getRouteDistance, this);
    this.showPresence = bind(this.showPresence, this);
    this.deleteRoute = bind(this.deleteRoute, this);
    this.setRoute = bind(this.setRoute, this);
    this.drawRoute = bind(this.drawRoute, this);
    this.createRouteThroughCheckpoints = bind(this.createRouteThroughCheckpoints, this);
    this.setCheckpointVisibility = bind(this.setCheckpointVisibility, this);
    this.addLink = bind(this.addLink, this);
    this.addRecord = bind(this.addRecord, this);
    this.addCheckpoint = bind(this.addCheckpoint, this);
    this.addAttachment = bind(this.addAttachment, this);
    this.highlight = bind(this.highlight, this);
    this.onRender = bind(this.onRender, this);
    return Race.__super__.constructor.apply(this, arguments);
  }

  Race.prototype.template = 'races/edit';

  Race.prototype.className = "race";

  Race.prototype.modelEvents = {
    'change:show_checkpoints': 'setCheckpointVisibility'
  };

  Race.prototype.events = {
    'click a.publish': 'publish',
    'click a.add_attachment': 'addAttachment',
    'click a.add_record': 'addRecord',
    'click a.add_checkpoint': 'addCheckpoint',
    'click a.add_link': 'addLink',
    'click a.checkpoint_route': "createRouteThroughCheckpoints",
    'click a.draw_route': "drawRoute",
    'click a.delete_route': 'deleteRoute',
    'keyup span.social': 'showPresence'
  };

  Race.prototype.bindings = {
    'a.publish': {
      attributes: [
        {
          observe: "publishing",
          name: "class",
          onGet: function(publishing) {
            if (publishing) {
              return "publishing";
            }
          }
        }
      ]
    },
    "a.cancel": {
      attributes: [
        {
          name: "href",
          observe: "slug",
          onGet: function(slug) {
            return "/races/" + slug;
          }
        }
      ]
    },
    "label.pick": {
      observe: 'picture',
      onGet: "buttonText"
    },
    '.name': 'name',
    '.description': {
      observe: 'description',
      updateMethod: 'html'
    },
    '.distance': 'distance',
    '.climb': "climb",
    '.cat': 'cat',
    'span.fb': 'fb_event_id',
    'span.twit': 'twitter_id',
    'span.shr': 'shr_id',
    'input.race_show_route': "show_route",
    '.route_controls': {
      observe: "show_route",
      updateView: false,
      visible: true
    },
    '.route_elevation': "route_elevation",
    '.route_distance': {
      observe: "encoded_route",
      onGet: "getRouteDistance"
    },
    'input.route_colour': "route_colour",
    '.no_route': {
      observe: "encoded_route",
      updateView: false,
      visible: function(value) {
        return !value;
      }
    },
    '.route_details': {
      observe: "encoded_route",
      updateView: false,
      visible: true
    },
    'span.race_profile': {
      observe: 'route_profile',
      update: "peify"
    },
    '.organiser_name': "organiser_name",
    '.organiser_email': "organiser_email",
    '.organiser_phone': "organiser_phone",
    '.organiser_address': {
      observe: "organiser_address",
      onSet: function(val) {
        if (/(\<div\>\<br\>\<\/div\>|\<br\>)/.test(val)) {
          val = null;
        }
        return val;
      }
    },
    '.requirements': {
      observe: "requirements"
    },
    'a.add_instance': {
      attributes: [
        {
          observe: "slug",
          name: "href",
          onGet: "newInstanceUrl"
        }
      ]
    }
  };

  Race.prototype.onRender = function() {
    this.stickit();
    this.$el.find('.editable').editable();
    this.stickit();
    new FellRace.Views.NextRaceInstance({
      model: this.model,
      el: this.$el.find(".next_or_recent")
    }).render();
    new FellRace.Views.Picture({
      model: this.model,
      el: this.$el.find(".picture")
    }).render();
    new FellRace.Views.AdminAttachmentsList({
      collection: this.model.attachments,
      el: this.$el.find("ul.attachments")
    }).render();
    new FellRace.Views.AdminLinksList({
      collection: this.model.links,
      el: this.$el.find("ul.links")
    }).render();
    new FellRace.Views.AdminCheckpointsList({
      collection: this.model.checkpoints,
      el: this.$el.find("ul.checkpoints")
    }).render();
    new FellRace.Views.AdminRecordsList({
      collection: this.model.records,
      el: this.$el.find("ul.records")
    }).render();
    new FellRace.Views.AdminFutureInstancesList({
      collection: this.model.future_instances,
      el: this.$el.find("ul.future_instances")
    }).render();
    return new FellRace.Views.AdminPastInstancesList({
      collection: this.model.past_instances,
      el: this.$el.find("ul.past_instances")
    }).render();
  };

  Race.prototype.highlight = function($el, val, options) {
    return $el.signal_confirmation();
  };

  Race.prototype.addAttachment = function() {
    return this.model.attachments.create({});
  };

  Race.prototype.addCheckpoint = function() {
    return this.model.checkpoints.create({
      pos: this.model.checkpoints.length - 1
    });
  };

  Race.prototype.addRecord = function() {
    return this.model.records.create({});
  };

  Race.prototype.addLink = function() {
    return this.model.links.create({});
  };

  Race.prototype.setCheckpointVisibility = function() {
    if (this.model.get('show_checkpoints')) {
      return this.model.checkpoints.trigger('show');
    } else {
      return this.model.checkpoints.trigger('hide');
    }
  };

  Race.prototype.createRouteThroughCheckpoints = function() {
    return this.model.createRouteFromCheckpoints();
  };

  Race.prototype.drawRoute = function() {
    return this.model.trigger("extend");
  };

  Race.prototype.setRoute = function(path) {
    return this.model.set({
      encoded_route: path
    });
  };

  Race.prototype.deleteRoute = function() {
    return this.setRoute(null);
  };

  Race.prototype.showPresence = function(e) {
    var el, val;
    el = $(e.currentTarget);
    val = _.str.trim(el.text());
    if (val !== "") {
      return el.addClass('present');
    } else {
      return el.removeClass('present');
    }
  };

  Race.prototype.getRouteDistance = function() {
    return this.model.getRouteDistance();
  };

  Race.prototype.newInstanceUrl = function(slug) {
    return "/admin/races/" + slug + "/new_instance";
  };

  Race.prototype.publish = function() {
    return this.model.publish();
  };

  Race.prototype.error = function(args) {
    return $.notify("Error fetching record", args);
  };

  Race.prototype.peify = function($el, value, model, options) {
    var checkExist;
    return checkExist = setInterval((function(_this) {
      return function() {
        if ($el.length) {
          clearInterval(checkExist);
          $el.text(value);
          $el.peity("line");
          return _this.old_peify($el);
        }
      };
    })(this), 100);
  };

  Race.prototype.old_peify = function($el) {
    var holder;
    holder = $el.parent();
    return $el.peity("line", {
      fill: "#e2e1dd",
      stroke: "#d6d6d4",
      width: holder.width(),
      height: 64
    });
  };

  Race.prototype.buttonText = function(image) {
    if (image) {
      return "Replace picture";
    } else {
      return "Choose picture";
    }
  };

  Race.prototype.date = function(date) {
    if (date) {
      return moment(date).format("D MMMM YYYY");
    }
  };

  Race.prototype.onClose = function() {
    return $(".medium-editor-toolbar, .medium-editor-anchor-preview").remove();
  };

  return Race;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.RaceLayout = (function(superClass) {
  extend(RaceLayout, superClass);

  function RaceLayout() {
    this.newInstance = bind(this.newInstance, this);
    this.instance = bind(this.instance, this);
    this["default"] = bind(this["default"], this);
    this.routes = bind(this.routes, this);
    return RaceLayout.__super__.constructor.apply(this, arguments);
  }

  RaceLayout.prototype.routes = function() {
    return {
      "(/)": this["default"],
      "new_instance": this.newInstance,
      ":instance_name(/*path)": this.instance
    };
  };

  RaceLayout.prototype.initialize = function() {
    var view;
    RaceLayout.__super__.initialize.apply(this, arguments);
    view = new FellRace.Views.Race({
      model: this.model
    });
    return _fr.mainRegion.show(view);
  };

  RaceLayout.prototype["default"] = function() {
    return _fr.closeRight();
  };

  RaceLayout.prototype.instance = function(instance_name, path) {
    var instance, view;
    if (instance = this.model.past_instances.findWhere({
      name: instance_name
    })) {
      view = new FellRace.Views.AdminPastInstance({
        model: instance
      });
    } else if (instance = this.model.future_instances.findWhere({
      name: instance_name
    })) {
      view = new FellRace.Views.AdminFutureInstance({
        model: instance
      });
    }
    if (instance) {
      instance.fetch();
      return _fr.extraContentRegion.show(view);
    } else {
      $.notify("error", "This instance doesn't exist");
      return _fr.navigate("/admin/races/" + (this.model.get("slug")), {
        replace: true
      });
    }
  };

  RaceLayout.prototype.newInstance = function() {
    var model, view;
    model = new FellRace.Models.Instance({
      race_slug: this.model.get("slug"),
      race_name: this.model.get("name")
    });
    model.urlRoot = (this.model.url()) + "/instances";
    view = new FellRace.Views.NewInstance({
      model: model
    });
    return _fr.extraContentRegion.show(view);
  };

  return RaceLayout;

})(FellRace.Views.LayoutView);

FellRace.Views.RacesLayout = (function(superClass) {
  extend(RacesLayout, superClass);

  function RacesLayout() {
    this.race = bind(this.race, this);
    this.routes = bind(this.routes, this);
    return RacesLayout.__super__.constructor.apply(this, arguments);
  }

  RacesLayout.prototype.routes = function() {
    return {
      ":slug(/*path)": this.race
    };
  };

  RacesLayout.prototype.race = function(slug, path) {
    var model;
    if (this._previous.route === "race" && this._previous.param === slug) {
      return this._previous.view.handle(path);
    } else {
      model = new FellRace.Models.Race({
        slug: slug
      });
      return model.fetch({
        success: (function(_this) {
          return function() {
            var view;
            _fr.showRace(model);
            view = new FellRace.Views.RaceLayout({
              model: model,
              path: path
            });
            return _this._previous = {
              route: "race",
              param: model,
              view: view
            };
          };
        })(this),
        error: (function(_this) {
          return function() {
            return _fr.navigate("/races/" + slug);
          };
        })(this)
      });
    }
  };

  return RacesLayout;

})(FellRace.Views.LayoutView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.NextRaceInstance = (function(superClass) {
  extend(NextRaceInstance, superClass);

  function NextRaceInstance() {
    this.onDate = bind(this.onDate, this);
    this.url = bind(this.url, this);
    this.atTime = bind(this.atTime, this);
    this.getInstance = bind(this.getInstance, this);
    this.onRender = bind(this.onRender, this);
    return NextRaceInstance.__super__.constructor.apply(this, arguments);
  }

  NextRaceInstance.prototype.template = "races/next_instance";

  NextRaceInstance.prototype.bindings = {
    "a": {
      attributes: [
        {
          name: "href",
          observe: ["race_slug", "name"],
          onGet: "url"
        }
      ]
    },
    "a.date": {
      observe: "date",
      onGet: "onDate"
    },
    ".time": {
      observe: "time",
      onGet: "atTime"
    }
  };

  NextRaceInstance.prototype.onRender = function() {
    this.stickit(this.getInstance(), this.bindings);
    this.model.future_instances.on("add remove reset check_dates", (function(_this) {
      return function() {
        return _this.stickit(_this.getInstance(), _this.bindings);
      };
    })(this));
    return this.model.past_instances.on("add remove reset check_dates", (function(_this) {
      return function() {
        return _this.stickit(_this.getInstance(), _this.bindings);
      };
    })(this));
  };

  NextRaceInstance.prototype.getInstance = function() {
    return this.model.nextOrRecentInstance();
  };

  NextRaceInstance.prototype.atTime = function(time) {
    if (time && time !== "") {
      return "at " + time;
    }
  };

  NextRaceInstance.prototype.url = function(arg) {
    var name, race_slug, ref;
    ref = arg != null ? arg : [], race_slug = ref[0], name = ref[1];
    return "/admin/races/" + race_slug + "/" + name;
  };

  NextRaceInstance.prototype.onDate = function(date) {
    if (date) {
      return moment(date).format("D MMMM YYYY");
    }
  };

  return NextRaceInstance;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.Picture = (function(superClass) {
  extend(Picture, superClass);

  function Picture() {
    this.backgroundImageUrl = bind(this.backgroundImageUrl, this);
    this.pictureUrl = bind(this.pictureUrl, this);
    this.visibleInline = bind(this.visibleInline, this);
    this.imageNameOrDefault = bind(this.imageNameOrDefault, this);
    this.imageDimensions = bind(this.imageDimensions, this);
    this.niceSize = bind(this.niceSize, this);
    this.containEvent = bind(this.containEvent, this);
    this.dragOut = bind(this.dragOut, this);
    this.dragIn = bind(this.dragIn, this);
    this.complain = bind(this.complain, this);
    this.fileNameOk = bind(this.fileNameOk, this);
    this.fileSizeOk = bind(this.fileSizeOk, this);
    this.fileOk = bind(this.fileOk, this);
    this.setImage = bind(this.setImage, this);
    this.readDropboxFile = bind(this.readDropboxFile, this);
    this.readLocalFile = bind(this.readLocalFile, this);
    this.removeImage = bind(this.removeImage, this);
    this.getDroppedFile = bind(this.getDroppedFile, this);
    this.getDropboxFile = bind(this.getDropboxFile, this);
    this.getPickedFile = bind(this.getPickedFile, this);
    this.clickFileField = bind(this.clickFileField, this);
    this.onRender = bind(this.onRender, this);
    return Picture.__super__.constructor.apply(this, arguments);
  }

  Picture.prototype.template = "races/picture";

  Picture.prototype.size_limit = 10;

  Picture.prototype.allowed_extensions = [".png", ".jpg", ".jpeg"];

  Picture.prototype.events = {
    "change input.file": 'getPickedFile',
    "drop .picture": 'getDroppedFile',
    "click a.dropbox": 'getDropboxFile',
    "dragenter .preview": 'dragIn',
    "dragleave .preview": 'dragOut',
    "dragover .preview": 'containEvent',
    "click a.detach": 'removeImage',
    "click a.help": "showHelp"
  };

  Picture.prototype.bindings = {
    ":el": {
      attributes: [
        {
          name: "style",
          observe: 'picture',
          onGet: "backgroundImageUrl"
        }
      ]
    },
    "a.detach": {
      observe: 'picture',
      visible: true
    },
    ".picture_metadata": {
      observe: 'picture',
      visible: true
    },
    ".confirmation": {
      observe: 'picture',
      visible: true,
      visibleFn: "visibleInline"
    },
    ".filesize": {
      observe: "image_size",
      onGet: "niceSize"
    },
    ".filename": {
      observe: "image_name",
      onGet: "imageNameOrDefault"
    },
    ".dimensions": {
      observe: ["image_width", "image_height"],
      onGet: "imageDimensions"
    }
  };

  Picture.prototype.onRender = function() {
    this._filefield = this.$el.find('input.file');
    if (Modernizr.ios6plus) {
      this.$el.find('label.pick').addClass('camera');
    }
    if (!Modernizr.dropbox) {
      this.$el.find('a.dropbox').hide();
    }
    return this.stickit();
  };

  Picture.prototype.clickFileField = function(e) {
    return this._filefield.trigger('click');
  };

  Picture.prototype.getPickedFile = function(e) {
    var files;
    if (files = this._filefield[0].files) {
      return this.readLocalFile(files[0]);
    }
  };

  Picture.prototype.getDropboxFile = function(e) {
    if (e) {
      e.preventDefault();
    }
    return Dropbox.choose({
      multiselect: false,
      linkType: "direct",
      extensions: this.allowed_extensions,
      success: this.readDropboxFile
    });
  };

  Picture.prototype.getDroppedFile = function(e) {
    var files;
    this.dragOut(e);
    if (files = e.originalEvent.dataTransfer.files) {
      return this.readLocalFile(files[0]);
    }
  };

  Picture.prototype.removeImage = function(e) {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    return this.model.dropImage();
  };

  Picture.prototype.readLocalFile = function(file) {
    var reader;
    if (file != null) {
      if (this.fileOk(file.name, file.size)) {
        reader = new FileReader();
        reader.onprogress = function(e) {};
        reader.onloadend = (function(_this) {
          return function() {
            return _this.setImage(reader.result, file.name, file.size);
          };
        })(this);
        return reader.readAsDataURL(file);
      }
    }
  };

  Picture.prototype.readDropboxFile = function(files) {
    var file, request, url;
    if (file = files[0]) {
      if (this.fileOk(file.name, file.bytes)) {
        url = file.link;
        request = new XMLHttpRequest();
        request.responseType = "blob";
        request.onprogress = function(e) {};
        request.onloadend = (function(_this) {
          return function(e) {
            return _this.setImage(window.URL.createObjectURL(e.srcElement.response), file.name, file.bytes);
          };
        })(this);
        request.open("GET", url, true);
        return request.send(null);
      }
    }
  };

  Picture.prototype.setImage = function(data, name, size) {
    this.model.set({
      picture: data
    }, {
      persistChange: true
    });
    this.model.set("image_name", name);
    this.model.set("image_size", size);
    return this.model.set("image_changed", true);
  };

  Picture.prototype.fileOk = function(filename, filesize) {
    return this.fileNameOk(filename, filesize) && this.fileSizeOk(filename, filesize);
  };

  Picture.prototype.fileSizeOk = function(filename, filesize) {
    if (filesize > this.size_limit * 1048576) {
      this.complain('toobig', filename, filesize);
      return false;
    } else {
      return true;
    }
  };

  Picture.prototype.fileNameOk = function(filename, filesize) {
    var ext;
    ext = filename.split('.').pop().toLowerCase();
    if (this.allowed_extensions.indexOf("." + ext) === -1) {
      this.complain('notimage', filename, filesize);
      return false;
    } else {
      return true;
    }
  };

  Picture.prototype.complain = function(error, filename, filesize) {
    if (error === "toobig") {
      return _fr.notify("refusal", "Sorry: there is a limit of " + this.size_limit + "MB for these files and " + filename + " is " + (this.niceSize(filesize)) + ". Please choose another image or make this one smaller before uploading.");
    } else if (error === "notimage") {
      return _fr.notify("refusal", "Sorry: " + filename + " doesn't look like an image file. We can handle jpeg, png and gif files. Please choose another, or make sure that your file has the right extension.");
    } else {
      return _fr.notify("error", "Unknown file-selection error");
    }
  };

  Picture.prototype.dragIn = function(e) {};

  Picture.prototype.dragOut = function(e) {};

  Picture.prototype.containEvent = function(e) {};

  Picture.prototype.niceSize = function(value) {
    var kb, mb;
    if (value) {
      if (value > 1048576) {
        mb = Math.floor(value / 10485.76) / 100;
        return mb + "MB, ";
      } else {
        kb = Math.floor(value / 1024);
        return kb + "KB, ";
      }
    } else {
      return "";
    }
  };

  Picture.prototype.imageDimensions = function(arg) {
    var x, y;
    x = arg[0], y = arg[1];
    if (x && y) {
      return x + "x" + y + "px";
    }
  };

  Picture.prototype.imageNameOrDefault = function(name) {
    if (name) {
      return name;
    } else {
      return "Previously uploaded image";
    }
  };

  Picture.prototype.visibleInline = function($el, isVisible, options) {
    if (isVisible) {
      return $el.css("display", "inline-block");
    } else {
      return $el.css("display", "none");
    }
  };

  Picture.prototype.pictureUrl = function(url) {
    if (url) {
      if (url.match(/data:image/) && !url.match(/^\//)) {
        return url;
      } else {
        return (_fr.apiUrl()) + "/" + url;
      }
    }
  };

  Picture.prototype.backgroundImageUrl = function(url) {
    if (url) {
      if (url.match(/data:image/)) {
        return "background-image: url(" + url + ")";
      } else if (url.match(/^\//)) {
        return "background-image: url(" + (_fr.apiUrl()) + "/" + url + ")";
      } else {
        return "background-image: url(" + url + ")";
      }
    }
  };

  return Picture;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.RacePolyline = (function(superClass) {
  extend(RacePolyline, superClass);

  function RacePolyline() {
    this.show = bind(this.show, this);
    this.hide = bind(this.hide, this);
    return RacePolyline.__super__.constructor.apply(this, arguments);
  }

  RacePolyline.prototype.defaultOptions = {
    strokeWeight: 4,
    strokeOpacity: 0.5,
    editable: true,
    clickable: false
  };

  RacePolyline.prototype.bindings = {
    path: {
      attribute: "encoded_route",
      modelChanged: function(arg) {
        var string;
        string = (arg != null ? arg : {}).encoded_route;
        return MapStick.decodePathString(string || (string = ""));
      },
      overlayChanged: function(path, e) {
        var string;
        string = MapStick.encodePathString(path || (path = []));
        return {
          encoded_route: string
        };
      }
    },
    strokeColor: "route_colour",
    visibility: "show_route"
  };

  RacePolyline.prototype.modelEvents = {
    destroy: "remove",
    extend: "draw"
  };

  RacePolyline.prototype.initialize = function(arg) {
    var map;
    map = (arg != null ? arg : {}).map;
    this.checkpoints = new FellRace.Views.AdminCheckpointMarkers({
      collection: this.model.checkpoints,
      map: map
    });
    return this.checkpoints.show();
  };

  RacePolyline.prototype.hide = function() {
    RacePolyline.__super__.hide.apply(this, arguments);
    return this.checkpoints.hide();
  };

  RacePolyline.prototype.show = function() {
    RacePolyline.__super__.show.apply(this, arguments);
    return this.checkpoints.show();
  };

  return RacePolyline;

})(MapStick.Polyline);

FellRace.Views.RacePolylines = (function(superClass) {
  extend(RacePolylines, superClass);

  function RacePolylines() {
    return RacePolylines.__super__.constructor.apply(this, arguments);
  }

  RacePolylines.prototype.itemView = FellRace.Views.RacePolyline;

  return RacePolylines;

})(MapStick.OverlayCollection);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.AdminRecord = (function(superClass) {
  extend(AdminRecord, superClass);

  function AdminRecord() {
    this["delete"] = bind(this["delete"], this);
    this.seconds = bind(this.seconds, this);
    this.simplestTime = bind(this.simplestTime, this);
    this.onRender = bind(this.onRender, this);
    return AdminRecord.__super__.constructor.apply(this, arguments);
  }

  AdminRecord.prototype.template = 'records/admin_list_item';

  AdminRecord.prototype.tagName = "li";

  AdminRecord.prototype.className = "record";

  AdminRecord.prototype.events = {
    'click a.delete': "delete"
  };

  AdminRecord.prototype.bindings = {
    'span.label': 'label',
    'span.time': {
      observe: 'elapsed_time',
      onGet: 'simplestTime',
      onSet: "seconds"
    },
    'span.name': 'holder',
    'span.year': 'year'
  };

  AdminRecord.prototype.onRender = function() {
    this.$el.find('.editable').editable();
    return this.stickit();
  };

  AdminRecord.prototype.simplestTime = function(seconds) {
    return seconds != null ? seconds.toSimplestTime() : void 0;
  };

  AdminRecord.prototype.seconds = function(string) {
    return string != null ? string.toSeconds() : void 0;
  };

  AdminRecord.prototype["delete"] = function(e) {
    if (e) {
      e.stopPropagation();
    }
    return this.model.destroy();
  };

  return AdminRecord;

})(Backbone.Marionette.ItemView);

FellRace.Views.AddFirstRecord = (function(superClass) {
  extend(AddFirstRecord, superClass);

  function AddFirstRecord() {
    return AddFirstRecord.__super__.constructor.apply(this, arguments);
  }

  AddFirstRecord.prototype.template = 'records/empty';

  AddFirstRecord.prototype.tagName = "li";

  AddFirstRecord.prototype.className = "note";

  return AddFirstRecord;

})(Backbone.Marionette.ItemView);

FellRace.Views.AdminRecordsList = (function(superClass) {
  extend(AdminRecordsList, superClass);

  function AdminRecordsList() {
    return AdminRecordsList.__super__.constructor.apply(this, arguments);
  }

  AdminRecordsList.prototype.itemView = FellRace.Views.AdminRecord;

  AdminRecordsList.prototype.emptyView = FellRace.Views.AddFirstRecord;

  return AdminRecordsList;

})(Backbone.Marionette.CollectionView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.Record = (function(superClass) {
  extend(Record, superClass);

  function Record() {
    this.onRender = bind(this.onRender, this);
    return Record.__super__.constructor.apply(this, arguments);
  }

  Record.prototype.template = 'records/list_item';

  Record.prototype.tagName = "li";

  Record.prototype.className = "record";

  Record.prototype.bindings = {
    'span.label': 'label',
    'span.time': 'elapsed_time',
    'span.name': 'holder',
    'span.year': 'year'
  };

  Record.prototype.onRender = function() {
    return this.stickit();
  };

  return Record;

})(Backbone.Marionette.ItemView);

FellRace.Views.RecordsList = (function(superClass) {
  extend(RecordsList, superClass);

  function RecordsList() {
    return RecordsList.__super__.constructor.apply(this, arguments);
  }

  RecordsList.prototype.itemView = FellRace.Views.Record;

  return RecordsList;

})(Backbone.Marionette.CollectionView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.SessionConfirmationForm = (function(superClass) {
  extend(SessionConfirmationForm, superClass);

  function SessionConfirmationForm() {
    this.showComplexity = bind(this.showComplexity, this);
    this.showDomain = bind(this.showDomain, this);
    this.showIfPasswordConfirmed = bind(this.showIfPasswordConfirmed, this);
    this.showIfPasswordValid = bind(this.showIfPasswordValid, this);
    this.fail = bind(this.fail, this);
    this.submit = bind(this.submit, this);
    this.deny = bind(this.deny, this);
    this.allow = bind(this.allow, this);
    this.onRender = bind(this.onRender, this);
    return SessionConfirmationForm.__super__.constructor.apply(this, arguments);
  }

  SessionConfirmationForm.prototype.template = 'sessions/confirmation_form';

  SessionConfirmationForm.prototype.className = 'confirmation';

  SessionConfirmationForm.prototype.events = {
    'submit form': 'submit'
  };

  SessionConfirmationForm.prototype.bindings = {
    "#first_name": "first_name",
    "#last_name": "last_name",
    "#password": "password",
    "#password_confirmation": "password_confirmation",
    "p.outcome": {
      observe: "desired_slug",
      visible: true
    },
    ".domain": {
      observe: "desired_slug",
      onGet: "showDomain"
    },
    ".password_confirmation": {
      observe: "password",
      update: "showIfPasswordValid"
    },
    '.buttons': {
      observe: "password_confirmation",
      update: "showIfPasswordConfirmed"
    }
  };

  SessionConfirmationForm.prototype.initialize = function(opts) {
    if (opts == null) {
      opts = {};
    }
    this.model = _fr.currentUser();
    this._uid = opts.uid;
    return this._tok = opts.token;
  };

  SessionConfirmationForm.prototype.onRender = function() {
    var state;
    state = _fr.session.get('state');
    this.$el.find('.waiter').show();
    this.$el.find('form').hide();
    this.$el.find('.confirmation').hide();
    this.$el.find('.refusal').hide();
    this.$el.find('#password').complexify(this.showComplexity);
    this.stickit();
    this.$el.find("input").checkAndTriggerAutoFillEvent();
    return $.ajax({
      url: (_fr.apiUrl()) + "/users/verify",
      type: "POST",
      data: {
        uid: this._uid,
        tok: this._tok
      },
      success: this.allow,
      error: this.deny
    });
  };

  SessionConfirmationForm.prototype.allow = function(json) {
    _fr.session.setUser(json);
    this.$el.find('.waiter').hide();
    this.$el.find('.password_confirmation').hide();
    return this.$el.find('form').slideDown();
  };

  SessionConfirmationForm.prototype.deny = function() {
    _fr.session.reset();
    this.$el.find('.waiter').hide();
    return this.$el.find('.refusal').slideDown();
  };

  SessionConfirmationForm.prototype.submit = function(e) {
    var slug, url;
    if (e) {
      e.preventDefault();
    }
    this.$el.find('.error').remove();
    slug = this.model.get("desired_slug");
    url = this.model.get("destination_url");
    return this.model.save(this.model.attributes, {
      error: this.fail,
      success: (function(_this) {
        return function(json) {
          _fr.user_actions().signedUp();
          _fr.session.setUser(json);
          if (slug) {
            return _fr.navigate("/admin/races/" + slug);
          } else if (url) {
            return _fr.navigate(url);
          }
        };
      })(this)
    });
  };

  SessionConfirmationForm.prototype.fail = function(err) {
    return console.log("confirmation error", err);
  };

  SessionConfirmationForm.prototype.showIfPasswordValid = function($el, val, model, options) {
    if ((val != null) && val.length >= 6) {
      return $el.slideDown();
    } else {
      return $el.slideUp();
    }
  };

  SessionConfirmationForm.prototype.showIfPasswordConfirmed = function($el, val, model, options) {
    if ((val != null) && val !== "" && val === model.get('password')) {
      return $el.enable();
    } else {
      return $el.disable();
    }
  };

  SessionConfirmationForm.prototype.showDomain = function(value) {
    return value + ".fellrace.org.uk";
  };

  SessionConfirmationForm.prototype.showComplexity = function(valid, complexity) {
    var color, h, label, val;
    if (this._passwords == null) {
      this._passwords = this.$el.find('#password');
    }
    if (this._note == null) {
      this._note = this.$el.find('span.note');
    }
    if (this._password_labels == null) {
      this._password_labels = ['Not great', 'Quite poor', 'Still pretty weak', 'Getting better', 'Not bad', 'Quite good', 'Good password', 'Very good', 'Super', 'Outstanding', "That's probably enough now"];
    }
    if (val = this._passwords.val()) {
      if (val.length < 6) {
        return this._note.text("Too short!").css({
          'color': "red"
        });
      } else {
        h = Math.floor(complexity * 160 / 100);
        color = tinycolor({
          h: h,
          s: 80,
          v: 50
        }).toHexString();
        label = this._password_labels[Math.floor(complexity * this._password_labels.length / 100)];
        return this._note.text(label).css({
          'color': color
        });
      }
    } else {
      this._note.text("At least 6 characters please").css({
        'color': "#bdbdbd"
      });
      return this._passwords.css({
        'border-color': "#bdbdbd"
      });
    }
  };

  return SessionConfirmationForm;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.SessionLoginForm = (function(superClass) {
  extend(SessionLoginForm, superClass);

  function SessionLoginForm() {
    this.submit = bind(this.submit, this);
    this.signUp = bind(this.signUp, this);
    this.reconfirm = bind(this.reconfirm, this);
    this.forgotten = bind(this.forgotten, this);
    this.fail = bind(this.fail, this);
    this.succeed = bind(this.succeed, this);
    this.login = bind(this.login, this);
    this.onRender = bind(this.onRender, this);
    return SessionLoginForm.__super__.constructor.apply(this, arguments);
  }

  SessionLoginForm.prototype.template = 'sessions/login_form';

  SessionLoginForm.prototype.events = {
    'submit form': 'login',
    'click a.forgotten': 'forgotten',
    'click a.reconfirm': 'reconfirm',
    'click a.sign_up': 'signUp'
  };

  SessionLoginForm.prototype.bindings = {
    "#email": "email",
    "#password": "password"
  };

  SessionLoginForm.prototype.initialize = function(opts) {
    if (opts == null) {
      opts = {};
    }
    this.opts = opts;
    this.model = _fr.session;
    return _fr.vent.on("auth.change", this.render);
  };

  SessionLoginForm.prototype.onRender = function() {
    var state;
    state = _fr.session.getState();
    this.delegateEvents(this.events);
    if (this.opts.heading) {
      this.$el.find('h3').text(this.opts.heading);
    }
    this.stickit();
    return this.$el.find("input").checkAndTriggerAutoFillEvent();
  };

  SessionLoginForm.prototype.login = function(e) {
    if (e) {
      e.preventDefault();
    }
    this.$el.find('.error').remove();
    return $.ajax({
      url: (_fr.config("api_url")) + "/users/sign_in.json",
      type: "post",
      data: {
        user: {
          email: this.model.get('email'),
          password: this.model.get('password')
        }
      },
      success: this.succeed,
      error: this.fail
    });
  };

  SessionLoginForm.prototype.succeed = function(json) {
    _fr.actionRegion.close();
    $.notify("success", "Sign in successful");
    if (this.opts.destination_url) {
      _fr.navigate(this.opts.destination_url, {
        replace: true
      });
    }
    return this.model.setUser(json);
  };

  SessionLoginForm.prototype.fail = function(err) {
    return console.log("login error", err);
  };

  SessionLoginForm.prototype.forgotten = function() {
    return _fr.user_actions().requestReset();
  };

  SessionLoginForm.prototype.reconfirm = function() {
    return _fr.user_actions().reconfirm();
  };

  SessionLoginForm.prototype.signUp = function() {
    return _fr.user_actions().signUp(this.opts);
  };

  SessionLoginForm.prototype.submit = function() {
    return this.login();
  };

  return SessionLoginForm;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.SessionPasswordForm = (function(superClass) {
  extend(SessionPasswordForm, superClass);

  function SessionPasswordForm() {
    this.showComplexity = bind(this.showComplexity, this);
    this.showIfPasswordConfirmed = bind(this.showIfPasswordConfirmed, this);
    this.showIfPasswordValid = bind(this.showIfPasswordValid, this);
    this.fail = bind(this.fail, this);
    this.submit = bind(this.submit, this);
    this.deny = bind(this.deny, this);
    this.allow = bind(this.allow, this);
    this.onRender = bind(this.onRender, this);
    return SessionPasswordForm.__super__.constructor.apply(this, arguments);
  }

  SessionPasswordForm.prototype.template = 'sessions/password_form';

  SessionPasswordForm.prototype.className = 'reset';

  SessionPasswordForm.prototype.events = {
    'submit form': 'submit'
  };

  SessionPasswordForm.prototype.bindings = {
    "#password": "password",
    "#password_confirmation": "password_confirmation",
    ".first_name": "first_name",
    ".last_name": "last_name",
    ".password_confirmation": {
      observe: "password",
      update: "showIfPasswordValid"
    },
    '.buttons': {
      observe: "password_confirmation",
      update: "showIfPasswordConfirmed"
    }
  };

  SessionPasswordForm.prototype.initialize = function(opts) {
    if (opts == null) {
      opts = {};
    }
    this.model = _fr.session.user;
    this._uid = opts.uid;
    return this._tok = opts.token;
  };

  SessionPasswordForm.prototype.onRender = function() {
    this.$el.find('.waiter').show();
    this.$el.find('form').hide();
    this.$el.find('.confirmation').hide();
    this.$el.find('.refusal').hide();
    this.$el.find('#password').complexify(this.showComplexity);
    this.stickit();
    this.$el.find("input").checkAndTriggerAutoFillEvent();
    return $.ajax((_fr.apiUrl()) + "/users/password/edit.json", {
      type: "GET",
      data: {
        id: this._uid,
        reset_password_token: this._tok
      },
      success: this.allow,
      error: this.deny
    });
  };

  SessionPasswordForm.prototype.allow = function(json) {
    this.model.set(json);
    this.$el.find('.waiter').hide();
    return this.$el.find('form').slideDown();
  };

  SessionPasswordForm.prototype.deny = function() {
    this.$el.find('.waiter').hide();
    return this.$el.find('.refusal').slideDown();
  };

  SessionPasswordForm.prototype.submit = function(e) {
    e.preventDefault();
    this.$el.find('.error').remove();
    return this.model.save({}, {
      error: this.fail,
      success: (function(_this) {
        return function(json) {
          _fr.actionRegion.close();
          _fr.navigate('/');
          $.notify("success", "Password successfully changed");
          return _fr.session.setUser(json);
        };
      })(this)
    });
  };

  SessionPasswordForm.prototype.fail = function(err) {
    return console.log("reset error", err);
  };

  SessionPasswordForm.prototype.showIfPasswordValid = function($el, val, model, options) {
    if ((val != null) && val.length >= 6) {
      return $el.slideDown();
    } else {
      return $el.slideUp();
    }
  };

  SessionPasswordForm.prototype.showIfPasswordConfirmed = function($el, val, model, options) {
    if ((val != null) && val !== "" && val === model.get('password')) {
      return $el.enable();
    } else {
      return $el.disable();
    }
  };

  SessionPasswordForm.prototype.showComplexity = function(valid, complexity) {
    var color, h, label, val;
    if (this._passwords == null) {
      this._passwords = this.$el.find('#password');
    }
    if (this._note == null) {
      this._note = this.$el.find('span.note');
    }
    if (this._password_labels == null) {
      this._password_labels = ['Not great', 'Quite poor', 'Still pretty weak', 'Getting better', 'Not bad', 'Quite good', 'Good password', 'Very good', 'Super', 'Outstanding', "That's probably enough now"];
    }
    if (val = this._passwords.val()) {
      if (val.length < 6) {
        return this._note.text("Too short!").css({
          'color': "red"
        });
      } else {
        h = Math.floor(complexity * 160 / 100);
        color = tinycolor({
          h: h,
          s: 80,
          v: 50
        }).toHexString();
        label = this._password_labels[Math.floor(complexity * this._password_labels.length / 100)];
        return this._note.text(label).css({
          'color': color
        });
      }
    } else {
      this._note.text("At least 6 characters please").css({
        'color': "#bdbdbd"
      });
      return this._passwords.css({
        'border-color': "#bdbdbd"
      });
    }
  };

  return SessionPasswordForm;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.ConfirmationRequired = (function(superClass) {
  extend(ConfirmationRequired, superClass);

  function ConfirmationRequired() {
    this.click = bind(this.click, this);
    this.onRender = bind(this.onRender, this);
    return ConfirmationRequired.__super__.constructor.apply(this, arguments);
  }

  ConfirmationRequired.prototype.template = 'sessions/confirmation_required';

  ConfirmationRequired.prototype.events = {
    "click": "click"
  };

  ConfirmationRequired.prototype.bindings = {
    "#email": "email",
    "span.email": {
      observe: "email",
      update: "checkValidity"
    }
  };

  ConfirmationRequired.prototype.initialize = function() {
    return this.model = _fr.currentUser();
  };

  ConfirmationRequired.prototype.onRender = function() {
    return this.stickit();
  };

  ConfirmationRequired.prototype.click = function() {
    return _fr.user_actions().reconfirm();
  };

  return ConfirmationRequired;

})(Backbone.Marionette.ItemView);

FellRace.Views.SessionReconfirmationForm = (function(superClass) {
  extend(SessionReconfirmationForm, superClass);

  function SessionReconfirmationForm() {
    this.signUp = bind(this.signUp, this);
    this.requestReset = bind(this.requestReset, this);
    this.checkValidity = bind(this.checkValidity, this);
    this.fail = bind(this.fail, this);
    this.succeed = bind(this.succeed, this);
    this.request_confirmation = bind(this.request_confirmation, this);
    this.onRender = bind(this.onRender, this);
    return SessionReconfirmationForm.__super__.constructor.apply(this, arguments);
  }

  SessionReconfirmationForm.prototype.template = 'sessions/reconfirmation_form';

  SessionReconfirmationForm.prototype.events = {
    'submit form': 'request_confirmation',
    'click a.request_reset': 'requestReset',
    'click a.sign_up': 'signUp'
  };

  SessionReconfirmationForm.prototype.bindings = {
    "#email": "email",
    "span.email": {
      observe: "email",
      update: "checkValidity"
    }
  };

  SessionReconfirmationForm.prototype.initialize = function() {
    return this.model = _fr.session;
  };

  SessionReconfirmationForm.prototype.onRender = function() {
    this._form = this.$el.find('form');
    this._notes = this.$el.find('p.note');
    this._confirmation = this.$el.find('.confirmation');
    this.delegateEvents(this.events);
    this.stickit();
    return this.$el.find("input").checkAndTriggerAutoFillEvent();
  };

  SessionReconfirmationForm.prototype.request_confirmation = function(e) {
    e.preventDefault();
    this.$el.find('.error').remove();
    this._form.find('input[type="submit"]').disable();
    return $.ajax({
      url: (_fr.apiUrl()) + "/users/reconfirm",
      type: "post",
      data: {
        user: {
          email: this.model.get('email')
        }
      },
      success: this.succeed,
      error: this.fail
    });
  };

  SessionReconfirmationForm.prototype.succeed = function() {
    $.notify("success", "Reconfirmation instructions sent to " + (this.model.get("email")));
    return _fr.actionRegion.close();
  };

  SessionReconfirmationForm.prototype.fail = function() {
    this._error = $("<p />").insertAfter(this._form);
    this._error.addClass('error').text("Problem!");
    return this._form.find('input[type="submit"]').enable();
  };

  SessionReconfirmationForm.prototype.checkValidity = function($el, value, model, options) {
    if (this._atter == null) {
      this._atter = new RegExp('@\\S');
    }
    if (this._dotter == null) {
      this._dotter = new RegExp('\\.\\S');
    }
    if (this._submit == null) {
      this._submit = this._form.find('input[type="submit"]');
    }
    if (value && value !== "" && this._atter.test(value) && this._dotter.test(value)) {
      this._submit.enable();
      this._notes.show();
    } else {
      this._notes.hide();
      this._submit.disable();
    }
    return $el.text(value);
  };

  SessionReconfirmationForm.prototype.requestReset = function() {
    return _fr.user_actions().requestReset();
  };

  SessionReconfirmationForm.prototype.signUp = function() {
    return _fr.user_actions().signUp();
  };

  return SessionReconfirmationForm;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.SessionResetForm = (function(superClass) {
  extend(SessionResetForm, superClass);

  function SessionResetForm() {
    this.signIn = bind(this.signIn, this);
    this.reconfirm = bind(this.reconfirm, this);
    this.checkValidity = bind(this.checkValidity, this);
    this.fail = bind(this.fail, this);
    this.succeed = bind(this.succeed, this);
    this.request_reset = bind(this.request_reset, this);
    this.onRender = bind(this.onRender, this);
    return SessionResetForm.__super__.constructor.apply(this, arguments);
  }

  SessionResetForm.prototype.template = 'sessions/reset_form';

  SessionResetForm.prototype.events = {
    'submit form': 'request_reset',
    'click a.reconfirm': 'reconfirm',
    'click a.sign_in': 'signIn'
  };

  SessionResetForm.prototype.bindings = {
    "#email": "email",
    "span.email": {
      observe: "email",
      update: "checkValidity"
    }
  };

  SessionResetForm.prototype.initialize = function() {
    return this.model = _fr.session;
  };

  SessionResetForm.prototype.onRender = function() {
    this._form = this.$el.find('form');
    this._notes = this.$el.find('p.note');
    this._confirmation = this.$el.find('.confirmation');
    this.delegateEvents(this.events);
    this.stickit();
    return this.$el.find("input").checkAndTriggerAutoFillEvent();
  };

  SessionResetForm.prototype.request_reset = function(e) {
    e.preventDefault();
    this.$el.find('.error').remove();
    this._form.find('input[type="submit"]').disable();
    return $.ajax({
      url: (_fr.apiUrl()) + "/users/password",
      type: "post",
      data: {
        user: {
          email: this.model.get('email')
        }
      },
      success: this.succeed,
      error: this.fail
    });
  };

  SessionResetForm.prototype.succeed = function() {
    $.notify("success", "Password reset instructions sent to " + (this.model.get("email")));
    return _fr.actionRegion.close();
  };

  SessionResetForm.prototype.fail = function() {
    this._error = $("<p />").insertAfter(this._form);
    this._error.addClass('error').text("Problem!");
    return this._form.find('input[type="submit"]').enable();
  };

  SessionResetForm.prototype.checkValidity = function($el, value, model, options) {
    if (this._atter == null) {
      this._atter = new RegExp('@\\S');
    }
    if (this._dotter == null) {
      this._dotter = new RegExp('\\.\\S');
    }
    if (this._submit == null) {
      this._submit = this._form.find('input[type="submit"]');
    }
    if (value && value !== "" && this._atter.test(value) && this._dotter.test(value)) {
      this._submit.enable();
      this._notes.show();
    } else {
      this._notes.hide();
      this._submit.disable();
    }
    return value;
  };

  SessionResetForm.prototype.reconfirm = function() {
    return _fr.user_actions().reconfirm();
  };

  SessionResetForm.prototype.signIn = function() {
    return _fr.user_actions().signIn();
  };

  return SessionResetForm;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.UserLayout = (function(superClass) {
  extend(UserLayout, superClass);

  function UserLayout() {
    this.prefs = bind(this.prefs, this);
    this["default"] = bind(this["default"], this);
    this.routes = bind(this.routes, this);
    return UserLayout.__super__.constructor.apply(this, arguments);
  }

  UserLayout.prototype.routes = function() {
    return {
      "(/)": this["default"],
      "preferences(/*path)": this.prefs
    };
  };

  UserLayout.prototype["default"] = function() {
    var view;
    view = new FellRace.Views.User({
      model: this.model
    });
    _fr.mainRegion.show(view);
    return _fr.closeRight();
  };

  UserLayout.prototype.prefs = function() {
    var view;
    view = new FellRace.Views.UserPrefs({
      model: this.model
    });
    _fr.mainRegion.show(view);
    return _fr.closeRight();
  };

  return UserLayout;

})(FellRace.Views.LayoutView);

FellRace.Views.UsersLayout = (function(superClass) {
  extend(UsersLayout, superClass);

  function UsersLayout() {
    this.user = bind(this.user, this);
    this.me = bind(this.me, this);
    this.routes = bind(this.routes, this);
    return UsersLayout.__super__.constructor.apply(this, arguments);
  }

  UsersLayout.prototype.routes = function() {
    return {
      "me(/*path)": this.me,
      ":id(/*path)": this.user
    };
  };

  UsersLayout.prototype.me = function(path) {
    var model;
    if (this._previous.route === "me") {
      return this._previous.view.handle(path);
    } else {
      model = _fr.getCurrentCompetitor();
      return model.fetch({
        success: (function(_this) {
          return function() {
            var view;
            view = new FellRace.Views.CompetitorLayout({
              model: model,
              path: path
            });
            return _this._previous = {
              route: "me",
              view: view
            };
          };
        })(this)
      });
    }
  };

  UsersLayout.prototype.user = function(id, path) {
    var model;
    if (this._previous.route === "user" && this._previous.param === id) {
      return this._previous.view.handle(path);
    } else {
      model = new FellRace.Models.User({
        id: id
      });
      return model.fetch({
        success: (function(_this) {
          return function() {
            var view;
            view = new FellRace.Views.UserLayout({
              model: model,
              path: path
            });
            return _this._previous = {
              route: "user",
              param: id,
              view: view
            };
          };
        })(this)
      });
    }
  };

  return UsersLayout;

})(FellRace.Views.LayoutView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.UserPrefs = (function(superClass) {
  extend(UserPrefs, superClass);

  function UserPrefs() {
    this.save = bind(this.save, this);
    this.onRender = bind(this.onRender, this);
    return UserPrefs.__super__.constructor.apply(this, arguments);
  }

  UserPrefs.prototype.template = 'users/preferences';

  UserPrefs.prototype.id = "user";

  UserPrefs.prototype.events = {
    "click a.save": "save"
  };

  UserPrefs.prototype.bindings = {
    "input#first_name": "first_name",
    "input#last_name": "last_name",
    "input#email": "email"
  };

  UserPrefs.prototype.onRender = function() {
    return this.stickit();
  };

  UserPrefs.prototype.save = function() {
    return console.log("saving");
  };

  return UserPrefs;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.User = (function(superClass) {
  extend(User, superClass);

  function User() {
    this.onRender = bind(this.onRender, this);
    return User.__super__.constructor.apply(this, arguments);
  }

  User.prototype.template = 'users/show';

  User.prototype.id = "user";

  User.prototype.onRender = function() {
    var competitor, competitor_view;
    competitor = this.model.getCompetitor();
    competitor.fetch();
    competitor_view = new FellRace.Views.Competitor({
      model: competitor,
      el: this.$el.find("#competitor")
    });
    return competitor_view.render();
  };

  return User;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.UserActionMenu = (function(superClass) {
  extend(UserActionMenu, superClass);

  function UserActionMenu() {
    this.findMe = bind(this.findMe, this);
    this.closeMenu = bind(this.closeMenu, this);
    this.signout = bind(this.signout, this);
    this.fullName = bind(this.fullName, this);
    this.onRender = bind(this.onRender, this);
    return UserActionMenu.__super__.constructor.apply(this, arguments);
  }

  UserActionMenu.prototype.template = "users/action_menu";

  UserActionMenu.prototype.events = {
    "click a.signout": "signout",
    "click a": "closeMenu",
    "click a.find_me": "findMe"
  };

  UserActionMenu.prototype.bindings = {
    ".name": {
      observe: ["first_name", "last_name"],
      onGet: "fullName"
    },
    ".find_me": {
      observe: "geo_location",
      visible: true
    }
  };

  UserActionMenu.prototype.initialize = function() {
    this.model = _fr.currentUser();
    if (!Modernizr.geolocation) {
      return this.$el.find("li.find_me").hide();
    }
  };

  UserActionMenu.prototype.onRender = function() {
    return this.stickit();
  };

  UserActionMenu.prototype.fullName = function(arg) {
    var first_name, last_name, ref;
    ref = arg != null ? arg : [], first_name = ref[0], last_name = ref[1];
    return [first_name, last_name].join(' ');
  };

  UserActionMenu.prototype.signout = function() {
    return _fr.user_actions().signOut();
  };

  UserActionMenu.prototype.closeMenu = function() {
    return _fr.user_actions().hideAction();
  };

  UserActionMenu.prototype.findMe = function() {
    return this.model.findUserLocation();
  };

  return UserActionMenu;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.UserConfirmationNotice = (function(superClass) {
  extend(UserConfirmationNotice, superClass);

  function UserConfirmationNotice() {
    this.reconfirm = bind(this.reconfirm, this);
    this.showDesiredOutcome = bind(this.showDesiredOutcome, this);
    this.onRender = bind(this.onRender, this);
    return UserConfirmationNotice.__super__.constructor.apply(this, arguments);
  }

  UserConfirmationNotice.prototype.template = 'users/confirmation_notice';

  UserConfirmationNotice.prototype.events = {
    "submit form": "reconfirm"
  };

  UserConfirmationNotice.prototype.bindings = {
    ".slug": "desired_slug",
    "#email": "email",
    ".email": "email",
    ".first_name": "first_name",
    ".outcome": {
      observe: "desired_slug",
      update: "showDesiredOutcome",
      visible: true
    }
  };

  UserConfirmationNotice.prototype.initialize = function() {
    this.model = _fr.currentUser();
    _fr.vent.on("auth.change", this.render);
    return this.render();
  };

  UserConfirmationNotice.prototype.onRender = function() {
    var state;
    this.stickit();
    state = _fr.session.getState();
    if (state === FellRace.Models.UserSession.unconfirmedState) {
      return this.$el.show();
    } else {
      return this.$el.hide();
    }
  };

  UserConfirmationNotice.prototype.showDesiredOutcome = function($el, value, model, options) {
    var domain;
    if ((value != null) && value !== "") {
      domain = value + ".fellrace.org.uk";
      return $el.html("Please note that the address <strong>" + domain + "</strong> will not be reserved until you finish the confirmation process.");
    } else {
      return $el.hide();
    }
  };

  UserConfirmationNotice.prototype.reconfirm = function(e) {
    if (e) {
      e.preventDefault();
    }
    this.$el.find('input[type="submit"]').disable();
    return this.model.save({
      reconfirm: true
    }, {
      success: (function(_this) {
        return function(model, data) {
          _this.render();
          return $.notify("success", "Confirmation message sent");
        };
      })(this)
    });
  };

  return UserConfirmationNotice;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.UserControls = (function(superClass) {
  extend(UserControls, superClass);

  function UserControls() {
    this.inlineBlock = bind(this.inlineBlock, this);
    this.showAction = bind(this.showAction, this);
    this.onRender = bind(this.onRender, this);
    return UserControls.__super__.constructor.apply(this, arguments);
  }

  UserControls.prototype.template = "users/controls";

  UserControls.prototype.events = {
    "click a.avatar": "showAction"
  };

  UserControls.prototype.initialize = function() {
    return this.model = _fr.session;
  };

  UserControls.prototype.onRender = function() {};

  UserControls.prototype.showAction = function() {
    if (this.model.signedIn()) {
      if (this.model.confirmed()) {
        return _fr.user_actions().menu();
      } else {
        return _fr.user_actions().requestConfirmation();
      }
    } else {
      return _fr.user_actions().signIn();
    }
  };

  UserControls.prototype.inlineBlock = function($el, isVisible, options) {
    if (isVisible) {
      return $el.css({
        display: "inline-block"
      });
    } else {
      return $el.hide();
    }
  };

  return UserControls;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.UserGreeting = (function(superClass) {
  extend(UserGreeting, superClass);

  function UserGreeting() {
    this.onRender = bind(this.onRender, this);
    this.initialize = bind(this.initialize, this);
    return UserGreeting.__super__.constructor.apply(this, arguments);
  }

  UserGreeting.prototype.template = 'users/greeting';

  UserGreeting.prototype.className = 'greeting';

  UserGreeting.prototype.bindings = {
    '.first_name': 'first_name'
  };

  UserGreeting.prototype.initialize = function() {
    this.model = _fr.currentUser();
    _fr.vent.on("auth.change", this.render);
    return this.render();
  };

  UserGreeting.prototype.onRender = function() {
    var state;
    state = _fr.session.getState();
    if (state === FellRace.Models.UserSession.confirmedState || state === FellRace.Models.UserSession.unconfirmedState) {
      this.$el.show();
      return this.stickit();
    } else {
      return this.$el.hide();
    }
  };

  return UserGreeting;

})(Backbone.Marionette.ItemView);var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.UserMarker = (function(superClass) {
  extend(UserMarker, superClass);

  function UserMarker() {
    return UserMarker.__super__.constructor.apply(this, arguments);
  }

  UserMarker.prototype.defaultOptions = {
    clickable: false,
    draggable: false,
    icon: {
      scale: 8,
      path: google.maps.SymbolPath.CIRCLE,
      strokeColor: "blue",
      fillColor: "blue",
      fillOpacity: 0.6,
      strokeWeight: 0
    }
  };

  UserMarker.prototype.bindings = {
    position: {
      lat: "lat",
      lng: "lng"
    }
  };

  return UserMarker;

})(MapStick.Marker);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.Me = (function(superClass) {
  extend(Me, superClass);

  function Me() {
    this.newEvent = bind(this.newEvent, this);
    this.onRender = bind(this.onRender, this);
    return Me.__super__.constructor.apply(this, arguments);
  }

  Me.prototype.template = 'users/me';

  Me.prototype.className = 'user';

  Me.prototype.events = {
    "click a.add": "newEvent"
  };

  Me.prototype.bindings = {
    "a.me": {
      observe: "competitor",
      updateView: false,
      visible: function(val) {
        return val && !!val.id;
      },
      attributes: [
        {
          observe: "competitor",
          name: "href",
          onGet: function(val) {
            if (val) {
              return "/runners/" + val.id;
            }
          }
        }
      ]
    }
  };

  Me.prototype.initialize = function() {
    this.model = _fr.currentUser();
    return this.render();
  };

  Me.prototype.onRender = function() {
    var competitor_view, events_list;
    this.stickit();
    events_list = new FellRace.Views.EventsList({
      collection: _fr.events,
      el: this.$el.find(".events")
    });
    events_list.render();
    if (this.model.hasCompetitor()) {
      competitor_view = new FellRace.Views.CompetitorProfile({
        model: this.model.getCompetitor(),
        el: this.$el.find("#competitor")
      });
      return competitor_view.render();
    }
  };

  Me.prototype.newEvent = function() {
    return _fr.events.add({
      user_id: this.model.get("id")
    });
  };

  return Me;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.UserSignInOut = (function(superClass) {
  extend(UserSignInOut, superClass);

  function UserSignInOut() {
    this.onRender = bind(this.onRender, this);
    return UserSignInOut.__super__.constructor.apply(this, arguments);
  }

  UserSignInOut.prototype.template = 'users/sign_in_out';

  UserSignInOut.prototype.className = 'controls';

  UserSignInOut.prototype.bindings = {
    ".first_name": "first_name",
    ".last_name": "last_name"
  };

  UserSignInOut.prototype.initialize = function() {
    this.model = _fr.session;
    _fr.vent.on("auth.change", this.render);
    return this.render();
  };

  UserSignInOut.prototype.onRender = function() {
    if (_fr.session.signedIn()) {
      this.$el.find('.sign_in').hide();
      return this.$el.find('.sign_out').show();
    } else {
      this.$el.find('.sign_in').show();
      return this.$el.find('.sign_out').hide();
    }
  };

  return UserSignInOut;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FellRace.Views.UserSignupForm = (function(superClass) {
  extend(UserSignupForm, superClass);

  function UserSignupForm() {
    this.signIn = bind(this.signIn, this);
    this.signup = bind(this.signup, this);
    this.checkValidity = bind(this.checkValidity, this);
    this.deny = bind(this.deny, this);
    this.allow = bind(this.allow, this);
    this.observeState = bind(this.observeState, this);
    this.onRender = bind(this.onRender, this);
    return UserSignupForm.__super__.constructor.apply(this, arguments);
  }

  UserSignupForm.prototype.template = 'users/sign_up';

  UserSignupForm.prototype.events = {
    'submit form': 'signup',
    'click a.sign_in': "signIn"
  };

  UserSignupForm.prototype.bindings = {
    "#email": "email",
    "span.email": {
      observe: "email",
      update: "checkValidity"
    }
  };

  UserSignupForm.prototype.initialize = function(opts) {
    if (opts == null) {
      opts = {};
    }
    this._opts = opts;
    this.model = _fr.currentUser();
    return _fr.vent.on("auth.change", this.observeState);
  };

  UserSignupForm.prototype.onRender = function() {
    this._form = this.$el.find('form');
    return this.stickit();
  };

  UserSignupForm.prototype.observeState = function() {
    if (_fr.session.signedIn()) {
      return this.$el.hide();
    } else {
      return this.$el.show();
    }
  };

  UserSignupForm.prototype.allow = function() {
    return this._form.find('fieldset.user').slideDown();
  };

  UserSignupForm.prototype.deny = function() {
    return this._form.find('fieldset.user').slideUp();
  };

  UserSignupForm.prototype.checkValidity = function($el, value, model, options) {
    if (this._atter == null) {
      this._atter = new RegExp('@\\S');
    }
    if (this._dotter == null) {
      this._dotter = new RegExp('\\.\\S');
    }
    if (this._submit == null) {
      this._submit = this._form.find('input[type="submit"]');
    }
    if (this._notes == null) {
      this._notes = this._form.find('.note');
    }
    if (value && value !== "" && this._atter.test(value) && this._dotter.test(value)) {
      this._submit.enable();
      this._notes.show();
      $el.text(value + '.');
    } else {
      this._notes.hide();
      this._submit.disable();
      $el.text("this address.");
    }
    return value;
  };

  UserSignupForm.prototype.signup = function(e) {
    var attrs;
    if (e) {
      e.preventDefault();
    }
    this.$el.find('input[type="submit"]').disable();
    this.$el.find('.error').remove();
    this.$el.find('.help').remove();
    this.$el.find('.erratic').removeClass('error');
    attrs = _.extend(this.model.attributes, this._opts);
    return this.model.save(attrs, {
      success: (function(_this) {
        return function(model, data) {
          _fr.session.setUser(data);
          _fr.actionRegion.close();
          return $.notify("success", "Confirmation email sent to " + (_this.model.get("email")));
        };
      })(this),
      error: (function(_this) {
        return function(model, response) {
          var result;
          result = $.parseJSON(response.responseText);
          _(result.errors).each(function(errors, field) {
            return $("input." + field).addClass('erratic');
          });
          return _this.$el.find('input[type="submit"]').val('Sign up').removeClass('unavailable');
        };
      })(this)
    });
  };

  UserSignupForm.prototype.signIn = function() {
    return _fr.user_actions().signIn(this._opts);
  };

  return UserSignupForm;

})(Backbone.Marionette.ItemView);var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

FellRace.Views.UserSignupFormForRace = (function(superClass) {
  extend(UserSignupFormForRace, superClass);

  function UserSignupFormForRace() {
    this.signIn = bind(this.signIn, this);
    this.signup = bind(this.signup, this);
    this.checkValidity = bind(this.checkValidity, this);
    this.showOutcome = bind(this.showOutcome, this);
    this.checkSlug = bind(this.checkSlug, this);
    this.slugify = bind(this.slugify, this);
    this.check = bind(this.check, this);
    this.deny = bind(this.deny, this);
    this.allow = bind(this.allow, this);
    this.observeState = bind(this.observeState, this);
    this.onRender = bind(this.onRender, this);
    return UserSignupFormForRace.__super__.constructor.apply(this, arguments);
  }

  UserSignupFormForRace.prototype.template = 'users/sign_up_for_race';

  UserSignupFormForRace.prototype.events = {
    'submit form': 'signup',
    'click a.sign_in': "signIn"
  };

  UserSignupFormForRace.prototype.bindings = {
    "#email": "email",
    "#desired_slug": {
      observe: "desired_slug",
      onSet: "slugify"
    },
    ".availability": {
      observe: "desired_slug",
      update: "checkSlug"
    },
    "span.email": {
      observe: "email",
      update: "checkValidity"
    },
    "span.outcome": {
      observe: "desired_slug",
      onGet: "showOutcome"
    }
  };

  UserSignupFormForRace.prototype.initialize = function() {
    this.model = _fr.currentUser();
    _fr.vent.on("auth.change", this.observeState);
    return $.getJSON((_fr.apiUrl()) + "/races/taken", (function(_this) {
      return function(response) {
        _this.slugs = response;
        return _this.render();
      };
    })(this));
  };

  UserSignupFormForRace.prototype.onRender = function() {
    this._form = this.$el.find('form');
    return this.stickit();
  };

  UserSignupFormForRace.prototype.observeState = function() {
    if (_fr.session.signedIn()) {
      return this.$el.hide();
    } else {
      return this.$el.show();
    }
  };

  UserSignupFormForRace.prototype.allow = function() {
    return this._form.find('fieldset.user').slideDown();
  };

  UserSignupFormForRace.prototype.deny = function() {
    return this._form.find('fieldset.user').slideUp();
  };

  UserSignupFormForRace.prototype.check = function() {
    return this.checkSlug(this.$el.find("#slug").val());
  };

  UserSignupFormForRace.prototype.slugify = function(value, options) {
    return _.string.slugify(value);
  };

  UserSignupFormForRace.prototype.checkSlug = function($el, value, model, options) {
    value = _.string.slugify(value);
    this._flag = this.$el.find('.availability');
    if (value === "") {
      $el.removeClass('ok').removeClass('notok').text("Choose your subdomain:");
      return this.deny();
    } else if ((this.slugs != null) && indexOf.call(this.slugs, value) >= 0) {
      $el.removeClass('ok').addClass('notok').text(value + ".fellrace.org.uk is not available.");
      return this.deny();
    } else if (value.length < 3) {
      $el.removeClass('ok').addClass('notok').text("At least three letters, please");
      return this.deny();
    } else if (value.length > 12) {
      $el.removeClass('ok').addClass('notok').text("No more than 12 letters, please");
      return this.deny();
    } else {
      $el.removeClass('notok').addClass('ok').text(value + ".fellrace.org.uk is available.");
      return this.allow();
    }
  };

  UserSignupFormForRace.prototype.showOutcome = function(value) {
    if (value && value !== "") {
      return "to confirm your address and create " + value + ".fellrace.org.uk.";
    } else {
      return "to confirm your email address.";
    }
  };

  UserSignupFormForRace.prototype.checkValidity = function($el, value, model, options) {
    if (this._atter == null) {
      this._atter = new RegExp('@\\S');
    }
    if (this._dotter == null) {
      this._dotter = new RegExp('\\.\\S');
    }
    if (this._submit == null) {
      this._submit = this._form.find('input[type="submit"]');
    }
    if (this._notes == null) {
      this._notes = this._form.find('.note');
    }
    if (value && value !== "" && this._atter.test(value) && this._dotter.test(value)) {
      this._submit.enable();
      this._notes.show();
      $el.text(value + '.');
    } else {
      this._notes.hide();
      this._submit.disable();
      $el.text("this address.");
    }
    return value;
  };

  UserSignupFormForRace.prototype.signup = function(e) {
    if (e) {
      e.preventDefault();
    }
    this.$el.find('input[type="submit"]').disable();
    this.$el.find('.error').remove();
    this.$el.find('.help').remove();
    this.$el.find('.erratic').removeClass('error');
    return this.model.save(this.model.attributes, {
      success: (function(_this) {
        return function(model, data) {
          _fr.session.setUser(data);
          _fr.actionRegion.close();
          return $.notify("success", "Confirmation email sent to " + (_this.model.get("email")));
        };
      })(this),
      error: (function(_this) {
        return function(model, response) {
          var result;
          result = $.parseJSON(response.responseText);
          _(result.errors).each(function(errors, field) {
            return $("input." + field).addClass('erratic');
          });
          return _this.$el.find('input[type="submit"]').val('Sign up').removeClass('unavailable');
        };
      })(this)
    });
  };

  UserSignupFormForRace.prototype.signIn = function() {
    return _fr.user_actions().signIn();
  };

  return UserSignupFormForRace;

})(Backbone.Marionette.ItemView);$(function() {
  _.mixin(_.str.exports());
  $(document).on("click", "a:not([data-bypass])", function(e) {
    var href, prot;
    if (this.protocol !== "mailto:") {
      href = $(this).attr("href");
      if ($(this).attr("data-window")) {
        e.preventDefault();
        return window.open(href);
      } else {
        prot = this.protocol + "//";
        if (href && href.slice(0, prot.length) !== prot) {
          e.preventDefault();
          return _fr.navigate(href);
        }
      }
    }
  });
  console.log("ok go");
  return new FellRace.Application().start();
});

;(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['application'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div id='gmap'></div>\n<div id='graph'></div>\n<div id='content'>\n  <div id='main_content'></div>\n  <div id='user_controls'></div>\n</div>\n<div id='view_toggle'>\n  <a class='expand'>></a>\n  <a class='collapse'><</a>\n</div>\n<div id='notice'></div>\n<div id='action'></div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['attachments/admin_list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<span>\n  <a class='file_icon minimal'></a>\n</span>\n<span class='editable name' data-placeholder='file name'></span>\n<a class='delete'>\u232B</a>\n<input class='file' type='file'>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['attachments/empty'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("You can use this space to attach entry forms, fliers, maps, instructions or anything else you like. \n<a class='add add_attachment' href='#'>\n  add a file.\n</a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['attachments/list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='file_icon' data-window='true'></a>\n<a class='file_name' data-window='true'></a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['categories/option'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<label>\n  <input class='category' type='checkbox'>\n  <span class='name'></span>\n</label>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['categories/picker'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<h4>\n  Categories offered\n</h4>\n<div class='categories'>\n  <ul class='flat male'></ul>\n  <ul class='female flat'></ul>\n  <ul class='flat junior'></ul>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['checkpoints/admin_list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<span class='symbol unfixed'>o</span>\n<span class='pos'></span>\n<span class='editable name' data-placeholder='name'></span>\n<span class='gridref'></span>\n<a class='place'>add to map</a>\n<a class='delete'>\u232B</a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['checkpoints/empty'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("You can add checkpoints by typing in grid references here or by clicking on the map above.\n<a class='add add_checkpoint' href='#'>\n  add a checkpoint.\n</a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['checkpoints/list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='name'></a>\n<span class='gridref'></span>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['clubs/admin_row'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<td>\n  <span class='id'></span>\n</td>\n<td>\n  <span class='name'></span>\n</td>\n<td>\n  <span class='alias_of'></span>\n  <span class='not_merging'>\n    <a class='go merge_to microbutton'>merge to</a>\n    <a class='microbutton remove remove_alias'>x</a>\n  </span>\n  <a class='cancel_merge microbutton'>cancel</a>\n</td>\n<td>\n  <span class='display_name editable' data-placeholder='display name' data-plain></span>\n</td>\n<td>\n  <span class='editable full_name' data-placeholder='full name' data-plain></span>\n</td>\n<td>\n  <span class='editable short_name' data-placeholder='short name' data-plain></span>\n</td>\n<td>\n  <span class='not_merging'>\n    <a class='go merge microbutton'>complete merge</a>\n  </span>\n</td>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['clubs/admin_table'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<table class='clubs'>\n  <thead>\n    <tr>\n      <th>id</th>\n      <th>name</th>\n      <th>alias of</th>\n      <th>display name</th>\n      <th>full name</th>\n      <th>short name</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody></tbody>\n</table>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['clubs/link'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='name'></a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['clubs/list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='name'></a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['clubs/list'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<h1 class='title'>Clubs</h1>\n<div class='clubs'></div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['clubs/show'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<h1 class='name'></h1>\n<a class='website'>Club website</a>\n<div class='competitors'></div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['clubs/suggestion'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<span class='name'></span>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/admin'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='head'>\n  <div class='picture'></div>\n  <div class='title'>\n    <h2 class='name'>\n      <span class='forename'></span>\n      <span class='middlename'></span>\n      <span class='surname'></span>\n    </h2>\n    <div class='owner'>\n      <a class='cancel'>exit</a>\n    </div>\n  </div>\n</div>\n<div class='body'>\n  <p class='club onecol'>\n    <span class='col'>\n      <label for='club'>Club</label>\n      <input id='club_name' name='club_name' type='text'>\n    </span>\n    <span class='note'>\n      Your club should appear in the list of suggestions when you start typing.\n      If yours is not there, please give its full name. Choose 'Unattached' if no club.\n    </span>\n  </p>\n  <p>\n    <a class='button save'>save</a>\n  </p>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/competitor'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div id='competitor'></div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/entries'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<h3>Entries</h3>\n<table class='entries'>\n  <thead>\n    <tr>\n      <th class='date'>date</th>\n      <th class='race_name'>race</th>\n    </tr>\n  </thead>\n  <tbody></tbody>\n</table>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/entry'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<td class='date'>\n  <span class='date'></span>\n</td>\n<td class='race'>\n  <a class='race'></a>\n</td>\n<td>\n  <a class='cancel'>x</a>\n  <span class='cancelled'>cancelled</span>\n</td>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='name'></a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/main'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='main_name'></a>\n(\n<span class='main_club'></span>\n)\n<span class='main_gender'></span>\n<span class='main_dob'></span>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/match_row'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<td>\n  <a class='name'>\n    <span class='forename'></span>\n    <span class='middlename'></span>\n    <span class='surname'></span>\n  </a>\n</td>\n<td>\n  <span class='club'></span>\n</td>\n<td>\n  <a class='merge microbutton'>Merge</a>\n</td>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/match_table'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<h3>Matches</h3>\n<table class='matches'>\n  <thead>\n    <th>name</th>\n    <th>club</th>\n  </thead>\n  <tbody></tbody>\n</table>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/merge_row'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<td class='main_competitor'></td>\n<td>\ <<<<</td>\n<td class='duplicate'>\n  <a class='name'></a>\n  (\n  <span class='club'></span>\n  )\n  <span class='gender'></span>\n  <span class='dob'></span>\n</td>\n<td class='controls'>\n  <a class='accept'>Accept</a>\n  <a class='reject'>Reject</a>\n</td>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/merge_table'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<h1 class='title'>\n  <a class='back' href='/runners'><</a>\n  Competitor merge requests\n</h1>\n<table class='competitors'></table>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/performance'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<td class='date'>\n  <span class='date'></span>\n</td>\n<td class='race'>\n  <a class='race_name'></a>\n</td>\n<td class='time'>\n  <span class='time'></span>\n</td>\n<td class='pos'>\n  <span class='total_competitors'></span>\n  <span class='pos'></span>\n</td>\n<td class='winner'>\n  <a class='winner'></a>\n  <span class='winning_time'></span>\n</td>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/performances'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<h3>Results</h3>\n<table class='results'>\n  <thead>\n    <tr>\n      <th class='date'>date</th>\n      <th class='race_name'>race</th>\n      <th class='time'>time</th>\n      <th class='pos'>pos</th>\n      <th class='winner'>winner</th>\n    </tr>\n  </thead>\n  <tbody></tbody>\n</table>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/race'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      return $o.join("\n");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/results'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<nav>\n  <a id='by_date'>Date</a>\n  <a id='by_year'>Year</a>\n  <a id='by_category'>Category</a>\n</nav>\n<table id='results_by_race'></table>\n<table id='results_by_year'></table>\n<table id='results_by_category'></table>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/row'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<td>\n  <a class='name'></a>\n</td>\n<td class='club'></td>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/show'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='head'>\n  <div class='picture'></div>\n  <div class='title'>\n    <h2 class='name'>\n      <span class='forename'></span>\n      <span class='middlename'></span>\n      <span class='surname'></span>\n    </h2>\n    <div class='owner'>\n      <a class='edit'>edit</a>\n    </div>\n  </div>\n  <!-- .social -->\n  <!--   %a.fb facebook -->\n  <!--   %a.twit twitter -->\n  <!--   %a.strava strava -->\n</div>\n<div class='body'>\n  <div class='entries'></div>\n  <div class='results'></div>\n  <div class='matches'></div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['competitors/table'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<h1 class='title'>\n  <a class='back' href='/'><</a>\n  Find runners\n</h1>\n<div class='search_form'>\n  <span class='editable forename param' data-placeholder='forename'></span>\n  <span class='editable param surname' data-placeholder='surname'></span>\n  <!-- %span.club.editable{:data => {:placeholder => \"forename\"} -->\n  <a class='search' href=''>Search</a>\n</div>\n<div class='competitors'></div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['entries/admin_row'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<td>\n  <a class='name'>\n    <span class='fore'></span>\n    <span class='middle'></span>\n    <span class='sur'></span>\n  </a>\n</td>\n<td>\n  <span class='cat'></span>\n</td>\n<td>\n  <span class='club_name'></span>\n</td>\n<td>\n  <span class='paid_or_accepted'></span>\n</td>\n<td>\n  <a class='withdraw'>\n    withdraw\n  </a>\n</td>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['entries/admin_table'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<thead>\n  <tr>\n    <th>name</th>\n    <th>cat</th>\n    <th>club</th>\n    <th></th>\n  </tr>\n</thead>\n<tbody></tbody>");
      return $o.join("\n");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['entries/cancelled_admin_row'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<td>\n  <a class='name'>\n    <span class='fore'></span>\n    <span class='middle'></span>\n    <span class='sur'></span>\n  </a>\n</td>\n<td>\n  <span class='cat'></span>\n</td>\n<td>\n  <span class='club_name'></span>\n</td>\n<td>\n  <span class='paid_or_accepted'></span>\n</td>\n<td>\n  <a class='reinstate'>\n    reinstate\n  </a>\n</td>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['entries/edit_competitor'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<p class='name twocol'>\n  <span class='col'>\n    <label for='forename'>Forename</label>\n    <input id='forename' name='firstname' type='text'>\n  </span>\n  <span class='col last'>\n    <label for='surname'>Surname</label>\n    <input id='surname' name='surname' type='text'>\n  </span>\n</p>\n<p class='cat twocol'>\n  <span class='col'>\n    <label>\n      Gender\n    </label>\n    <input id='male' name='gender' type='radio' value='m'>\n    <label class='inline' for='male'>Male</label>\n    <input id='female' name='gender' type='radio' value='f'>\n    <label class='inline' for='female'>Female</label>\n    <br>\n  </span>\n  <span class='col last'>\n    <label for='dob'>Date of birth</label>\n    <input id='dob' name='dob' type='text' placeholder='YYYY-MM-DD'>\n  </span>\n  <span class='note'>\n    Race category will be based on your gender and age.\n  </span>\n</p>\n<p class='club onecol'>\n  <span class='col'>\n    <label for='club'>Club</label>\n    <input id='club_name' name='club_name' type='text'>\n  </span>\n  <span class='note'>\n    Your club should appear in the list of suggestions when you start typing.\n    If yours is not there, please give its full name. Choose 'Unattached' if no club.\n  </span>\n</p>\n<p class='contacts twocol'>\n  <span class='col'>\n    <label for='postal_address_line_1'>Address</label>\n    <input id='postal_address_line_1' name='address 1' type='text' placeholder='Line 1'>\n    <input id='postal_address_line_2' name='address 2' type='text' placeholder='Line 2'>\n    <input id='postal_town' name='city' type='text' placeholder='Post town'>\n    <input id='postcode' name='postalcode' type='text' placeholder='Postcode'>\n    <select id='postal_county'>\n      <option value=''>County...</option>\n      <option value='Avon'>Avon</option>\n      <option value='Bedfordshire'>Bedfordshire</option>\n      <option value='Berkshire'>Berkshire</option>\n      <option value='Borders'>Borders</option>\n      <option value='Buckinghamshire'>Buckinghamshire</option>\n      <option value='Cambridgeshire'>Cambridgeshire</option>\n      <option value='Central'>Central</option>\n      <option value='Cheshire'>Cheshire</option>\n      <option value='Cleveland'>Cleveland</option>\n      <option value='Clwyd'>Clwyd</option>\n      <option value='Cornwall'>Cornwall</option>\n      <option value='County Antrim'>County Antrim</option>\n      <option value='County Armagh'>County Armagh</option>\n      <option value='County Down'>County Down</option>\n      <option value='County Fermanagh'>County Fermanagh</option>\n      <option value='County Londonderry'>County Londonderry</option>\n      <option value='County Tyrone'>County Tyrone</option>\n      <option value='Cumbria'>Cumbria</option>\n      <option value='Derbyshire'>Derbyshire</option>\n      <option value='Devon'>Devon</option>\n      <option value='Dorset'>Dorset</option>\n      <option value='Dumfries and Galloway'>Dumfries and Galloway</option>\n      <option value='Durham'>Durham</option>\n      <option value='Dyfed'>Dyfed</option>\n      <option value='East Sussex'>East Sussex</option>\n      <option value='Essex'>Essex</option>\n      <option value='Fife'>Fife</option>\n      <option value='Gloucestershire'>Gloucestershire</option>\n      <option value='Grampian'>Grampian</option>\n      <option value='Greater Manchester'>Greater Manchester</option>\n      <option value='Gwent'>Gwent</option>\n      <option value='Gwynedd County'>Gwynedd County</option>\n      <option value='Hampshire'>Hampshire</option>\n      <option value='Herefordshire'>Herefordshire</option>\n      <option value='Hertfordshire'>Hertfordshire</option>\n      <option value='Highlands and Islands'>Highlands and Islands</option>\n      <option value='Humberside'>Humberside</option>\n      <option value='Isle of Wight'>Isle of Wight</option>\n      <option value='Kent'>Kent</option>\n      <option value='Lancashire'>Lancashire</option>\n      <option value='Leicestershire'>Leicestershire</option>\n      <option value='Lincolnshire'>Lincolnshire</option>\n      <option value='Lothian'>Lothian</option>\n      <option value='Merseyside'>Merseyside</option>\n      <option value='Mid Glamorgan'>Mid Glamorgan</option>\n      <option value='Norfolk'>Norfolk</option>\n      <option value='North Yorkshire'>North Yorkshire</option>\n      <option value='Northamptonshire'>Northamptonshire</option>\n      <option value='Northumberland'>Northumberland</option>\n      <option value='Nottinghamshire'>Nottinghamshire</option>\n      <option value='Oxfordshire'>Oxfordshire</option>\n      <option value='Powys'>Powys</option>\n      <option value='Rutland'>Rutland</option>\n      <option value='Shropshire'>Shropshire</option>\n      <option value='Somerset'>Somerset</option>\n      <option value='South Glamorgan'>South Glamorgan</option>\n      <option value='South Yorkshire'>South Yorkshire</option>\n      <option value='Staffordshire'>Staffordshire</option>\n      <option value='Strathclyde'>Strathclyde</option>\n      <option value='Suffolk'>Suffolk</option>\n      <option value='Surrey'>Surrey</option>\n      <option value='Tayside'>Tayside</option>\n      <option value='Tyne and Wear'>Tyne and Wear</option>\n      <option value='Warwickshire'>Warwickshire</option>\n      <option value='West Glamorgan'>West Glamorgan</option>\n      <option value='West Midlands'>West Midlands</option>\n      <option value='West Sussex'>West Sussex</option>\n      <option value='West Yorkshire'>West Yorkshire</option>\n      <option value='Wiltshire'>Wiltshire</option>\n      <option value='Worcestershire'>Worcestershire</option>\n    </select>\n    <select id='postal_country'>\n      <option value='AF'>Afghanistan</option>\n      <option value='AX'>Åland Islands</option>\n      <option value='AL'>Albania</option>\n      <option value='DZ'>Algeria</option>\n      <option value='AS'>American Samoa</option>\n      <option value='AD'>Andorra</option>\n      <option value='AO'>Angola</option>\n      <option value='AI'>Anguilla</option>\n      <option value='AQ'>Antarctica</option>\n      <option value='AG'>Antigua and Barbuda</option>\n      <option value='AR'>Argentina</option>\n      <option value='AM'>Armenia</option>\n      <option value='AW'>Aruba</option>\n      <option value='AU'>Australia</option>\n      <option value='AT'>Austria</option>\n      <option value='AZ'>Azerbaijan</option>\n      <option value='BS'>Bahamas</option>\n      <option value='BH'>Bahrain</option>\n      <option value='BD'>Bangladesh</option>\n      <option value='BB'>Barbados</option>\n      <option value='BY'>Belarus</option>\n      <option value='BE'>Belgium</option>\n      <option value='BZ'>Belize</option>\n      <option value='BJ'>Benin</option>\n      <option value='BM'>Bermuda</option>\n      <option value='BT'>Bhutan</option>\n      <option value='BO'>Bolivia, Plurinational State of</option>\n      <option value='BQ'>Bonaire, Sint Eustatius and Saba</option>\n      <option value='BA'>Bosnia and Herzegovina</option>\n      <option value='BW'>Botswana</option>\n      <option value='BV'>Bouvet Island</option>\n      <option value='BR'>Brazil</option>\n      <option value='IO'>British Indian Ocean Territory</option>\n      <option value='BN'>Brunei Darussalam</option>\n      <option value='BG'>Bulgaria</option>\n      <option value='BF'>Burkina Faso</option>\n      <option value='BI'>Burundi</option>\n      <option value='KH'>Cambodia</option>\n      <option value='CM'>Cameroon</option>\n      <option value='CA'>Canada</option>\n      <option value='CV'>Cape Verde</option>\n      <option value='KY'>Cayman Islands</option>\n      <option value='CF'>Central African Republic</option>\n      <option value='TD'>Chad</option>\n      <option value='CL'>Chile</option>\n      <option value='CN'>China</option>\n      <option value='CX'>Christmas Island</option>\n      <option value='CC'>Cocos (Keeling) Islands</option>\n      <option value='CO'>Colombia</option>\n      <option value='KM'>Comoros</option>\n      <option value='CG'>Congo</option>\n      <option value='CD'>Congo, the Democratic Republic of the</option>\n      <option value='CK'>Cook Islands</option>\n      <option value='CR'>Costa Rica</option>\n      <option value='CI'>Côte d'Ivoire</option>\n      <option value='HR'>Croatia</option>\n      <option value='CU'>Cuba</option>\n      <option value='CW'>Cura\u00e7ao</option>\n      <option value='CY'>Cyprus</option>\n      <option value='CZ'>Czech Republic</option>\n      <option value='DK'>Denmark</option>\n      <option value='DJ'>Djibouti</option>\n      <option value='DM'>Dominica</option>\n      <option value='DO'>Dominican Republic</option>\n      <option value='EC'>Ecuador</option>\n      <option value='EG'>Egypt</option>\n      <option value='SV'>El Salvador</option>\n      <option value='GQ'>Equatorial Guinea</option>\n      <option value='ER'>Eritrea</option>\n      <option value='EE'>Estonia</option>\n      <option value='ET'>Ethiopia</option>\n      <option value='FK'>Falkland Islands (Malvinas)</option>\n      <option value='FO'>Faroe Islands</option>\n      <option value='FJ'>Fiji</option>\n      <option value='FI'>Finland</option>\n      <option value='FR'>France</option>\n      <option value='GF'>French Guiana</option>\n      <option value='PF'>French Polynesia</option>\n      <option value='TF'>French Southern Territories</option>\n      <option value='GA'>Gabon</option>\n      <option value='GM'>Gambia</option>\n      <option value='GE'>Georgia</option>\n      <option value='DE'>Germany</option>\n      <option value='GH'>Ghana</option>\n      <option value='GI'>Gibraltar</option>\n      <option value='GR'>Greece</option>\n      <option value='GL'>Greenland</option>\n      <option value='GD'>Grenada</option>\n      <option value='GP'>Guadeloupe</option>\n      <option value='GU'>Guam</option>\n      <option value='GT'>Guatemala</option>\n      <option value='GG'>Guernsey</option>\n      <option value='GN'>Guinea</option>\n      <option value='GW'>Guinea-Bissau</option>\n      <option value='GY'>Guyana</option>\n      <option value='HT'>Haiti</option>\n      <option value='HM'>Heard Island and McDonald Islands</option>\n      <option value='VA'>Holy See (Vatican City State)</option>\n      <option value='HN'>Honduras</option>\n      <option value='HK'>Hong Kong</option>\n      <option value='HU'>Hungary</option>\n      <option value='IS'>Iceland</option>\n      <option value='IN'>India</option>\n      <option value='ID'>Indonesia</option>\n      <option value='IR'>Iran, Islamic Republic of</option>\n      <option value='IQ'>Iraq</option>\n      <option value='IE'>Ireland</option>\n      <option value='IM'>Isle of Man</option>\n      <option value='IL'>Israel</option>\n      <option value='IT'>Italy</option>\n      <option value='JM'>Jamaica</option>\n      <option value='JP'>Japan</option>\n      <option value='JE'>Jersey</option>\n      <option value='JO'>Jordan</option>\n      <option value='KZ'>Kazakhstan</option>\n      <option value='KE'>Kenya</option>\n      <option value='KI'>Kiribati</option>\n      <option value='KP'>Korea, Democratic People's Republic of</option>\n      <option value='KR'>Korea, Republic of</option>\n      <option value='KW'>Kuwait</option>\n      <option value='KG'>Kyrgyzstan</option>\n      <option value='LA'>Lao People's Democratic Republic</option>\n      <option value='LV'>Latvia</option>\n      <option value='LB'>Lebanon</option>\n      <option value='LS'>Lesotho</option>\n      <option value='LR'>Liberia</option>\n      <option value='LY'>Libya</option>\n      <option value='LI'>Liechtenstein</option>\n      <option value='LT'>Lithuania</option>\n      <option value='LU'>Luxembourg</option>\n      <option value='MO'>Macao</option>\n      <option value='MK'>Macedonia, the former Yugoslav Republic of</option>\n      <option value='MG'>Madagascar</option>\n      <option value='MW'>Malawi</option>\n      <option value='MY'>Malaysia</option>\n      <option value='MV'>Maldives</option>\n      <option value='ML'>Mali</option>\n      <option value='MT'>Malta</option>\n      <option value='MH'>Marshall Islands</option>\n      <option value='MQ'>Martinique</option>\n      <option value='MR'>Mauritania</option>\n      <option value='MU'>Mauritius</option>\n      <option value='YT'>Mayotte</option>\n      <option value='MX'>Mexico</option>\n      <option value='FM'>Micronesia, Federated States of</option>\n      <option value='MD'>Moldova, Republic of</option>\n      <option value='MC'>Monaco</option>\n      <option value='MN'>Mongolia</option>\n      <option value='ME'>Montenegro</option>\n      <option value='MS'>Montserrat</option>\n      <option value='MA'>Morocco</option>\n      <option value='MZ'>Mozambique</option>\n      <option value='MM'>Myanmar</option>\n      <option value='NA'>Namibia</option>\n      <option value='NR'>Nauru</option>\n      <option value='NP'>Nepal</option>\n      <option value='NL'>Netherlands</option>\n      <option value='NC'>New Caledonia</option>\n      <option value='NZ'>New Zealand</option>\n      <option value='NI'>Nicaragua</option>\n      <option value='NE'>Niger</option>\n      <option value='NG'>Nigeria</option>\n      <option value='NU'>Niue</option>\n      <option value='NF'>Norfolk Island</option>\n      <option value='MP'>Northern Mariana Islands</option>\n      <option value='NO'>Norway</option>\n      <option value='OM'>Oman</option>\n      <option value='PK'>Pakistan</option>\n      <option value='PW'>Palau</option>\n      <option value='PS'>Palestine, State of</option>\n      <option value='PA'>Panama</option>\n      <option value='PG'>Papua New Guinea</option>\n      <option value='PY'>Paraguay</option>\n      <option value='PE'>Peru</option>\n      <option value='PH'>Philippines</option>\n      <option value='PN'>Pitcairn</option>\n      <option value='PL'>Poland</option>\n      <option value='PT'>Portugal</option>\n      <option value='PR'>Puerto Rico</option>\n      <option value='QA'>Qatar</option>\n      <option value='RE'>Réunion</option>\n      <option value='RO'>Romania</option>\n      <option value='RU'>Russian Federation</option>\n      <option value='RW'>Rwanda</option>\n      <option value='BL'>Saint Barthélemy</option>\n      <option value='SH'>Saint Helena, Ascension and Tristan da Cunha</option>\n      <option value='KN'>Saint Kitts and Nevis</option>\n      <option value='LC'>Saint Lucia</option>\n      <option value='MF'>Saint Martin (French part)</option>\n      <option value='PM'>Saint Pierre and Miquelon</option>\n      <option value='VC'>Saint Vincent and the Grenadines</option>\n      <option value='WS'>Samoa</option>\n      <option value='SM'>San Marino</option>\n      <option value='ST'>Sao Tome and Principe</option>\n      <option value='SA'>Saudi Arabia</option>\n      <option value='SN'>Senegal</option>\n      <option value='RS'>Serbia</option>\n      <option value='SC'>Seychelles</option>\n      <option value='SL'>Sierra Leone</option>\n      <option value='SG'>Singapore</option>\n      <option value='SX'>Sint Maarten (Dutch part)</option>\n      <option value='SK'>Slovakia</option>\n      <option value='SI'>Slovenia</option>\n      <option value='SB'>Solomon Islands</option>\n      <option value='SO'>Somalia</option>\n      <option value='ZA'>South Africa</option>\n      <option value='GS'>South Georgia and the South Sandwich Islands</option>\n      <option value='SS'>South Sudan</option>\n      <option value='ES'>Spain</option>\n      <option value='LK'>Sri Lanka</option>\n      <option value='SD'>Sudan</option>\n      <option value='SR'>Suriname</option>\n      <option value='SJ'>Svalbard and Jan Mayen</option>\n      <option value='SZ'>Swaziland</option>\n      <option value='SE'>Sweden</option>\n      <option value='CH'>Switzerland</option>\n      <option value='SY'>Syrian Arab Republic</option>\n      <option value='TW'>Taiwan, PoC</option>\n      <option value='TJ'>Tajikistan</option>\n      <option value='TZ'>Tanzania, United Republic of</option>\n      <option value='TH'>Thailand</option>\n      <option value='TL'>Timor-Leste</option>\n      <option value='TG'>Togo</option>\n      <option value='TK'>Tokelau</option>\n      <option value='TO'>Tonga</option>\n      <option value='TT'>Trinidad and Tobago</option>\n      <option value='TN'>Tunisia</option>\n      <option value='TR'>Turkey</option>\n      <option value='TM'>Turkmenistan</option>\n      <option value='TC'>Turks and Caicos Islands</option>\n      <option value='TV'>Tuvalu</option>\n      <option value='UG'>Uganda</option>\n      <option value='UA'>Ukraine</option>\n      <option value='AE'>United Arab Emirates</option>\n      <option value='GB'>United Kingdom</option>\n      <option value='US'>United States</option>\n      <option value='UM'>United States Minor Outlying Islands</option>\n      <option value='UY'>Uruguay</option>\n      <option value='UZ'>Uzbekistan</option>\n      <option value='VU'>Vanuatu</option>\n      <option value='VE'>Venezuela, Bolivarian Republic of</option>\n      <option value='VN'>Viet Nam</option>\n      <option value='VG'>Virgin Islands, British</option>\n      <option value='VI'>Virgin Islands, U.S.</option>\n      <option value='WF'>Wallis and Futuna</option>\n      <option value='EH'>Western Sahara</option>\n      <option value='YE'>Yemen</option>\n      <option value='ZM'>Zambia</option>\n      <option value='ZW'>Zimbabwe</option>\n    </select>\n  </span>\n  <span class='col'>\n    <span class='field'>\n      <label for='email'>Email</label>\n      <input id='email' name='email' type='email' disabled='disabled'>\n    </span>\n    <span class='field'>\n      <label for='phone'>Phone</label>\n      <input id='phone' name='phone' type='text'>\n    </span>\n    <span class='field'>\n      <label for='mobile'>Mobile</label>\n      <input id='mobile' name='mobile phone' type='text'>\n    </span>\n  </span>\n</p>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['entries/edit_payment'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = function(text, escape) {
        return ("" + text).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&#39;').replace(/\//g, '&#47;').replace(/"/g, '&quot;');
      };
      $c = function(text) {
        switch (text) {
          case null:
          case void 0:
            return '';
          case true:
          case false:
            return '' + text;
          default:
            return text;
        }
      };
      $o = [];
      $o.push("<h3 class='secure'>\n  Payment details\n</h3>\n<p class='onecol'>\n  <span class='col'>\n    <label for='card_number'>\n      Card number\n      <span class='amex card'></span>\n      <span class='card mastercard'></span>\n      <span class='card visa'></span>\n    </label>\n    <input id='card_number' type='text' placeholder='Just the numbers, please'>\n  </span>\n</p>\n<p class='threecol'>\n  <span class='col'>\n    <label for='expiry_month'>Expires</label>\n    <input class='month' id='expiry_month' name='expiry-month' type='text' limit='" + ($e($c(2))) + "' placeholder='MM'>\n    <input class='year' id='expiry_year' name='expiry-year' type='text' limit='" + ($e($c(4))) + "' placeholder='YY'>\n  </span>\n  <span class='col'>\n    <label for='cvc'>CVC</label>\n    <input class='cvc' id='cvc' name='cvc' type='text' limit='" + ($e($c(3))) + "' placeholder='123'>\n  </span>\n  <span class='col'>\n    <br>\n    <a class='button create'>Enter race</a>\n  </span>\n</p>\n<p>\n  <span class='error_message'></span>\n</p>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['entries/my_entry'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='big close'></a>\n<h2>\n  My entry:\n  <a class='race_name'></a>\n  <span class='instance_name'></span>\n</h2>\n<p>\n  You have entered\n  <span class='race_name'></span>\n  <span class='instance_name'></span>\n  \. You can see yourself in the entry list\n  <a class='entry_list'>here</a>\n  \, but if the entry is brand new, you may need to reload the page.\n</p>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['entries/new'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<p>\n  Please check that the details shown below are correct and fill in anything that we don't know yet.\n  All your answers will be remembered for next time.\n</p>\n<form>\n  <section class='competitor'></section>\n  <section class='affirmation'>\n    <p>\n      Please read the following carefully and then check the box below to indicate your agreement:\n    </p>\n    <ul>\n      <li>\n        I accept the hazards inherent in fell running and acknowledge that I am entering and running this race at my own risk. \n      </li>\n      <li>\n        I confirm that I am aware of the rules imposed on me by the Race Organiser and that I will comply with them. \n      </li>\n      <li>\n        I confirm that I have read and will comply with the \n        <a href='http://fellrunner.org.uk/pdf/committee/14_Competitors_Safety_Rules_and_Equipment.pdf' target='_blank'>\n          Fell Running - Requirements for Runners. \n        </a>\n      </li>\n      <li>\n        I acknowledge and agree that I am responsible for determining whether I have the skills equipment and fitness to participate in this event. \n      </li>\n      <li>\n        I accept that neither the Race Organiser nor the Fell Runners Association shall be liable to me for any injury, loss or damage of any nature to me or my property arising out of my participation in this race (other than in respect of death or personal injury as a result of their negligence).\n      </li>\n    </ul>\n  </section>\n  <p>\n    Please also note that purchases on fellrace.org.uk are not refundable except at the discretion of the race organiser.\n    See our \n    <a href='/faq/terms'>terms and conditions </a>\n    for more information.\n  </p>\n  <p>\n    <input id='terms_accepted' type='checkbox'>\n    <label class='warning' for='terms_accepted'>I understand and accept these terms</label>\n  </p>\n  <section class='contact'>\n    <p class='emergency twocol'>\n      <span class='col'>\n        <label for='emergency_contact'>Emergency contact on the day</label>\n        <input id='emergency_contact_name' type='text'>\n      </span>\n      <span class='col last'>\n        <label for='emergency_contact_phone'>Phone number</label>\n        <input id='emergency_contact_phone' type='text'>\n      </span>\n    </p>\n  </section>\n  <section class='payment'></section>\n  <p class='footnote'>\n    Your card will be charged a total of\n    <strong>\n      <span class='currency' id='amount'></span>\n    </strong>\n    which includes a processing fee of \n    <span class='currency' id='deduction'></span>\n    See the\n    <a href='/faq/online_entries'>online payments page</a>\n    for details of where that goes.\n  </p>\n  <p class='warning'>\n    We're going to change this form soon so that you can enter more than one race and buy entries for other people.\n    That should happen over Christmas. If anything else goes wrong or should work better, please\n    <a href='mailto:will@spanner.org'>let Will know</a>\n    right away.\n  </p>\n</form>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['entries/no_entry_row'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = function(text, escape) {
        return ("" + text).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&#39;').replace(/\//g, '&#47;').replace(/"/g, '&quot;');
      };
      $c = function(text) {
        switch (text) {
          case null:
          case void 0:
            return '';
          case true:
          case false:
            return '' + text;
          default:
            return text;
        }
      };
      $o = [];
      $o.push("<td colspan='" + ($e($c(5))) + "'>\n  <span class='waiter'>\n    Either this is still loading or you have no entries yet.\n  </span>\n</td>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['entries/row'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = function(text, escape) {
        return ("" + text).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&#39;').replace(/\//g, '&#47;').replace(/"/g, '&quot;');
      };
      $c = function(text) {
        switch (text) {
          case null:
          case void 0:
            return '';
          case true:
          case false:
            return '' + text;
          default:
            return text;
        }
      };
      $o = [];
      $o.push("<td class='name'>\n  <a class='name'>\n    <span class='fore'></span>\n    <span class='sur'></span>\n  </a>\n</td>\n<td class='cat'></td>\n<td class='club' colspan='" + ($e($c(2))) + "'></td>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['entries/table'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<thead>\n  <tr>\n    <th>name</th>\n    <th>cat</th>\n    <th>club</th>\n    <th>\n      <input class='filter' type='text' name='filter' placeholder='Filter...'>\n    </th>\n  </tr>\n</thead>\n<tbody></tbody>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['index'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='head'>\n  <div class='home picture'></div>\n  <div class='title'>\n    <h2 class='name on_picture'>\n      Welcome!\n    </h2>\n  </div>\n</div>\n<div class='welcome'>\n  <div class='getting_started'>\n    <p>\n      <strong>\n        fellrace.org.uk\n      </strong>\n      provides free sites for fell races.\n      Each race gets an address like\n      <a class='sample' href='/races/caw'>caw.fellrace.org.uk</a>\n      and a set of editing and map-drawing tools that will get you up and running in a few minutes.\n      It&rsquo;s built purely for fell races, by \n      <a href='/faq/about'>three fell runners</a>\n      who like maps and are trying very hard to avoid doing their real work.\n    </p>\n    <p class='get_yours'>\n      <a class='sign_up_for_event'>\n        Get your race page here\n        &#9656;\n      </a>\n    </p>\n  </div>\n  <div id='instances'>\n    <h2>Coming up</h2>\n    <div id='future_instances'></div>\n    <h2>Recent</h2>\n    <div id='past_instances'></div>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/add_results'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("This is where you upload your results.\nPlease save them as a CSV file with column headers in the top row.\n<a class='add add_instance'>\n  upload a file\n</a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/admin_entries_import'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<label class='microbutton upload' for='entries_file'>▲ import</label>\n<input class='file' id='entries_file' type='file' style='display:none' accept='text/csv'>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/admin_future_list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='name'></a>\n<span class='date'></span>\n<span class='time'></span>\n<span class='note total_entries'></span>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/admin_future'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='close'></a>\n<div class='header'>\n  <h2>\n    <a class='race_name'></a>\n    <span class='instance_name'></span>\n  </h2>\n  <div class='date_and_time'>\n    <p>\n      Race date:\n      <span class='calendar'></span>\n      <span class='date race_date'></span>\n      at\n      <span class='clock'></span>\n      <span class='editable time' data-attributes='time' data-placeholder='hh:mm'></span>\n      <br>\n      <input id='limited_entry' type='checkbox'>Entry limit:</input>\n      <span class='editable entry_limit' data-placeholder='e.g. 500'></span>\n    </p>\n  </div>\n</div>\n<div class='dashboard'>\n  <div class='row'>\n    <div class='block ct-chart entries_chart'>\n      <span class='centered total total_count'></span>\n    </div>\n    <div class='block categories_chart ct-chart double'></div>\n  </div>\n  <div class='row'>\n    <div class='income'>\n      <h4>\n        Online income:\n      </h4>\n      <p>\n        <span class='online_total_income verylarge'></span>\n        <span class='online_total_fee'></span>\n      </p>\n    </div>\n    <h4>\n      <a class='more toggle' data-toggle='.entry_config'>\n        Entry configuration\n      </a>\n    </h4>\n  </div>\n  <div class='entry_config toggled'>\n    <div class='row'>\n      <div class='block narrow online optional'>\n        <p>\n          <input id='eod' type='checkbox'>\n          <label for='eod'>Entry on the day</label>\n        </p>\n        <p class='eod_details'>\n          Entry fee:\n          <span class='currency editable eod_fee' data-placeholder='0.00'></span>\n        </p>\n      </div>\n      <div class='block narrow optional postal'>\n        <p>\n          <input id='postal_entry' type='checkbox'>\n          <label for='postal_entry'>Postal entry</label>\n        </p>\n        <div class='postal_details'>\n          <p>\n            <span class='date postal_entry_opening'></span>\n            to\n            <br>\n            <span class='date postal_entry_closing'></span>\n          </p>\n          <p class='fee'>\n            Postal fee:\n            <span class='currency editable postal_entry_fee' data-placeholder='0.00'></span>\n          </p>\n          <p class='entry_form'></p>\n        </div>\n      </div>\n      <div class='block narrow online optional'>\n        <p>\n          <input id='online_entry' type='checkbox'>\n          <label for='online_entry'>Online entry</label>\n          <sup class='warning'>\n            testing\n          </sup>\n        </p>\n        <div class='online_details'>\n          <p>\n            <span class='date online_entry_opening'></span>\n            to\n            <br>\n            <span class='date online_entry_closing'></span>\n          </p>\n          <p>\n            Online fee:\n            <span class='currency editable online_entry_fee' data-placeholder='0.00'></span>\n          </p>\n        </div>\n      </div>\n    </div>\n    <div class='category_picker'></div>\n  </div>\n</div>\n<div class='entries'>\n  <div class='controls'>\n    <span class='entries_import'></span>\n    <span>\n      <a class='autodownload microbutton'>▼ for AutoDownload</a>\n    </span>\n    <span>\n      <a class='export_multisport microbutton'>▼ for MultiSport</a>\n    </span>\n    <span>\n      <a class='export_all microbutton'>▼ CSV data</a>\n    </span>\n  </div>\n  <h2>\n    Entries\n  </h2>\n  <div class='all_entries'>\n    <table class='entries'></table>\n    <h3>Withdrawn entries</h3>\n    <table class='cancelled_entries'></table>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/admin_past_list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='name'></a>\n<span class='note total'></span>\n<span class='splits'></span>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/admin_past'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='big close'></a>\n<h2>\n  <a class='race_name'></a>\n  <span class='instance_name'></span>\n</h2>\n<h3>\n  <span class='calendar'></span>\n  <span class='date'></span>\n  at\n  <span class='clock'></span>\n  <span class='editable time' data-placeholder='hh:mm'></span>\n</h3>\n<div class='report'>\n  <h3>Race report</h3>\n  <p class='editable report' data-placeholder='Please give a report of up to 200 words. This will appear at the top of your results list.'></p>\n  <p class='note'>\n    (This is a good place to prepare your report for the Fellrunner)\n  </p>\n</div>\n<input id='excluded' name='excluded' type='checkbox'>\n<label class='excluded' for='excluded'>Exclude from records</label>\n<span class='note'>(tick if a short/alternative course was run)</span>\n<div class='results'>\n  <h3>Results</h3>\n  <div class='results_file'></div>\n  <div class='results_preview'></div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/admin_postal_entry_form'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<input class='file' id='picker' type='file' accept='application/pdf'>\n<label class='pick' for='picker'>Upload entry form</label>\n<span class='nofile note'>PDFs only please</span>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/category_entry_size'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<td>\n  <span class='name'></span>\n</td>\n<td>\n  <span class='size'></span>\n</td>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/club_size'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<td>\n  <span class='name'></span>\n</td>\n<td>\n  <span class='size'></span>\n</td>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/enter'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='big close'></a>\n<h2>\n  Enter race:\n  <a class='race_name'></a>\n  <span class='instance_name'></span>\n</h2>\n<section class='entry'></section>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/future_list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='name'></a>\n<span class='date'></span>\n<span class='time'></span>\n<span class='note total'></span>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/future'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='big close'></a>\n<h2>\n  <a class='race_name'></a>\n  <span class='instance_name'></span>\n  <a class='edit microbutton'>edit</a>\n</h2>\n<div class='basic_details'>\n  <span class='date race_date'></span>\n  at\n  <span class='time'></span>\n  <br>\n  Entries:\n  <span class='entry_count'></span>\n  <span class='limit'>\n    of the allowed\n    <span class='entry_limit'></span>\n  </span>\n</div>\n<div class='dashboard'>\n  <div class='row'>\n    <div class='block clubs_chart ct-chart'>\n      <span class='centered total total_count'></span>\n    </div>\n    <div class='block categories_chart ct-chart double'></div>\n  </div>\n</div>\n<p class='full'>\n  <span class='warning'>This race is full! No more entries will be accepted.</span>\n</p>\n<div class='not_full'>\n  <p class='eod'>\n    <span class='heading'>Entry on the day:</span>\n    <span class='currency eod_fee'></span>\n  </p>\n  <p class='postal'>\n    <span class='heading'>Postal entry:</span>\n    <span class='currency postal_entry_fee'></span>\n    <span>\n      from\n      <span class='date postal_entry_opening'></span>\n      to\n      <span class='date postal_entry_closing'></span>\n    </span>\n    <a class='entry_form file_icon pdf' target='_blank'>download form</a>\n  </p>\n  <p class='online'>\n    <span class='heading'>Online entry:</span>\n    <span class='currency online_entry_fee'></span>\n    <span>\n      from\n      <span class='date online_entry_opening'></span>\n      to\n      <span class='date online_entry_closing'></span>\n    </span>\n    <a class='button enter'>enter</a>\n  </p>\n</div>\n<div class='entries'>\n  <h3>\n    Entries\n  </h3>\n  <table class='entries'></table>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/index/future'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='race_link'>\n  <span class='profile'></span>\n  <span class='race_name'></span>\n  <span class='date'></span>\n  <a class='online_entries opener'>Online entries open</a>\n</a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/index/past'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='race_link'>\n  <span class='profile'></span>\n  <span class='race_name'></span>\n  <span class='date'></span>\n</a>\n<a class='opener results_link'>\n  results\n</a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/new'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='close'></a>\n<h2>\n  <span class='race_name'></span>\n</h2>\n<p class='twocol'>\n  <span class='col date'>\n    <label for='date'>Date</label>\n    <input class='date' id='date' type='text' name='date' placeholder='DD MMM YYYY'>\n  </span>\n  <span class='col name'>\n    <label for='name'>Name</label>\n    <input id='name' type='text' name='name' placeholder='name'>\n  </span>\n</p>\n<p class='name onecol'>\n  <span class='col'>\n    <span class='error_message taken'>There is already a race with this name.</span>\n    <span class='info name_info'>\n      <span>Please enter a name for the race. The year</span>\n      <span class='year'></span>\n      will probably do.\n    </span>\n  </span>\n</p>\n<p>\n  <a class='button cancel'>Cancel</a>\n  <a class='button save'>Save and continue</a>\n</p>\n<p class='club'></p>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/past_list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='name opener'></a>\n<span class='note total'></span>\n<span class='splits'></span>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/results_file'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<span class='file_name'></span>\n<input class='file' id='picker' type='file' accept='.csv' style='display:none;'>\n<label class='button pick' for='picker'>\n  Upload CSV results file\n</label>\n<div class='confirmation'>\n  <span class='filestatus'></span>\n  <span class='filename'></span>\n  <br>\n  <span class='filesize'></span>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/results_preview'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<table id='results_table'></table>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/results'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='big close'></a>\n<h2>\n  <a class='race_name'></a>\n  <span class='instance_name'></span>\n  <a class='edit microbutton'>edit</a>\n  <a class='addendum show_splits'>\n    show splits\n  </a>\n  <a class='addendum hide_splits'>\n    hide splits\n  </a>\n  <input class='filter' type='text' name='filter' placeholder='Filter...'>\n</h2>\n<div id='results_file'>\n  <p class='download'>\n    <a class='file_icon'></a>\n  </p>\n</div>\n<p class='summary'></p>\n<table id='results_table'></table>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['instances/show'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("Date\n<span class='day'></span>\n\-\n<span class='month'></span>\n\-\n<span class='year'></span>\nTime\n<span class='time'></span>\n<div id='past'>\n  <div class='results'>\n    <h3>Results</h3>\n    <span class='info total'></span>\n  </div>\n  <div class='report'>\n    <h3>Report</h3>\n    <p class='report'></p>\n  </div>\n</div>\n<div id='future'>\n  <div id='entry_details'>\n    <div class='fee'>\n      Fee\n      <span class='entry_fee'></span>\n    </div>\n    <div class='limit'>\n      Limit\n      <span class='entry_limit'></span>\n    </div>\n    <div class='opening'>\n      Entries open on\n      <span class='entry_opening'></span>\n    </div>\n    <div class='closing'>\n      Entries close on\n      <span class='entry_closing'></span>\n    </div>\n    <div class='entries'></div>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['links/admin_list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<span class='editable title' data-placeholder='text'></span>\n<span class='note'></span>\n: \n<span class='editable url' data-placeholder='www.example.com'></span>\n<a class='delete'>\u232B</a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['links/empty'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("Click 'add' to add one or more external links here, or enter an id below for an automatic link to that site.\n<a class='add add_link'>\n  add a link\n</a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['links/list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='title'></a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['map'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='map_holder'></div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['pages/about'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='head'>\n  <div class='home picture'></div>\n  <div class='title'>\n    <h2 class='name on_picture'>\n      About fellrace\n    </h2>\n  </div>\n</div>\n<div class='body'>\n  <div class='page'>\n    <p>\n      Fellrace.org.uk is the creation of \n      <a href='/runners/9765'>Will, </a>\n      <a href='/runners/1404'>Mike</a>\n      and\n      <a href='/runners/469'>Anna</a>\n      at \n      <a href='http://spanner.org'>Spanner.</a>\n      Our real work is making esoteric web machinery for academic, scientific and charity clients\n      all over the world, but we're all devoted fell runners and this is the nice side \n      project where we get to work on what we love and try out new stuff.*\n    </p>\n    <p>\n      We all run for \n      <a href='http://bcrunners.org.uk'>Black Combe,</a>\n      the most serious and widely-envied of fell clubs, \n      and we also think it's important that we do what we can for the less fortunate fell runner.\n    </p>\n    <p>\n      Spanner is based in a small barn in the South Lakes and the office always contains as many dogs as people.\n      If you need a really nice simple machine, or a collation engine for a million concurrent mobile clients, come and see us.\n    </p>\n    <p>\n      <br>\n      <br>\n      * The new stuff sometimes breaks. We are notified automatically of any major failure, but please \n      <a href='mailto:fellrace@spanner.org'>let us know</a>\n      anyway.\n    </p>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['pages/online_entries'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='head'>\n  <div class='home picture'></div>\n  <div class='title'>\n    <h2 class='name on_picture'>\n      Online entries\n    </h2>\n  </div>\n</div>\n<div class='body'>\n  <p>\n    Any race can be enabled for online entries. \n    All you have to do is visit the page for this year's race, tick the 'online entries' box and give a start and end date.\n    The dates will default to 'today' and 'about a week before the race', so you can probably start receiving online entries in two or three clicks.\n  </p>\n  <p>\n    You can also add entries manually and take entries on the day, and you can set different entry fees for each channel.\n  </p>\n  <h3>\n    Stripe\n  </h3>\n  <p>\n    Credit card transactions are handled for us by \n    <a href='https://stripe.com'>stripe.com. </a>\n  </p>\n  <p>\n    In the basic setup, entry fees flow into our holding account and we pass them on by bank transfer just after the closing date for online entries.\n    It is also possible, and very easy, to set up your own stripe account. In that case we can send the money straight to you.\n    It takes about seven days to get through.\n  </p>\n  <h3>\n    Fees and deductions\n  </h3>\n  <p>\n    Stripe takes 2.4% of the total charge plus a 20p flat fee. Fellrace.org.uk (that is, Spanner Ltd, the company that makes the site) takes 2.5%. \n    It works out like this:\n  </p>\n  <table>\n    <thead>\n      <tr>\n        <th>\n          Race fee\n        </th>\n        <th>\n          to stripe\n        </th>\n        <th>\n          to fellrace\n        </th>\n        <th>\n          to organiser\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>\n          £3.00\n        </td>\n        <td>\n          27p\n        </td>\n        <td>\n          8p\n        </td>\n        <td>\n          £2.65\n        </td>\n      </tr>\n      <tr>\n        <td>\n          £7.00\n        </td>\n        <td>\n          37p\n        </td>\n        <td>\n          18p\n        </td>\n        <td>\n          £6.45\n        </td>\n      </tr>\n      <tr>\n        <td>\n          £15.00\n        </td>\n        <td>\n          56p\n        </td>\n        <td>\n          38p\n        </td>\n        <td>\n          £14.07\n        </td>\n      </tr>\n      <tr>\n        <td>\n          £35.00\n        </td>\n        <td>\n          £1.04\n        </td>\n        <td>\n          88p\n        </td>\n        <td>\n          £33.09\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <p>\n    We're not going to become immensely rich but it might help to offset the cost of running the site.\n  </p>\n  <p>\n    Please refer to the \n    <a href='/faq/terms'>terms and conditions</a>\n    that will apply to race entries bought through this site. \n    The short version is that there are no refunds unless you, the organiser, decide to make one. \n    In that case you probably want to refund only the part that comes to you.\n  </p>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['pages/terms'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='head'>\n  <div class='home picture'></div>\n  <div class='title'>\n    <h2 class='name on_picture'>\n      Terms and Conditions\n    </h2>\n  </div>\n</div>\n<div class='body'>\n  <div class='page'>\n    <p>\n      By using this site and by entering a race you will be deemed to have accepted these terms.\n    </p>\n    <h3>\n      Online entries\n    </h3>\n    <ul>\n      <li>\n        When you enter a race, fellrace.org.uk is acting as an agent for the organiser.\n      </li>\n      <li>\n        Race entries are not refundable except at the discretion of the race organiser.\n      </li>\n      <li>\n        Race entries are not transferrable unless the race organiser decides to permit it, \n        and may only be transferrable within a club.\n      </li>\n      <li>\n        All race entry forms include the current standard FRA disclaimers and warnings. \n        By entering a race through fellrace.org.uk you affirm your acceptance of those conditions.\n      </li>\n    </ul>\n    <h3>\n      Race sites\n    </h3>\n    <ul>\n      <li>\n        All text, images, routes and other information uploaded to fellrace.org.uk is deemed to have been released \n        under the\n        <a href='http://creativecommons.org/licenses/by-sa/4.0/'>Attribution-ShareAlike 4.0 International</a>\n        creative commons license. Basically, people can do whatever they like with your information \n        but they are supposed to credit fellrace.org.uk when they do it, and they are not allowed to prevent other people from sharing it.\n      </li>\n      <li>\n        fellrace.org.uk is acting as a publishing intermediary for the fell race organiser. \n        We accept no liability for any libellous, scandalous or mischievious remarks.\n        We do not scrutinise race pages for accuracy, usefulness or legality.\n      </li>\n      <li>\n        fellrace.org.uk accepts no liability for your navigational errors either\n      </li>\n      <li>\n        or from any other injury, inconvenience or death that arises from trying to follow our routes or do what it says on our pages.\n        You are responsible for scrutinising the information provided here, assessing your own ability and preparedness and attending to your own safety.\n      </li>\n      <li>\n        The maps appearing on this site are copyright Ordnance Survey, or other providers as marked on the map.\n      </li>\n    </ul>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['performances/checkpoint_cell'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<span class='elapsed'></span>\n<span class='split'></span>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['performances/competitor_table'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<table class='performances'>\n  <thead>\n    <tr>\n      <th>Date</th>\n      <th>Race</th>\n      <th>Time</th>\n      <th>Pos</th>\n    </tr>\n  </thead>\n  <tbody></tbody>\n</table>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['performances/graph_line'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = function(text, escape) {
        return ("" + text).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&#39;').replace(/\//g, '&#47;').replace(/"/g, '&quot;');
      };
      $c = function(text) {
        switch (text) {
          case null:
          case void 0:
            return '';
          case true:
          case false:
            return '' + text;
          default:
            return text;
        }
      };
      $o = [];
      $o.push("<path class='performance' d='" + ($e($c(this.path))) + "'></path>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['performances/history_loading'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = function(text, escape) {
        return ("" + text).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&#39;').replace(/\//g, '&#47;').replace(/"/g, '&quot;');
      };
      $c = function(text) {
        switch (text) {
          case null:
          case void 0:
            return '';
          case true:
          case false:
            return '' + text;
          default:
            return text;
        }
      };
      $o = [];
      $o.push("<td colspan='" + ($e($c(7))) + "'>\n  <h3 class='working'>\n    Please wait: loading the full race history takes a little while.\n  </h3>\n</td>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['performances/history_row'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<td class='pos'>\n  <span class='pos'></span>\n  <span class='comp_pos'></span>\n</td>\n<td class='name'>\n  <a class='name'>\n    <span class='forename'></span>\n    <span class='middlename'></span>\n    <span class='surname'></span>\n  </a>\n</td>\n<td class='club'>\n  <span class='club'></span>\n</td>\n<td class='cat'>\n  <span class='cat'></span>\n</td>\n<td class='race_position'>\n  <span class='race_position'></span>\n</td>\n<td class='time'>\n  <span class='time'></span>\n</td>\n<td class='instance'>\n  <span class='instance'></span>\n</td>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['performances/history_table'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<thead>\n  <tr>\n    <th class='pos'>\n      Pos\n    </th>\n    <th class='name'>\n      Name\n    </th>\n    <th class='club'>\n      Club\n    </th>\n    <th class='cat'>\n      Category\n    </th>\n    <th class='race_position'>\n      Race pos\n    </th>\n    <th class='time'>\n      Time\n    </th>\n    <th class='instance'>\n      Year\n    </th>\n  </tr>\n</thead>\n<tbody></tbody>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['performances/name_cell'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='name'></a>\n<span class='name'></span>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['performances/result_row'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<td class='pos'>\n  <span class='pos'></span>\n</td>\n<td class='name'>\n  <span class='name'></span>\n  <a class='name'></a>\n</td>\n<td class='club'>\n  <span class='club'></span>\n  <a class='club'></a>\n</td>\n<td class='cat'>\n  <span class='cat'></span>\n</td>\n<td class='time'>\n  <span class='time'></span>\n</td>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['performances/results_table'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<thead>\n  <tr class='columns'>\n    <th class='pos'>\n      <a class='pos' data-sort='pos'>Pos</a>\n    </th>\n    <th class='name'>\n      <a class='name' data-sort='name'>Name</a>\n    </th>\n    <th class='club'>\n      <a class='club' data-sort='club'>Club</a>\n    </th>\n    <th class='cat'>\n      <a class='cat' data-sort='cat'>Category</a>\n    </th>\n    <th class='time'>\n      <a class='time' data-sort='time'>Time</a>\n    </th>\n  </tr>\n</thead>\n<tbody></tbody>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['performances/row'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<td>\n  <span class='date'></span>\n</td>\n<td>\n  <span class='race_name'></span>\n</td>\n<td>\n  <a class='time'>\n    <span class='time'></span>\n  </a>\n</td>\n<td>\n  <span class='pos'></span>\n  <span class='total'></span>\n</td>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['performances/time_cell'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<span class='time'></span>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['publications/entry'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div id='eventhead'>\n  <h1>\n    <a id='name'></a>\n  </h1>\n</div>\n<div id='eventbody'>\n  <div id='instances'></div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['publications/external'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div id='eventbody'>\n  <div id='event_details'>\n    <div id='description'></div>\n  </div>\n  <div class='races'>\n    <div class='races_list'></div>\n  </div>\n</div>\n<div id='credit'>\n  <p>\n    Map and data provided by\n    <a class='fellrace' href='http://fellrace.org.uk/'>\n      fellrace.org.uk.\n    </a>\n  </p>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['publications/list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<h3>\n  <a class='event' href='#'>\n    <span class='profile'></span>\n    <span class='name'></span>\n  </a>\n  <span class='date note'></span>\n</h3>\n<p>\n  <span class='intro'></span>\n  <!-- %a.marker -->\n  <!--   \u25B3 -->\n</p>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['publications/list'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<h1 class='title'></h1>\n<div class='publications'></div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['publications/race_details'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<strong>\n  <span class='cat'></span>\n</strong>\n<span class='distance'></span>\nkm \u2192\n<span class='climb'></span>\nm \u2191");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['publications/show'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div id='eventhead'>\n  <h1 id='name'></h1>\n  <div id='eventcontrols'>\n    <a class='edit'>\n      Edit\n    </a>\n    <a class='publish'>\n      Publish &raquo;\n    </a>\n    <a class='enter'>\n      Enter &raquo;\n    </a>\n  </div>\n</div>\n<div id='eventbody'>\n  <div id='event_details'>\n    <p class='date'>\n      <span class='next'>Next</span>\n      race:\n      <strong id='event_date'></strong>\n    </p>\n    <div id='description'></div>\n  </div>\n  <div class='races'>\n    <div class='races_list'></div>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['race_publications/entry'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='head'>\n  <div class='main_info'>\n    <div class='race_title title'>\n      <h2 class='name'></h2>\n    </div>\n  </div>\n</div>\n<div class='race_body'></div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['race_publications/external'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='head'>\n  <div class='profile'>\n    <span class='race_profile'>\n      1,1,1,1\n    </span>\n  </div>\n  <div class='main_info'>\n    <div class='race_title title'>\n      <h2>\n        <a class='opener'>\n          <span class='name'></span>\n        </a>\n        <span class='subtitle'>\n          <span class='distance'></span>\n          km /\n          <span class='climb'></span>\n          m\n        </span>\n      </h2>\n    </div>\n  </div>\n</div>\n<div class='race_body'>\n  <div class='description'></div>\n  <div class='details'>\n    <div class='attachments'>\n      <ul class='attachments'></ul>\n    </div>\n    <div class='checkpoints'>\n      <h4>\n        Checkpoints\n      </h4>\n      <ul class='checkpoints'></ul>\n    </div>\n    <div class='records'>\n      <h4>\n        Records\n      </h4>\n      <ul class='records'></ul>\n    </div>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "").replace(/[\s\n]*\u0091/mg, '').replace(/\u0092[\s\n]*/mg, '');
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['race_publications/history'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='big close'></a>\n<h2>\n  <a class='race_name'></a>\n  <span>\n    all-time results\n  </span>\n  <span class='addendum since'></span>\n  <input class='filter' type='text' name='filter' placeholder='Filter...'>\n</h2>\n<p>\n  <span class='all_runs'>\n    Showing all\n    <span class='performances_count'></span>\n    performances\n    <a class='addendum compact'>(show the best time for each runner)</a>\n  </span>\n  <span class='all_runners'>\n    Showing\n    <span class='competitors_count'></span>\n    personal bests\n    <a class='addendum full'>(show every performance)</a>\n  </span>\n  <p>\n    Results from alternative (bad weather/winter) courses are excluded from this table.\n  </p>\n</p>\n<table class='history'>\n  <thead>\n    <tr>\n      <th class='pos'>\n        Pos\n      </th>\n      <th class='name'>\n        Name\n      </th>\n      <th class='club'>\n        Club\n      </th>\n      <th class='cat'>\n        Category\n      </th>\n      <th class='race_position'>\n        Race pos\n      </th>\n      <th class='time'>\n        Time\n      </th>\n      <th class='instance'>\n        Year\n      </th>\n    </tr>\n  </thead>\n  <tbody class='history'></tbody>\n</table>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['race_publications/index_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='race_link'>\n  <span class='profile'></span>\n  <span class='name'></span>\n</a>\n<div class='owner'>\n  <a class='edit'>edit</a>\n</div>\n<p class='intro'></p>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['race_publications/index'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='head'>\n  <div class='home picture'></div>\n  <div class='title'>\n    <h2 class='name on_picture'>\n      Races\n    </h2>\n  </div>\n</div>\n<div class='body'>\n  <div class='races'></div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['race_publications/list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='race_name' href='#'></a>\n<div class='details'>\n  <strong>\n    <span class='cat'></span>\n  </strong>\n  <span class='distance'></span>\n  km \u2192\n  <span class='climb'></span>\n  m \u2191\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['race_publications/next_or_recent_instance'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='date'></a>\nat\n<span class='time'></span>\n<p class='entry'>\n  <span class='eod'>\n    Entry on the day:\n    <span class='currency eod_fee'></span>\n  </span>\n  <span class='no_eod'>\n    No entry on the day\n  </span>\n  <a class='enter_online opener'>\n    Enter online:\n    <span class='currency online_entry_fee'></span>\n  </a>\n  <a class='enter_postal' target='_blank'>\n    Download entry form\n  </a>\n  <a class='entries opener'>\n    Entry list\n  </a>\n  <a class='history opener'>\n    All-time results\n  </a>\n</p>\n<p class='results'>\n  <a class='results'>\n    Results available\n  </a>\n</p>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['race_publications/show'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='head'>\n  <div class='picture'></div>\n  <div class='title'>\n    <h2 class='name'></h2>\n    <div class='owner'>\n      <a class='edit'>edit</a>\n    </div>\n  </div>\n  <div class='social'>\n    <a class='fb'>facebook</a>\n    <a class='twit'>twitter</a>\n    <a class='shr'>SHR</a>\n    <a class='fra'>FRA</a>\n  </div>\n</div>\n<div class='race_body'>\n  <div class='summary'>\n    <div class='profile'>\n      <span class='race_profile'></span>\n      <div class='basic_details'>\n        <span class='cat'></span>\n        <span class='distance'></span>\n        km /\n        <span class='climb'></span>\n        m\n      </div>\n    </div>\n    <div class='next_or_recent'></div>\n  </div>\n  <div class='description'></div>\n  <div class='details'>\n    <div class='attachments'>\n      <h3>\n        Downloads\n      </h3>\n      <ul class='attachments'></ul>\n    </div>\n    <div class='race_requirements'>\n      <h3>\n        Requirements\n      </h3>\n      <div class='show_requirements'>\n        <p class='requirements'></p>\n      </div>\n    </div>\n    <div class='checkpoints'>\n      <h3>\n        Checkpoints\n      </h3>\n      <ul class='checkpoints published'></ul>\n    </div>\n    <div class='records'>\n      <h3>\n        Records\n      </h3>\n      <ul class='records'></ul>\n    </div>\n    <div class='links'>\n      <h3>\n        Links\n      </h3>\n      <ul class='links'></ul>\n    </div>\n  </div>\n  <div class='moredetails'>\n    <div class='race_organiser'>\n      <h3>\n        Organiser\n      </h3>\n      <ul class='show_organiser'>\n        <li>\n          <a class='organiser_name'></a>\n        </li>\n        <li>\n          <span class='organiser_phone'></span>\n        </li>\n        <li>\n          <p class='organiser_address'></p>\n        </li>\n      </ul>\n    </div>\n    <div class='past_instances'>\n      <h3>\n        Results\n        <a class='history note'>all</a>\n      </h3>\n      <ul class='past_instances'></ul>\n    </div>\n  </div>\n  <div class='conclusion'>\n    <p>\n      fellrace.org.uk is built by fell runners who ought to be doing their real work,\n      and it has been known to fall over or go the wrong way. We are notified automatically when something breaks, \n      but please \n      let us know\n      anyway, and if you have any other suggestions or comments, please send them to Will.\n    </p>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['races/edit'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='head'>\n  <div class='picture'></div>\n  <div class='title'>\n    <h2 class='editable name' data-placeholder='Race name'></h2>\n    <div class='owner'>\n      <a class='cancel'>exit</a>\n      <a class='publish'>publish</a>\n    </div>\n  </div>\n  <!-- .social -->\n  <!--   %a.fb facebook -->\n  <!--   %a.twit twitter -->\n  <!--   %a.shr SHR -->\n  <!--   %a.fra FRA -->\n</div>\n<div class='race_body'>\n  <div class='summary'>\n    <div class='profile'>\n      <span class='race_profile'></span>\n      <div class='basic_details'>\n        <span class='cat editable' data-placeholder='Cat (e.g. AM)'></span>\n        &nbsp;\n        <span class='distance editable' data-placeholder='dist'></span>\n        km /\n        <span class='climb editable' data-placeholder='climb'></span>\n        m\n      </div>\n    </div>\n    <div class='next_or_recent'></div>\n  </div>\n  <div class='description editable' data-placeholder='Race description' data-toolbar></div>\n  <div class='details'>\n    <div class='attachments'>\n      <h3>\n        Downloads\n        <a class='add add_attachment'>\n          add\n        </a>\n      </h3>\n      <ul class='attachments'></ul>\n    </div>\n    <div class='race_requirements'>\n      <h3>\n        Requirements\n      </h3>\n      <div class='show_requirements'>\n        <p class='editable requirements' data-placeholder='Required kit and other instructions'></p>\n      </div>\n    </div>\n    <div class='checkpoints'>\n      <h3>\n        Checkpoints\n        <a class='add add_checkpoint'>\n          add\n        </a>\n      </h3>\n      <ul class='checkpoints'></ul>\n    </div>\n    <div class='route'>\n      <h3>\n        <input class='race_show_route' type='checkbox'>\n        Route\n      </h3>\n      <div class='route_controls'>\n        <div class='no_route'>\n          <p class='note'>\n            You can either\n            <a class='add checkpoint_route'>generate a route</a>\n            from the checkpoints or\n            <a class='add draw_route'>draw one on the map</a>\n          </p>\n        </div>\n        <div class='route_details'>\n          <span class='route_distance'></span>\n          km \u2192\&nbsp;\n          <span class='route_elevation'></span>\n          m \u2191\n          <input class='route_colour' type='color'>\n          <!-- %a.extend extend -->\n          <a class='delete delete_route'>\u232B</a>\n        </div>\n      </div>\n      <p class='note'>\n        If you want to show a profile and checkpoints but not tell people\n        where to go, you can draw out a route then hide it by unchecking the \n        box next to Route.\n      </p>\n    </div>\n    <div class='records'>\n      <h3>\n        Records\n        <a class='add add_record'>\n          add\n        </a>\n      </h3>\n      <ul class='records'></ul>\n    </div>\n    <div class='links'>\n      <h3>\n        Links\n        <a class='add add_link'>\n          add\n        </a>\n      </h3>\n      <ul class='links'></ul>\n    </div>\n  </div>\n  <div class='moredetails'>\n    <div class='future_instances'>\n      <h3>\n        Next race\n        <a class='add add_instance'>\n          add\n        </a>\n      </h3>\n      <ul class='future_instances'></ul>\n    </div>\n    <div class='past_instances'>\n      <h3>\n        Results\n        <a class='add add_instance'>\n          add\n        </a>\n      </h3>\n      <ul class='past_instances'></ul>\n    </div>\n    <div class='race_organiser'>\n      <h3>\n        Organiser\n      </h3>\n      <ul class='show_organiser'>\n        <li>\n          <span class='editable organiser_name' data-placeholder='name'></span>\n        </li>\n        <li>\n          <span class='editable organiser_email' data-placeholder='email'></span>\n        </li>\n        <li>\n          <span class='editable organiser_phone' data-placeholder='phone number'></span>\n        </li>\n        <li>\n          <p class='editable organiser_address' data-placeholder='address'></p>\n        </li>\n      </ul>\n    </div>\n  </div>\n  <div class='conclusion'>\n    <p>\n      fellrace.org.uk is built by fell runners who ought to be doing their real work,\n      and it has been known to fall over or go the wrong way. We are notified automatically when something breaks, \n      but please \n      let us know\n      anyway, and if you have any other suggestions or comments, please send them to Will.\n    </p>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "").replace(/[\s\n]*\u0091/mg, '').replace(/\u0092[\s\n]*/mg, '');
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['races/next_instance'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='date'></a>\n<span class='date'></span>\n<span class='time'></span>\n<a class='config'>\n  Dates, entries, results\n</a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['races/picture'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<input class='file' id='picturepicker' type='file' accept='image/*'>\n<label class='pick' for='picturepicker'>\n  set picture\n</label>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['records/admin_list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<span class='record'>\n  <span class='editable label' data-placeholder='Category'></span>\n  \:\n  <span class='editable time' data-placeholder='hh:mm:ss'></span>\n</span>\n<a class='delete'>\u232B</a>\n<span class='holder'>\n  <span class='editable name' data-placeholder='name'></span>\n  \,\n  <span class='editable year' data-placeholder='year'></span>\n</span>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "").replace(/[\s\n]*\u0091/mg, '').replace(/\u0092[\s\n]*/mg, '');
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['records/empty'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("Race records usually belong to entry categories (M, L, MV50 etc) but can have any label you like.\n<a class='add add_record'>\n  Click here to add a record.\n</a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['records/list_item'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<span class='record'>\n  <span class='label'></span>\n  \:\n  <span class='time'></span>\n</span>\n<span class='holder'>\n  <span class='name'></span>\n  \,\n  <span class='year'></span>\n</span>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['sessions/confirmation_form'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='confirm'>\n  <p class='waiter'>\n    Please wait while we check your confirmation token.\n  </p>\n  <p class='refusal'>\n    Sorry: this confirmation link does not seem to be correct. Have you already confirmed your account?\n    If not, you can \n    <a class='reconfirm'>\n      request another confirmation message.\n    </a>\n    Please make sure you're using the whole link.\n  </p>\n  <form>\n    <a class='avatar hide'></a>\n    <h3>\n      Welcome back \n    </h3>\n    <p class='preamble'>\n      Thank you for all the waiting and clicking.\n      To finish setting up your account, we only need your name and password.\n    </p>\n    <fieldset>\n      <p class='names'>\n        <label for='first_name'>\n          Name\n        </label>\n        <br>\n        <input id='first_name' name='first_name' type='text' required='required' placeholder='First name'>\n        <input id='last_name' name='last_name' type='text' required='required' placeholder='Surname'>\n      </p>\n      <p>\n        <label for='password'>\n          Password\n        </label>\n        <input id='password' name='password' type='password' required='required'>\n      </p>\n      <div class='password_confirmation'>\n        <p>\n          <label for='password_confirmation'>\n            and please confirm\n          </label>\n          <input id='password_confirmation' name='password_confirmation' type='password' required='required'>\n        </p>\n      </div>\n      <!-- / #TODO: choose a running club too. -->\n      <div class='buttons'>\n        <input type='submit' value='Save me'>\n      </div>\n    </fieldset>\n    <p class='outcome'>\n      When you press 'save me' we will store this password and create a site at\n      <strong class='domain'></strong>\n    </p>\n  </form>\n  <div class='confirmation'>\n    <h3 class='robot'>\n      All done\n    </h3>\n    <p>\n      Please wait while we create your site.\n    </p>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['sessions/confirmation_required'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='signin'>\n  <form class='password'>\n    <a class='avatar hide'></a>\n    <h3>\n      Awaiting confirmation\n    </h3>\n    <p>\n      Thank you for signing up. We have sent a confirmation message to\n      <strong id='email'></strong>\n    </p>\n    <p>\n      Please click on its large friendly button to complete the process.\n    </p>\n  </form>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['sessions/login_form'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='signin'>\n  <a class='big close'></a>\n  <h3>\n    Sign in here\n  </h3>\n  <form>\n    <fieldset>\n      <p>\n        <label for='email'>\n          Email\n        </label>\n        <input id='email' name='email' type='email' required='required'>\n      </p>\n      <p>\n        <label for='password'>\n          Password\n        </label>\n        <a class='forgotten'>\n          forgotten?\n        </a>\n        <input id='password' name='password' type='password' required='required'>\n      </p>\n      <div class='form-actions'>\n        <input type='submit' value='Sign in'>\n        <span class='note'>\n          or\n          <a class='cancel'>cancel</a>\n        </span>\n      </div>\n      <p class='large'>\n        No account?\n        <a class='sign_up'>sign up now.</a>\n        It's free and only takes a few seconds.\n      </p>\n    </fieldset>\n  </form>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['sessions/password_form'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='signin'>\n  <a class='avatar hide'></a>\n  <p class='waiter'>\n    Please wait while we check your reset token.\n  </p>\n  <p class='refusal'>\n    Sorry: this reset link does not seem to be correct. Have you already used this reset token?\n    You can \n    <a class='reqest_reset'>\n      request another one.\n    </a>\n    Otherwise, please check your email and make sure you're getting the whole link.\n  </p>\n  <form>\n    <h3>\n      Hello\n      <span class='first_name'></span>\n    </h3>\n    <p class='preamble'>\n      Welcome back. Please use this form to choose a new password.\n    </p>\n    <fieldset>\n      <p>\n        <label for='password'>\n          New password\n        </label>\n        <input id='password' name='password' type='password' required='required'>\n        <span class='note'>\n          At least 6 characters, please\n        </span>\n      </p>\n      <div class='password_confirmation'>\n        <p>\n          <label for='password_confirmation'>\n            and please confirm\n          </label>\n          <input id='password_confirmation' name='password_confirmation' type='password' required='required'>\n        </p>\n      </div>\n      <div class='buttons'>\n        <input type='submit' value='Set password'>\n      </div>\n    </fieldset>\n    <p class='note'>\n      When you press 'set password' we will update your account with that password and discard the old one.\n      Until that point, you can \n      <a class='cancel'>cancel this operation</a>\n      and the old one will still work.\n    </p>\n  </form>\n  <div class='confirmation'>\n    <h3 class='robot'>\n      Password updated\n    </h3>\n    <p>\n      Your password has been reset and you have been signed in automatically.\n      You can\n      <a class='cancel'>get back to work.</a>\n    </p>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['sessions/reconfirmation_form'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='signin'>\n  <form class='password'>\n    <a class='avatar hide'></a>\n    <h3>\n      Resend confirmation\n    </h3>\n    <fieldset>\n      <p>\n        <label for='email'>\n          Email address\n        </label>\n        <input id='email' name='email' type='email' required='required'>\n      </p>\n      <div class='buttons'>\n        <input type='submit' value='Send message'>\n        <span class='note'>\n          or\n          <a class='cancel'>\n            cancel\n          </a>\n        </span>\n      </div>\n      <p class='note'>\n        When you click 'send message' we will check\n        <span class='email'></span>\n        and if it is recognised, send another confirmation message to that address.\n        Please check the email address carefully.\n      </p>\n      <p>\n        If you have confirmed your account, this isn't necessary (and won't work) but you can always\n        <a class='request_reset'>\n          reset your password\n        </a>\n        instead.\n      </p>\n    </fieldset>\n  </form>\n  <div class='confirmation'>\n    <h3 class='robot'>\n      Confirmation sent\n    </h3>\n    <p>\n      Thank you. If we recognise\n      <span class='email'></span>\n      then a new confirmation message will be sent.\n      Please allow a few minutes for it to arrive, and keep an eye on your spam folder.\n      The message will appear to come from robot@fellrace.org.uk.\n    </p>\n    <p>\n      If all else fails, you can \n      <a class='sign_up'>\n        sign up again\n      </a>\n      with another address. \n      Your address is still available until you confirm your account.\n    </p>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['sessions/reset_form'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='signin'>\n  <form class='password'>\n    <a class='avatar hide'></a>\n    <h3>\n      Reset your password\n    </h3>\n    <fieldset>\n      <p>\n        <label for='email'>\n          Email address\n        </label>\n        <input id='email' name='email' type='email' required='required'>\n      </p>\n      <div class='buttons'>\n        <input type='submit' value='Send instructions'>\n        <span class='note'>\n          or\n          <a class='cancel'>\n            cancel\n          </a>\n        </span>\n      </div>\n      <p class='note'>\n        When you click 'send instructions' we will check\n        <span class='email'></span>\n        and if it is recognised, send a message explaining how to reset your password.\n        Please check the email address carefully.\n      </p>\n      <p>\n        If you haven't confirmed your account yet, this won't work. You should \n        <a class='reconfirm'>\n          request a new confirmation message\n        </a>\n        instead.\n      </p>\n    </fieldset>\n  </form>\n  <div class='confirmation'>\n    <h3 class='robot'>\n      Reset message sent\n    </h3>\n    <p>\n      Thank you. If we recognised\n      <span class='email'></span>\n      then a message was sent explaining how to reset your password. \n      Please allow a few minutes for it to arrive, and keep an eye on your spam folder.\n      The message will appear to come from robot@fellrace.org.uk.\n    </p>\n    <p>\n      Nothing has changed, so if you remember your password you can still\n      <a class='sign_in'>\n        sign in\n      </a>\n      <div class=''></div>\n      <!-- or  -->\n      <!-- %a{href: \"/\"} -->\n      <!--   request a site -->\n      <!-- as usual. -->\n    </p>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['users/action_menu'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='big close'></a>\n<a class='avatar hide'></a>\n<h3 class='name'></h3>\n<ul class='actions'>\n  <li>\n    <a class='me' href='/users/me'>\n      Your page\n    </a>\n  </li>\n  <!-- %li -->\n  <!--   %a.prefs{href: \"/users/me/preferences\"} -->\n  <!--     Account preferences -->\n  <li>\n    <a class='signout'>\n      Sign out\n    </a>\n  </li>\n  <li class='find_me'>\n    <a class='find_me'>Where am I?</a>\n  </li>\n</ul>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['users/confirmation_notice'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = function(text, escape) {
        return ("" + text).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&#39;').replace(/\//g, '&#47;').replace(/"/g, '&quot;');
      };
      $c = function(text) {
        switch (text) {
          case null:
          case void 0:
            return '';
          case true:
          case false:
            return '' + text;
          default:
            return text;
        }
      };
      $o = [];
      $o.push("<a class='avatar hide'></a>\n<h3>\n  Hello \n  <span class='first_name'></span>\n</h3>\n<p>\n  Welcome to fellrace.org.uk.\n</p>\n<p>\n  An email message has been sent to \n  <strong>");
      $o.push("    " + $e($c(this.user.email)));
      $o.push("  </strong>\n  containing a large friendly button. \n  Please push the button to confirm that the address belongs to you.\n  You will be brought back here to choose a password and start your site.\n</p>\n<p class='outcome'></p>\n<p>\n  If you can't find the confirmation message, we can send it again either to the same address or a new one: \n</p>\n<form class='resend'>\n  <fieldset>\n    <input id='email' name='email' type='email' required='required' placeholder='email address'>\n    <input type='submit' value='Resend confirmation'>\n  </fieldset>\n</form>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['users/controls'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='avatar'></a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['users/greeting'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='avatar hide'></a>\n<h3>\n  Hello \n  <span class='first_name'></span>\n</h3>\n<p>\n  Welcome to fellrace.org.uk.\n</p>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['users/preferences'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='head'>\n  <div class='home picture'></div>\n</div>\n<div class='body'>\n  <p class='name twocol'>\n    <span class='col'>\n      <label for='first_name'>Forename</label>\n      <input id='first_name' type='text'>\n    </span>\n    <span class='col last'>\n      <label for='last_name'>Surname</label>\n      <input id='last_name' type='text'>\n    </span>\n  </p>\n  <p class='email twocol'>\n    <span class='col'>\n      <label for='email'>Email</label>\n      <input id='email' type='email'>\n    </span>\n  </p>\n  <p class='hide onecol password'>\n    <span class='col'>\n      <label for='password'>Password</label>\n      <input id='password' type='password'>\n    </span>\n  </p>\n  <p class='hide new_password twocol'>\n    <span class='col'>\n      <label for='new_password'>New password</label>\n      <input id='new_password' type='password'>\n    </span>\n    <span class='col last'>\n      <label for='new_password_confirmation'>New password confirmation</label>\n      <input id='new_password_confirmation' type='password'>\n    </span>\n  </p>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['users/show'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div id='competitor'></div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['users/sign_in_out'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='sign_in' href='/sign_in'>\n  Sign in\n</a>\n<a class='sign_out' href='/sign_out'>\n  Sign out\n</a>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['users/sign_up_for_race'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='check'></div>\n<div class='register'>\n  <form class='signup'>\n    <fieldset class='race'>\n      <a class='avatar hide'></a>\n      <p class='availability'></p>\n      <input id='desired_slug' name='slug' type='text' required='required'>\n      <span class='domain'>\n        \.fellrace.org.uk\n      </span>\n    </fieldset>\n    <fieldset class='user'>\n      <input id='email' name='email' type='email' required='required' placeholder='email address'>\n      <input type='submit' value='Sign up'>\n      <p class='note'>\n        When you click 'sign up' we'll send a confirmation message to \n        <span class='email'></span>\n        Click on its large friendly button\n        <span class='outcome'></span>\n      </p>\n    </fieldset>\n  </form>\n  <p>\n    Already got one? Please\n    <a class='sign_in'>\n      sign in first.\n    </a>\n  </p>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);

(function() {
  if (FellRace.Templates == null) {
    FellRace.Templates = {};
  }

  FellRace.Templates['users/sign_up'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<a class='big close'></a>\n<a class='avatar hide'></a>\n<h3>\n  Welcome!\n</h3>\n<div class='register'>\n  <form class='signup'>\n    <fieldset class='user'>\n      <input id='email' name='email' type='email' required='required' placeholder='email address'>\n      <input type='submit' value='Sign up'>\n      <p class='note'>\n        When you click 'sign up' we'll send a confirmation message to\n        <span class='email'></span>\n        Click on its large friendly button\n        <span class='outcome'></span>\n      </p>\n    </fieldset>\n  </form>\n  <p>\n    Already got an account? Please\n    <a class='sign_in'>\n      sign in instead.\n    </a>\n  </p>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(context);
  };

}).call(this);
